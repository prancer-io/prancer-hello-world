{
  "structure": "filesystem",
  "error": null,
  "reference": "master",
  "contentType": "json",
  "source": "gitConnectorAwsLabs",
  "paths": [
    "/community/services/Lambda/LambdaSample.yaml"
  ],
  "timestamp": 1642972590721,
  "queryuser": null,
  "checksum": "99914b932bd37a50b983c5e7c90ae93b",
  "node": {
    "masterSnapshotId": "CFR_TEMPLATE_SNAPSHOT",
    "type": "cloudformation",
    "collection": "cloudformationtemplate",
    "paths": [
      "/community/services/Lambda/LambdaSample.yaml"
    ],
    "snapshotId": "CFR_TEMPLATE_SNAPSHOT105",
    "status": "active",
    "validate": true,
    "resourceTypes": [
      "aws::iam::role",
      "aws::lambda::function"
    ]
  },
  "snapshotId": "CFR_TEMPLATE_SNAPSHOT105",
  "collection": "cloudformationtemplate",
  "json": {
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Template for Lambda Sample.",
    "Parameters": {
      "EnvName": {
        "Type": "String",
        "Description": "Name of an environment. 'dev', 'staging', 'prod' and any name.",
        "AllowedPattern": "^.*[^0-9]$",
        "ConstraintDescription": "Must end with non-numeric character."
      },
      "LambdaHandlerPath": {
        "Type": "String",
        "Description": "Path of a Lambda Handler.",
        "AllowedPattern": "^.*[^0-9]$",
        "ConstraintDescription": "Must end with non-numeric character."
      }
    },
    "Outputs": {
      "LambdaRoleARN": {
        "Description": "Role for Lambda execution.",
        "Value": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Export": {
          "Name": {
            "Fn::Sub": "LambdaRole"
          }
        }
      },
      "LambdaFunctionName": {
        "Value": {
          "Ref": "LambdaFunction"
        }
      },
      "LambdaFunctionARN": {
        "Description": "Lambda function ARN.",
        "Value": {
          "Fn::GetAtt": [
            "LambdaFunction",
            "Arn"
          ]
        },
        "Export": {
          "Name": {
            "Fn::Sub": "LambdaARN-${EnvName}"
          }
        }
      }
    },
    "Resources": [
      {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "RoleName": {
            "Fn::Sub": "lambda-role"
          },
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "sts:AssumeRole"
                ],
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/AWSLambdaExecute",
            "arn:aws:iam::aws:policy/AmazonS3FullAccess",
            "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
            "arn:aws:iam::aws:policy/AmazonKinesisFullAccess"
          ],
          "Path": "/"
        },
        "Name": "LambdaRole"
      },
      {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": {
            "Fn::Sub": "lambda-function-${EnvName}"
          },
          "Description": "LambdaFunctioni of nodejs10.x.",
          "Runtime": "nodejs10.x",
          "Code": {
            "ZipFile": "exports.handler = function(event, context){\n var sample = sample;"
          },
          "Handler": "${LambdaHandlerPath}",
          "MemorySize": 128,
          "Timeout": 10,
          "Role": {
            "Fn::GetAtt": [
              "LambdaRole",
              "Arn"
            ]
          },
          "Environment": {
            "Variables": {
              "ENV": {
                "Fn::Sub": "${EnvName}"
              },
              "TZ": "UTC"
            }
          }
        },
        "Name": "LambdaFunction"
      }
    ]
  }
}