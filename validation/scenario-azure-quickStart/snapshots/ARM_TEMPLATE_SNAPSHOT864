{
  "structure": "filesystem",
  "error": null,
  "reference": "master",
  "contentType": "json",
  "source": "gitConnectorAzureQuickStart",
  "paths": [
    "/demos/vmss-windows-webapp-dsc-autoscale/azuredeploy.json",
    "/demos/vmss-windows-webapp-dsc-autoscale/azuredeploy.parameters.json"
  ],
  "timestamp": 1642962902339,
  "queryuser": null,
  "checksum": "99914b932bd37a50b983c5e7c90ae93b",
  "node": {
    "masterSnapshotId": "ARM_TEMPLATE_SNAPSHOT",
    "type": "arm",
    "collection": "armtemplate",
    "paths": [
      "/demos/vmss-windows-webapp-dsc-autoscale/azuredeploy.json",
      "/demos/vmss-windows-webapp-dsc-autoscale/azuredeploy.parameters.json"
    ],
    "snapshotId": "ARM_TEMPLATE_SNAPSHOT864",
    "status": "active",
    "validate": true,
    "resourceTypes": [
      "microsoft.network/publicipaddresses",
      "microsoft.network/virtualnetworks",
      "microsoft.network/loadbalancers",
      "microsoft.compute/virtualmachinescalesets",
      "microsoft.insights/autoscalesettings"
    ]
  },
  "snapshotId": "ARM_TEMPLATE_SNAPSHOT864",
  "collection": "armtemplate",
  "json": {
    "contentVersion": "1.0.0.0",
    "parameters": {
      "vmSku": {
        "type": "string",
        "defaultValue": "Standard_A1_v2",
        "metadata": {
          "description": "Size of VMs in the VM Scale Set."
        }
      },
      "windowsOSVersion": {
        "type": "string",
        "defaultValue": "2019-Datacenter",
        "allowedValues": [
          "2008-R2-SP1",
          "2012-Datacenter",
          "2012-R2-Datacenter",
          "2016-Datacenter",
          "2019-Datacenter"
        ],
        "metadata": {
          "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter & 2016-Datacenter, 2019-Datacenter."
        }
      },
      "vmssName": {
        "type": "string",
        "minLength": 3,
        "maxLength": 61,
        "metadata": {
          "description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
        },
        "value": "GEN-UNIQUE-5"
      },
      "instanceCount": {
        "type": "int",
        "defaultValue": 3,
        "minValue": 1,
        "maxValue": 100,
        "metadata": {
          "description": "Number of VM instances (100 or less)."
        }
      },
      "singlePlacementGroup": {
        "type": "bool",
        "defaultValue": true,
        "metadata": {
          "description": "When true this limits the scale set to a single placement group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if singlePlacementGroup is false, it may not be modified to true."
        }
      },
      "adminUsername": {
        "type": "string",
        "defaultValue": "vmssadmin",
        "metadata": {
          "description": "Admin username on all VMs."
        },
        "value": "GEN-UNIQUE"
      },
      "adminPassword": {
        "type": "securestring",
        "metadata": {
          "description": "Admin password on all VMs."
        },
        "value": "GEN-PASSWORD"
      },
      "_artifactsLocation": {
        "type": "string",
        "defaultValue": "[deployment().properties.templatelink.uri]",
        "metadata": {
          "description": "The base URI where artifacts required by this template are located. For example, if stored on a public GitHub repo, you'd use the following URI: https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/201-vmss-windows-webapp-dsc-autoscale/."
        }
      },
      "_artifactsLocationSasToken": {
        "type": "securestring",
        "defaultValue": "",
        "metadata": {
          "description": "The sasToken required to access _artifactsLocation.  If your artifacts are stored on a public repo or public storage account you can leave this blank."
        }
      },
      "powershelldscZip": {
        "type": "string",
        "defaultValue": "DSC/InstallIIS.zip",
        "metadata": {
          "description": "Location of the PowerShell DSC zip file relative to the URI specified in the _artifactsLocation, i.e. DSC/IISInstall.ps1.zip"
        }
      },
      "webDeployPackage": {
        "type": "string",
        "defaultValue": "WebDeploy/DefaultASPWebApp.v1.0.zip",
        "metadata": {
          "description": "Location of the  of the WebDeploy package zip file relative to the URI specified in _artifactsLocation, i.e. WebDeploy/DefaultASPWebApp.v1.0.zip"
        }
      },
      "powershelldscUpdateTagVersion": {
        "type": "string",
        "defaultValue": "1.0",
        "metadata": {
          "description": "Version number of the DSC deployment. Changing this value on subsequent deployments will trigger the extension to run."
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for all resources."
        }
      },
      "platformFaultDomainCount": {
        "type": "int",
        "defaultValue": 1,
        "metadata": {
          "description": "Fault Domain count for each placement group."
        }
      }
    },
    "variables": {
      "namingInfix": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
      "longNamingInfix": "[toLower(parameters('vmssName'))]",
      "addressPrefix": "10.0.0.0/16",
      "subnetPrefix": "10.0.0.0/24",
      "virtualNetworkName": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]vnet",
      "publicIPAddressName": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]pip",
      "subnetName": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]subnet",
      "loadBalancerName": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]lb",
      "publicIPAddressID": "Microsoft.Network/publicIPAddresses/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]pip",
      "lbProbeID": "Microsoft.Network/loadBalancers/probes/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]lb/tcpProbe",
      "natPoolName": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]natpool",
      "bePoolName": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]bepool",
      "lbPoolID": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]lb/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]bepool",
      "natStartPort": 50000,
      "natEndPort": 50119,
      "natBackendPort": 3389,
      "nicName": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]nic",
      "ipConfigName": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]ipconfig",
      "frontEndIPConfigID": "Microsoft.Network/loadBalancers/frontendIPConfigurations/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]lb/loadBalancerFrontEnd",
      "osType": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2019-Datacenter",
        "version": "latest"
      },
      "imageReference": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2019-Datacenter",
        "version": "latest"
      },
      "webDeployPackageFullPath": "[uri(parameters('_artifactsLocation'), concat(parameters('webDeployPackage'), parameters('_artifactsLocationSasToken')))]",
      "powershelldscZipFullPath": "[uri(parameters('_artifactsLocation'), concat(parameters('powershelldscZip'), parameters('_artifactsLocationSasToken')))]"
    },
    "resources": [
      {
        "type": "Microsoft.Network/loadBalancers",
        "apiVersion": "2020-06-01",
        "name": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]lb",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/publicIPAddresses/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]pip"
        ],
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "LoadBalancerFrontEnd",
              "properties": {
                "publicIPAddress": {
                  "id": "Microsoft.Network/publicIPAddresses/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]pip"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]bepool"
            }
          ],
          "inboundNatPools": [
            {
              "name": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]natpool",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "Microsoft.Network/loadBalancers/frontendIPConfigurations/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]lb/loadBalancerFrontEnd"
                },
                "protocol": "Tcp",
                "frontendPortRangeStart": 50000,
                "frontendPortRangeEnd": 50119,
                "backendPort": 3389
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "LBRule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "Microsoft.Network/loadBalancers/frontendIPConfigurations/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]lb/loadBalancerFrontEnd"
                },
                "backendAddressPool": {
                  "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]lb/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]bepool"
                },
                "protocol": "Tcp",
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 5,
                "probe": {
                  "id": "Microsoft.Network/loadBalancers/probes/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]lb/tcpProbe"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "tcpProbe",
              "properties": {
                "protocol": "Tcp",
                "port": 80,
                "intervalInSeconds": 5,
                "numberOfProbes": 2
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachineScaleSets",
        "apiVersion": "2020-06-01",
        "name": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard_A1_v2",
          "tier": "Standard",
          "capacity": 3
        },
        "dependsOn": [
          "Microsoft.Network/loadBalancers/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]lb",
          "Microsoft.Network/virtualNetworks/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]vnet"
        ],
        "properties": {
          "overprovision": true,
          "upgradePolicy": {
            "mode": "Automatic"
          },
          "singlePlacementGroup": true,
          "platformFaultDomainCount": 1,
          "virtualMachineProfile": {
            "storageProfile": {
              "osDisk": {
                "caching": "ReadWrite",
                "createOption": "FromImage"
              },
              "imageReference": {
                "publisher": "MicrosoftWindowsServer",
                "offer": "WindowsServer",
                "sku": "2019-Datacenter",
                "version": "latest"
              }
            },
            "osProfile": {
              "computerNamePrefix": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
              "adminUsername": "GEN-UNIQUE",
              "adminPassword": "GEN-PASSWORD"
            },
            "networkProfile": {
              "networkInterfaceConfigurations": [
                {
                  "name": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]nic",
                  "properties": {
                    "primary": true,
                    "ipConfigurations": [
                      {
                        "name": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]ipconfig",
                        "properties": {
                          "subnet": {
                            "id": "Microsoft.Network/virtualNetworks/subnets/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]vnet/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]subnet"
                          },
                          "loadBalancerBackendAddressPools": [
                            {
                              "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]lb/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]bepool"
                            }
                          ],
                          "loadBalancerInboundNatPools": [
                            {
                              "id": "Microsoft.Network/loadBalancers/inboundNatPools/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]lb/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]natpool"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "extensionProfile": {
              "extensions": [
                {
                  "name": "Microsoft.Powershell.DSC",
                  "properties": {
                    "publisher": "Microsoft.Powershell",
                    "type": "DSC",
                    "typeHandlerVersion": "2.9",
                    "autoUpgradeMinorVersion": true,
                    "forceUpdateTag": "1.0",
                    "settings": {
                      "configuration": {
                        "url": "[uri(parameters('_artifactsLocation'), concat(parameters('powershelldscZip'), parameters('_artifactsLocationSasToken')))]",
                        "script": "InstallIIS.ps1",
                        "function": "InstallIIS"
                      },
                      "configurationArguments": {
                        "nodeName": "localhost",
                        "WebDeployPackagePath": "[uri(parameters('_artifactsLocation'), concat(parameters('webDeployPackage'), parameters('_artifactsLocationSasToken')))]"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-06-01",
        "name": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]pip",
        "location": "[resourceGroup().location]",
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(parameters('vmssName'))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/virtualNetworks",
        "apiVersion": "2020-06-01",
        "name": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]vnet",
        "location": "[resourceGroup().location]",
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "10.0.0.0/16"
            ]
          },
          "subnets": [
            {
              "name": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]subnet",
              "properties": {
                "addressPrefix": "10.0.0.0/24"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Insights/autoscaleSettings",
        "apiVersion": "2015-04-01",
        "name": "autoscalehost",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachineScaleSets//[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]"
        ],
        "properties": {
          "name": "autoscalehost",
          "targetResourceUri": "Microsoft.Compute/virtualMachineScaleSets/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
          "enabled": true,
          "profiles": [
            {
              "name": "Profile1",
              "capacity": {
                "minimum": "1",
                "maximum": "10",
                "default": "1"
              },
              "rules": [
                {
                  "metricTrigger": {
                    "metricName": "Percentage CPU",
                    "metricResourceUri": "Microsoft.Compute/virtualMachineScaleSets/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
                    "timeGrain": "PT1M",
                    "statistic": "Average",
                    "timeWindow": "PT5M",
                    "timeAggregation": "Average",
                    "operator": "GreaterThan",
                    "threshold": 50
                  },
                  "scaleAction": {
                    "direction": "Increase",
                    "type": "ChangeCount",
                    "value": "1",
                    "cooldown": "PT5M"
                  }
                },
                {
                  "metricTrigger": {
                    "metricName": "Percentage CPU",
                    "metricResourceUri": "Microsoft.Compute/virtualMachineScaleSets/[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
                    "timeGrain": "PT1M",
                    "statistic": "Average",
                    "timeWindow": "PT5M",
                    "timeAggregation": "Average",
                    "operator": "LessThan",
                    "threshold": 30
                  },
                  "scaleAction": {
                    "direction": "Decrease",
                    "type": "ChangeCount",
                    "value": "1",
                    "cooldown": "PT5M"
                  }
                }
              ]
            }
          ]
        }
      }
    ],
    "outputs": {
      "applicationUrl": {
        "type": "string",
        "value": "[concat('http://', reference(variables('publicIPAddressName')).dnsSettings.fqdn, '/MyApp')]"
      }
    },
    "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
  }
}