{
  "structure": "filesystem",
  "error": null,
  "reference": "master",
  "contentType": "json",
  "source": "gitConnectorAzureQuickStart",
  "paths": [
    "/application-workloads/openshift/openshift-container-platform/azuredeploy.json",
    "/application-workloads/openshift/openshift-container-platform/azuredeploy.parameters.json"
  ],
  "timestamp": 1642962892898,
  "queryuser": null,
  "checksum": "99914b932bd37a50b983c5e7c90ae93b",
  "node": {
    "masterSnapshotId": "ARM_TEMPLATE_SNAPSHOT",
    "type": "arm",
    "collection": "armtemplate",
    "paths": [
      "/application-workloads/openshift/openshift-container-platform/azuredeploy.json",
      "/application-workloads/openshift/openshift-container-platform/azuredeploy.parameters.json"
    ],
    "snapshotId": "ARM_TEMPLATE_SNAPSHOT346",
    "status": "active",
    "validate": true,
    "resourceTypes": [
      "microsoft.network/publicipaddresses",
      "microsoft.network/virtualnetworks",
      "microsoft.recoveryservices/vaults",
      "microsoft.resources/deployments",
      "microsoft.network/networkinterfaces",
      "microsoft.compute/virtualmachines/extensions",
      "microsoft.network/networksecuritygroups",
      "microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protecteditems",
      "microsoft.storage/storageaccounts"
    ]
  },
  "snapshotId": "ARM_TEMPLATE_SNAPSHOT346",
  "collection": "armtemplate",
  "json": {
    "contentVersion": "1.0.0.0",
    "parameters": {
      "_artifactsLocation": {
        "type": "string",
        "metadata": {
          "description": "The base URL where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
        },
        "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/openshift/openshift-container-platform/"
      },
      "_artifactsLocationSasToken": {
        "type": "securestring",
        "metadata": {
          "description": "Token for the base URL where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
        },
        "defaultValue": ""
      },
      "location": {
        "type": "string",
        "metadata": {
          "description": "Region where the resources should be created in"
        },
        "defaultValue": "[resourceGroup().location]"
      },
      "clusterName": {
        "type": "string",
        "defaultValue": "ocpcluster",
        "metadata": {
          "description": "Cluster resources prefix"
        }
      },
      "dnsZone": {
        "type": "string",
        "metadata": {
          "description": "Domain name created with the App Service"
        },
        "value": "GET-PREREQ-dnsZone"
      },
      "dnsZoneRG": {
        "type": "string",
        "metadata": {
          "description": "Resource Group that contains the domain name"
        },
        "value": "GET-PREREQ-dnsZoneRG"
      },
      "fipsEnabled": {
        "type": "bool",
        "defaultValue": true,
        "metadata": {
          "description": "Enable FIPS encryption"
        }
      },
      "privateOrPublicEndpoints": {
        "type": "string",
        "defaultValue": "public",
        "allowedValues": [
          "public",
          "private"
        ],
        "metadata": {
          "description": "Public or private facing endpoints"
        }
      },
      "newOrExistingNetwork": {
        "type": "string",
        "defaultValue": "new",
        "allowedValues": [
          "new",
          "existing"
        ],
        "metadata": {
          "description": "Deploy in new cluster or in existing cluster. If existing cluster, make sure the new resources are in the same zone"
        }
      },
      "existingVnetResourceGroupName": {
        "type": "string",
        "defaultValue": "[resourceGroup().name]",
        "metadata": {
          "description": "Resource Group for Existing Vnet."
        }
      },
      "virtualNetworkName": {
        "type": "string",
        "defaultValue": "myVNet",
        "metadata": {
          "description": "Name of new or existing virtual network"
        }
      },
      "virtualNetworkCIDR": {
        "type": "array",
        "defaultValue": [
          "10.0.0.0/16"
        ],
        "metadata": {
          "description": "VNet Address Prefix. Minimum address prefix is /16"
        }
      },
      "masterSubnetName": {
        "type": "string",
        "defaultValue": "masterSubnet",
        "metadata": {
          "description": "Name of new or existing master subnet"
        }
      },
      "masterSubnetPrefix": {
        "type": "string",
        "defaultValue": "10.0.1.0/24",
        "metadata": {
          "description": "Master subnet address prefix"
        }
      },
      "workerSubnetName": {
        "type": "string",
        "defaultValue": "workerSubnet",
        "metadata": {
          "description": "Name of new or existing worker subnet"
        }
      },
      "workerSubnetPrefix": {
        "type": "string",
        "defaultValue": "10.0.2.0/24",
        "metadata": {
          "description": "Worker subnet address prefix"
        }
      },
      "bastionSubnetName": {
        "type": "string",
        "defaultValue": "bastionSubnet",
        "metadata": {
          "description": "Name of new or existing bastion subnet"
        }
      },
      "bastionSubnetPrefix": {
        "type": "string",
        "defaultValue": "10.0.3.0/27",
        "metadata": {
          "description": "Worker subnet address prefix"
        }
      },
      "singleZoneOrMultiZone": {
        "type": "string",
        "defaultValue": "az",
        "allowedValues": [
          "az",
          "noha"
        ],
        "metadata": {
          "description": "Deploy to a Single AZ or multiple AZs"
        },
        "value": "noha"
      },
      "bastionVmSize": {
        "type": "string",
        "defaultValue": "Standard_F8s_v2",
        "metadata": {
          "description": "Bastion Host VM size. Use VMs with Premium Storage support only."
        }
      },
      "masterVmSize": {
        "type": "string",
        "defaultValue": "Standard_F8s_v2",
        "metadata": {
          "description": "OpenShift Master VM size. Use VMs with Premium Storage support only."
        }
      },
      "workerVmSize": {
        "type": "string",
        "defaultValue": "Standard_F16s_v2",
        "metadata": {
          "description": "OpenShift Node VM(s) size. Use VMs with Premium Storage support only."
        }
      },
      "masterInstanceCount": {
        "type": "int",
        "defaultValue": 3,
        "allowedValues": [
          1,
          3,
          5
        ],
        "metadata": {
          "description": "Number of OpenShift masters."
        }
      },
      "workerInstanceCount": {
        "type": "int",
        "defaultValue": 3,
        "allowedValues": [
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ],
        "metadata": {
          "description": "Number of OpenShift nodes"
        }
      },
      "storageOption": {
        "type": "string",
        "defaultValue": "portworx",
        "allowedValues": [
          "portworx",
          "nfs"
        ],
        "value": "nfs"
      },
      "pxSpecUrl": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "Portworx Spec URL. See README on how to generate the URL"
        }
      },
      "dataDiskSize": {
        "type": "int",
        "defaultValue": 1024,
        "allowedValues": [
          512,
          1024,
          2048
        ],
        "metadata": {
          "description": "Size of Datadisk in GB for NFS storage"
        },
        "value": 1024
      },
      "enableNfsBackup": {
        "type": "bool",
        "defaultValue": false,
        "allowedValues": [
          true,
          false
        ],
        "metadata": {
          "description": "Enable Backup on NFS node"
        },
        "value": false
      },
      "adminUsername": {
        "type": "string",
        "minLength": 4,
        "metadata": {
          "description": "Administrator username on all VMs and first user created for OpenShift login"
        },
        "value": "GEN-UNIQUE"
      },
      "openshiftUsername": {
        "type": "string",
        "minLength": 4,
        "metadata": {
          "description": "User created for OpenShift login"
        },
        "value": "GEN-UNIQUE"
      },
      "openshiftPassword": {
        "type": "securestring",
        "minLength": 8,
        "metadata": {
          "description": "Password for OpenShift login"
        },
        "value": "GEN-PASSWORD"
      },
      "sshPublicKey": {
        "type": "string",
        "metadata": {
          "description": "SSH public key for all VMs"
        },
        "value": "GEN-SSH-PUB-KEY"
      },
      "pullSecret": {
        "type": "securestring",
        "minLength": 1,
        "metadata": {
          "description": "Pull Secret json or reference to keyvault pull secret is stored"
        }
      },
      "aadClientId": {
        "type": "string",
        "metadata": {
          "description": "Azure AD Client ID"
        },
        "value": "GEN-AZUREAD-AKS-APPID"
      },
      "aadClientSecret": {
        "type": "securestring",
        "metadata": {
          "description": "Azure AD Client Secret"
        },
        "value": "GEN-AZUREAD-AKS-APPID-SECRET"
      }
    },
    "variables": {
      "networkResourceGroup": "[resourceGroup().name]",
      "redHatTags": {
        "app": "OpenshiftContainerPlatform",
        "version": "4.3.x",
        "platform": "AzurePublic"
      },
      "imageReference": {
        "publisher": "RedHat",
        "offer": "RHEL",
        "sku": "7-RAW",
        "version": "latest"
      },
      "bastionHostname": "bastionNode",
      "nfsHostname": "nfsNode",
      "nfsVmSize": "Standard_F8s_v2",
      "workerSecurityGroupName": "worker-nsg",
      "masterSecurityGroupName": "master-nsg",
      "bastionSecurityGroupName": "bastion-nsg",
      "diagStorageAccountName": "[concat('diag', uniqueString(resourceGroup().id))]",
      "bastionPublicIpDnsLabel": "[concat('bastiondns', uniqueString(resourceGroup().id))]",
      "sshKeyPath": "/home/GEN-UNIQUE/.ssh/authorized_keys",
      "clusterNodeDeploymentTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('nested/clusternode.json', parameters('_artifactsLocationSasToken')))]",
      "openshiftDeploymentTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('nested/openshiftdeploy.json', parameters('_artifactsLocationSasToken')))]",
      "openshiftDeploymentScriptUrl": "[uri(parameters('_artifactsLocation'), concat('scripts/deployOpenshift.sh', parameters('_artifactsLocationSasToken')))]",
      "nfsInstallScriptUrl": "[uri(parameters('_artifactsLocation'), concat('scripts/setup-nfs.sh', parameters('_artifactsLocationSasToken')))]",
      "openshiftDeploymentScriptFileName": "deployOpenshift.sh",
      "nfsInstallScriptFileName": "setup-nfs.sh",
      "vaultName": "nfsNode-vault",
      "backupFabric": "Azure",
      "backupPolicyName": "DefaultPolicy",
      "protectionContainer": "[concat('iaasvmcontainer;iaasvmcontainerv2;', resourceGroup().name, ';', variables('nfsHostname'))]",
      "protectedItem": "[concat('vm;iaasvmcontainerv2;', resourceGroup().name, ';', variables('nfsHostname'))]"
    },
    "resources": [
      {
        "condition": false,
        "type": "Microsoft.Network/virtualNetworks",
        "name": "myVNet",
        "location": "[resourceGroup().location]",
        "tags": {
          "displayName": "VirtualNetwork",
          "app": "(redHatTags).app",
          "version": "(redHatTags).version",
          "platform": "(redHatTags).platform"
        },
        "apiVersion": "2019-09-01",
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "10.0.0.0/16"
            ]
          },
          "subnets": [
            {
              "name": "bastionSubnet",
              "properties": {
                "addressPrefix": "10.0.3.0/27",
                "networkSecurityGroup": {
                  "id": "Microsoft.Network/networkSecurityGroups//bastion-nsg"
                }
              }
            },
            {
              "name": "masterSubnet",
              "properties": {
                "addressPrefix": "10.0.1.0/24",
                "networkSecurityGroup": {
                  "id": "Microsoft.Network/networkSecurityGroups//master-nsg"
                }
              }
            },
            {
              "name": "workerSubnet",
              "properties": {
                "addressPrefix": "10.0.2.0/24",
                "networkSecurityGroup": {
                  "id": "Microsoft.Network/networkSecurityGroups//worker-nsg"
                }
              }
            }
          ]
        },
        "dependsOn": [
          "bastion-nsg",
          "master-nsg",
          "worker-nsg"
        ]
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('bastionPublicIpDnsLabel')]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard"
        },
        "apiVersion": "2019-09-01",
        "tags": {
          "displayName": "BastionPublicIP",
          "app": "(redHatTags).app",
          "version": "(redHatTags).version",
          "platform": "(redHatTags).platform"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[variables('bastionPublicIpDnsLabel')]"
          }
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "name": "bastionNode-nic",
        "location": "[resourceGroup().location]",
        "apiVersion": "2019-09-01",
        "tags": {
          "displayName": "BastionNetworkInterface",
          "app": "(redHatTags).app",
          "version": "(redHatTags).version",
          "platform": "(redHatTags).platform"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/', variables('bastionSecurityGroupName'))]",
          "[resourceId('Microsoft.Network/publicIPAddresses/', variables('bastionPublicIpDnsLabel'))]"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "bastionNodeipconfig",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[resourceGroup().name]/Microsoft.Network/virtualNetworks/subnets/myVNet/bastionSubnet"
                },
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIpDnsLabel'))]"
                }
              }
            }
          ],
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups/bastion-nsg"
          }
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Network/networkInterfaces",
        "name": "nfsNode-nic",
        "location": "[resourceGroup().location]",
        "apiVersion": "2019-09-01",
        "tags": {
          "displayName": "NFSNetworkInterface",
          "app": "(redHatTags).app",
          "version": "(redHatTags).version",
          "platform": "(redHatTags).platform"
        },
        "dependsOn": [
          "Microsoft.Network/virtualNetworks//myVNet",
          "Microsoft.Network/networkSecurityGroups//worker-nsg"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "nfsNodeipconfig",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[resourceGroup().name]/Microsoft.Network/virtualNetworks/subnets/myVNet/workerSubnet"
                }
              }
            }
          ],
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups/worker-nsg"
          }
        }
      },
      {
        "apiVersion": "2019-09-01",
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "bastion-nsg",
        "location": "[resourceGroup().location]",
        "tags": {
          "displayName": "BastionNSG",
          "app": "(redHatTags).app",
          "version": "(redHatTags).version",
          "platform": "(redHatTags).platform"
        },
        "properties": {
          "securityRules": [
            {
              "name": "allowSSHin_all",
              "properties": {
                "description": "Allow SSH in from all locations",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "22",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 100,
                "direction": "Inbound"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[variables('diagStorageAccountName')]",
        "location": "[resourceGroup().location]",
        "kind": "Storage",
        "apiVersion": "2019-06-01",
        "tags": {
          "displayName": "[variables('diagStorageAccountName')]",
          "app": "(redHatTags).app",
          "version": "(redHatTags).version",
          "platform": "(redHatTags).platform"
        },
        "sku": {
          "name": "Standard_LRS",
          "tier": "Standard"
        }
      },
      {
        "name": "BastionVmDeployment",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-05-01",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('bastionHostname'), '-nic'))]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nested/clusternode.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "sshKeyPath": {
              "value": "/home/GEN-UNIQUE/.ssh/authorized_keys"
            },
            "sshPublicKey": {
              "value": "GEN-SSH-PUB-KEY"
            },
            "dataDiskSize": {
              "value": 1024
            },
            "adminUsername": {
              "value": "GEN-UNIQUE"
            },
            "vmSize": {
              "value": "Standard_F8s_v2"
            },
            "hostname": {
              "value": "bastionNode"
            },
            "role": {
              "value": "bootnode"
            },
            "vmStorageType": {
              "value": "Premium_LRS"
            },
            "diagStorageAccount": {
              "value": "[variables('diagStorageAccountName')]"
            },
            "imageReference": {
              "value": {
                "publisher": "RedHat",
                "offer": "RHEL",
                "sku": "7-RAW",
                "version": "latest"
              }
            },
            "redHatTags": {
              "value": {
                "app": "OpenshiftContainerPlatform",
                "version": "4.3.x",
                "platform": "AzurePublic"
              }
            }
          }
        }
      },
      {
        "apiVersion": "2019-09-01",
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "master-nsg",
        "location": "[resourceGroup().location]",
        "tags": {
          "displayName": "MasterNSG",
          "app": "(redHatTags).app",
          "version": "(redHatTags).version",
          "platform": "(redHatTags).platform"
        },
        "properties": {
          "securityRules": [
            {
              "name": "allowHTTPS_all",
              "properties": {
                "description": "Allow HTTPS connections from all locations",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "6443",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 200,
                "direction": "Inbound"
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2019-09-01",
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "worker-nsg",
        "location": "[resourceGroup().location]",
        "tags": {
          "displayName": "WorkerNSG",
          "app": "(redHatTags).app",
          "version": "(redHatTags).version",
          "platform": "(redHatTags).platform"
        },
        "properties": {
          "securityRules": [
            {
              "name": "allowHTTPS_all",
              "properties": {
                "description": "Allow HTTPS connections from all locations",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "443",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 200,
                "direction": "Inbound"
              }
            },
            {
              "name": "allowHTTPIn_all",
              "properties": {
                "description": "Allow HTTP connections from all locations",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "80",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 300,
                "direction": "Inbound"
              }
            }
          ]
        }
      },
      {
        "name": "OpenShiftDeployment",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-05-01",
        "dependsOn": [
          "BastionVmDeployment"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nested/openshiftdeploy.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "_artifactsLocation": {
              "value": "[uri(parameters('_artifactsLocation'), '.')]"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            },
            "location": {
              "value": "[resourceGroup().location]"
            },
            "openshiftDeploymentScriptUrl": {
              "value": "[uri(parameters('_artifactsLocation'), concat('scripts/deployOpenshift.sh', parameters('_artifactsLocationSasToken')))]"
            },
            "openshiftDeploymentScriptFileName": {
              "value": "deployOpenshift.sh"
            },
            "masterInstanceCount": {
              "value": 3
            },
            "workerInstanceCount": {
              "value": 3
            },
            "adminUsername": {
              "value": "GEN-UNIQUE"
            },
            "openshiftUsername": {
              "value": "GEN-UNIQUE"
            },
            "openshiftPassword": {
              "value": "GEN-PASSWORD"
            },
            "aadClientId": {
              "value": "GEN-AZUREAD-AKS-APPID"
            },
            "aadClientSecret": {
              "value": "GEN-AZUREAD-AKS-APPID-SECRET"
            },
            "redHatTags": {
              "value": {
                "app": "OpenshiftContainerPlatform",
                "version": "4.3.x",
                "platform": "AzurePublic"
              }
            },
            "sshPublicKey": {
              "value": "GEN-SSH-PUB-KEY"
            },
            "pullSecret": {
              "value": "pullSecret"
            },
            "virtualNetworkName": {
              "value": "myVNet"
            },
            "virtualNetworkCIDR": {
              "value": null
            },
            "pxSpecUrl": {
              "value": ""
            },
            "storageOption": {
              "value": "nfs"
            },
            "bastionHostname": {
              "value": "bastionNode"
            },
            "nfsHostname": {
              "value": "nfsNode"
            },
            "singleZoneOrMultiZone": {
              "value": "noha"
            },
            "dnsZone": {
              "value": "GET-PREREQ-dnsZone"
            },
            "dnsZoneRG": {
              "value": "GET-PREREQ-dnsZoneRG"
            },
            "masterInstanceType": {
              "value": "Standard_F8s_v2"
            },
            "workerInstanceType": {
              "value": "Standard_F16s_v2"
            },
            "clusterName": {
              "value": "ocpcluster"
            },
            "networkResourceGroup": {
              "value": "[resourceGroup().name]"
            },
            "masterSubnetName": {
              "value": "masterSubnet"
            },
            "workerSubnetName": {
              "value": "workerSubnet"
            },
            "enableFips": {
              "value": true
            },
            "privateOrPublic": {
              "value": "[if(equals(parameters('privateOrPublicEndpoints'), 'private'), 'Internal', 'External')]"
            }
          }
        }
      },
      {
        "condition": false,
        "name": "nfsVmDeployment",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-05-01",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccountName'))]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nested/clusternode.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "sshKeyPath": {
              "value": "/home/GEN-UNIQUE/.ssh/authorized_keys"
            },
            "sshPublicKey": {
              "value": "GEN-SSH-PUB-KEY"
            },
            "dataDiskSize": {
              "value": 1024
            },
            "adminUsername": {
              "value": "GEN-UNIQUE"
            },
            "vmSize": {
              "value": "Standard_F8s_v2"
            },
            "hostname": {
              "value": "nfsNode"
            },
            "role": {
              "value": "datanode"
            },
            "vmStorageType": {
              "value": "Premium_LRS"
            },
            "diagStorageAccount": {
              "value": "[variables('diagStorageAccountName')]"
            },
            "imageReference": {
              "value": {
                "publisher": "RedHat",
                "offer": "RHEL",
                "sku": "7-RAW",
                "version": "latest"
              }
            },
            "redHatTags": {
              "value": {
                "app": "OpenshiftContainerPlatform",
                "version": "4.3.x",
                "platform": "AzurePublic"
              }
            }
          }
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "nfsNode/installNfsServer",
        "location": "[resourceGroup().location]",
        "apiVersion": "2019-07-01",
        "tags": {
          "displayName": "InstallNfsServer",
          "app": "(redHatTags).app",
          "version": "(redHatTags).version",
          "platform": "(redHatTags).platform"
        },
        "dependsOn": [
          "nfsVmDeployment"
        ],
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": [
              "[uri(parameters('_artifactsLocation'), concat('scripts/setup-nfs.sh', parameters('_artifactsLocationSasToken')))]"
            ]
          },
          "protectedSettings": {
            "commandToExecute": "bash setup-nfs.sh"
          }
        }
      },
      {
        "condition": false,
        "type": "Microsoft.RecoveryServices/vaults",
        "apiVersion": "2019-05-13",
        "location": "[resourceGroup().location]",
        "name": "nfsNode-vault",
        "sku": {
          "name": "RS0",
          "tier": "Standard"
        },
        "properties": {}
      },
      {
        "condition": false,
        "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
        "apiVersion": "2016-12-01",
        "name": "[concat(variables('vaultName'), '/', variables('backupFabric'), '/', variables('protectionContainer'), '/', variables('protectedItem'))]",
        "dependsOn": [
          "nfsVmDeployment",
          "Microsoft.RecoveryServices/vaults/nfsNode-vault"
        ],
        "properties": {
          "protectedItemType": "Microsoft.Compute/virtualMachines",
          "policyId": "Microsoft.RecoveryServices/vaults/backupPolicies/nfsNode-vault/DefaultPolicy",
          "sourceResourceId": "Microsoft.Compute/virtualMachines/nfsNode"
        }
      }
    ],
    "outputs": {
      "Openshift Console URL": {
        "type": "string",
        "value": "[concat('https://console-openshift-console.apps.', parameters('clusterName'), '.', parameters('dnsZone'))]"
      },
      "BastionVM SSH": {
        "type": "string",
        "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(variables('bastionPublicIpDnsLabel')).dnsSettings.fqdn)]"
      }
    },
    "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
  }
}