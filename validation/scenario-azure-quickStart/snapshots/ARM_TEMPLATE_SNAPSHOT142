{
  "structure": "filesystem",
  "error": null,
  "reference": "master",
  "contentType": "json",
  "source": "gitConnectorAzureQuickStart",
  "paths": [
    "/application-workloads/elastic/elasticsearch/azuredeploy.json",
    "/application-workloads/elastic/elasticsearch/azuredeploy.parameters.json"
  ],
  "timestamp": 1642962888455,
  "queryuser": null,
  "checksum": "99914b932bd37a50b983c5e7c90ae93b",
  "node": {
    "masterSnapshotId": "ARM_TEMPLATE_SNAPSHOT",
    "type": "arm",
    "collection": "armtemplate",
    "paths": [
      "/application-workloads/elastic/elasticsearch/azuredeploy.json",
      "/application-workloads/elastic/elasticsearch/azuredeploy.parameters.json"
    ],
    "snapshotId": "ARM_TEMPLATE_SNAPSHOT142",
    "status": "active",
    "validate": true,
    "resourceTypes": [
      "microsoft.resources/deployments"
    ]
  },
  "snapshotId": "ARM_TEMPLATE_SNAPSHOT142",
  "collection": "armtemplate",
  "json": {
    "contentVersion": "1.0.0.0",
    "parameters": {
      "adminUsername": {
        "type": "string",
        "metadata": {
          "description": "Admin username used when provisioning virtual machines"
        },
        "value": "GEN-UNIQUE"
      },
      "adminPassword": {
        "type": "securestring",
        "defaultValue": "",
        "metadata": {
          "description": "Admin password used when provisioning virtual machines"
        },
        "value": "GEN-PASSWORD"
      },
      "virtualNetworkName": {
        "type": "string",
        "defaultValue": "es-vnet",
        "metadata": {
          "description": "Virtual Network"
        }
      },
      "OS": {
        "type": "string",
        "defaultValue": "ubuntu",
        "allowedValues": [
          "ubuntu",
          "centos",
          "windows"
        ],
        "metadata": {
          "description": "The operating system to deploy Elasticsearch cluster on"
        }
      },
      "authenticationType": {
        "type": "string",
        "defaultValue": "sshPublicKey",
        "allowedValues": [
          "password",
          "sshPublicKey"
        ],
        "metadata": {
          "description": "Whether to use a password or ssh key (Linux only) as authentication"
        }
      },
      "sshPublicKey": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "The public ssh key to use for authentication (Linux only)"
        },
        "value": "GEN-SSH-PUB-KEY"
      },
      "loadBalancerType": {
        "type": "string",
        "defaultValue": "internal",
        "allowedValues": [
          "internal",
          "external"
        ],
        "metadata": {
          "description": "Setup the load balancer internal or external.  If you are setting up Elasticsearch on an external endpoint you will need to secure your nodes with a product like Elasticsearch Shield"
        }
      },
      "jumpboxEnabled": {
        "type": "string",
        "defaultValue": "yes",
        "allowedValues": [
          "yes",
          "no"
        ],
        "metadata": {
          "description": "Optionally add a virtual machine to the deployment which you can use to connect and manage virtual machines on the internal network"
        }
      },
      "vmClientNodeCount": {
        "type": "int",
        "defaultValue": 1,
        "allowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "metadata": {
          "description": "Number of Elasticsearch client nodes to provision (Setting this to zero puts the data nodes on the load balancer)"
        }
      },
      "vmSizeClientNodes": {
        "type": "string",
        "defaultValue": "Standard_D2_v3",
        "allowedValues": [
          "Standard_D2_v3",
          "Standard_D4_v3",
          "Standard_D8_v3",
          "Standard_A2",
          "Standard_A3",
          "Standard_A4",
          "Standard_A5",
          "Standard_A6",
          "Standard_A7",
          "Standard_D2s_v3",
          "Standard_D4s_v3",
          "Standard_D8s_v3",
          "Standard_D8s_v3"
        ],
        "metadata": {
          "description": "Size of the Elasticsearch cluster client nodes"
        }
      },
      "vmSizeMasterNodes": {
        "type": "string",
        "defaultValue": "Standard_D2_v3",
        "allowedValues": [
          "Standard_D2_v3",
          "Standard_D4_v3",
          "Standard_D8_v3",
          "Standard_A2",
          "Standard_A3",
          "Standard_A4",
          "Standard_A5",
          "Standard_A6",
          "Standard_A7",
          "Standard_D2s_v3",
          "Standard_D4s_v3",
          "Standard_D8s_v3",
          "Standard_D8s_v3"
        ],
        "metadata": {
          "description": "Size of the Elasticsearch master nodes"
        }
      },
      "vmSizeDataNodes": {
        "type": "string",
        "defaultValue": "Standard_D2_v3",
        "allowedValues": [
          "Standard_D2_v3",
          "Standard_D4_v3",
          "Standard_D8_v3",
          "Standard_D4_v3",
          "Standard_A2",
          "Standard_A3",
          "Standard_A4",
          "Standard_A5",
          "Standard_A6",
          "Standard_A7",
          "Standard_D2s_v3",
          "Standard_D4s_v3",
          "Standard_D8s_v3",
          "Standard_D8s_v3",
          "Standard_D16s_v3"
        ],
        "metadata": {
          "description": "Size of the Elasticsearch data nodes"
        }
      },
      "vmDataNodeCount": {
        "type": "int",
        "defaultValue": 3,
        "metadata": {
          "description": "Number of Elasticsearch data nodes"
        }
      },
      "esClusterName": {
        "type": "string",
        "defaultValue": "elasticsearch",
        "metadata": {
          "description": "The name of the Elasticsearch cluster"
        }
      },
      "esVersion": {
        "type": "string",
        "defaultValue": "2.3.1",
        "allowedValues": [
          "2.3.1",
          "2.2.2",
          "2.1.2",
          "1.7.5"
        ],
        "metadata": {
          "description": "Elasticsearch version to install"
        }
      },
      "afs": {
        "type": "string",
        "defaultValue": "no",
        "allowedValues": [
          "yes",
          "no"
        ],
        "metadata": {
          "description": "Setup an Azure File Service share to store the Elasticsearch data (ubuntu, elasticsearch 2.x only)"
        }
      },
      "marvel": {
        "type": "string",
        "defaultValue": "yes",
        "allowedValues": [
          "yes",
          "no"
        ],
        "metadata": {
          "description": "Install the Marvel agent in the cluster"
        }
      },
      "marvelCluster": {
        "type": "string",
        "defaultValue": "no",
        "allowedValues": [
          "yes",
          "no"
        ],
        "metadata": {
          "description": "Build a standalone 3 node cluster for Marvel data"
        }
      },
      "kibana": {
        "type": "string",
        "defaultValue": "yes",
        "allowedValues": [
          "yes",
          "no"
        ],
        "metadata": {
          "description": "Provision a machine with Kibana on it"
        }
      },
      "sense": {
        "type": "string",
        "defaultValue": "yes",
        "allowedValues": [
          "yes",
          "no"
        ],
        "metadata": {
          "description": "Install the Sense plugin (2.x only, requires Kibana)"
        }
      },
      "jmeterAgent": {
        "type": "string",
        "defaultValue": "no",
        "allowedValues": [
          "yes",
          "no"
        ],
        "metadata": {
          "description": "Install the JMeter Server Agent on each node (Ubuntu only)"
        }
      },
      "cloudAzure": {
        "type": "string",
        "defaultValue": "no",
        "allowedValues": [
          "yes",
          "no"
        ],
        "metadata": {
          "description": "Install the cloud-azure plugin, which enables Azure backups"
        }
      },
      "cloudAzureStorageAccount": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "The name of the storage account to use for the cloud-azure plugin"
        }
      },
      "cloudAzureStorageKey": {
        "type": "securestring",
        "defaultValue": "",
        "metadata": {
          "description": "The storage account key used to access the storage account listed above"
        }
      },
      "_artifactsLocation": {
        "type": "string",
        "defaultValue": "[deployment().properties.templatelink.uri]",
        "metadata": {
          "description": "Change this value to your repo name if deploying from a fork"
        }
      },
      "_artifactsLocationSasToken": {
        "type": "securestring",
        "defaultValue": "",
        "metadata": {
          "description": "Auto-generated token to access _artifactsLocation"
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for all resources."
        }
      }
    },
    "variables": {
      "nestedTemplatesFolderName": "nestedtemplates",
      "sharedScriptsLocation": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/",
      "storageAccountPrefix": "[concat(substring(uniqueString(resourceGroup().id, parameters('esClusterName')), 0, 6), substring(parameters('esClusterName'), 0, 3))]",
      "storageAccountNameAFS": "[concat(variables('storageAccountPrefix'), 'afs')]",
      "storageAccountNameShared": "[concat(variables('storageAccountPrefix'), 'sh')]",
      "masterNodesIpPrefix": "10.0.0.1",
      "marvelNodesIpPrefix": "10.0.2.2",
      "kibanaIPPrefix": {
        "yes": "10.0.2.2",
        "no": "10.0.0.1"
      },
      "kibanaIP": "[concat('http://', variables('kibanaIPPrefix')[parameters('marvelCluster')], '0:9200')]",
      "networkSettings": {
        "virtualNetworkName": "es-vnet",
        "addressPrefix": "10.0.0.0/16",
        "subnet": {
          "master": {
            "name": "master",
            "prefix": "10.0.0.0/24",
            "vnet": "es-vnet"
          },
          "data": {
            "name": "data",
            "prefix": "10.0.1.0/24",
            "vnet": "es-vnet"
          },
          "other": {
            "name": "other",
            "prefix": "10.0.2.0/24",
            "vnet": "es-vnet"
          }
        }
      },
      "esSettings": {
        "clusterName": "elasticsearch",
        "marvelClusterName": "elasticsearch-marvel",
        "version": "2.3.1",
        "discoveryHosts": "10.0.0.1-3",
        "marvelHosts": "10.0.2.2-3"
      },
      "sharedTemplateFileName": "shared-resources.json",
      "masterTemplateFileName": "master-nodes-resources.json",
      "marvelTemplates": {
        "yes": "marvel-nodes-resources.json",
        "no": "empty-resources.json"
      },
      "clientTemplates": [
        "empty-resources.json",
        "client-nodes-resources.json"
      ],
      "marvelTemplateFileName": "(marvelTemplates)[parameters(marvelCluster)]",
      "clientTemplateFileName": "(clientTemplates)[mod(add(parameters(vmClientNodeCount), 2), add(parameters(vmClientNodeCount), 1))]",
      "lbBackEndPoolsAdded": {
        "backendPools": [
          {
            "id": "Microsoft.Network/loadBalancers/backendAddressPools/es-load-balancer/LBBE"
          }
        ]
      },
      "lbBackendPoolsRemoved": {
        "backendPools": []
      },
      "dataLBSettingOptions": [
        {
          "backendPools": [
            {
              "id": "Microsoft.Network/loadBalancers/backendAddressPools/es-load-balancer/LBBE"
            }
          ]
        },
        {
          "backendPools": []
        }
      ],
      "dataLBSettings": "(dataLBSettingOptions)[mod(add(parameters(vmClientNodeCount), 2), add(parameters(vmClientNodeCount), 1))]",
      "jumpboxTemplate": {
        "yes": "jumpbox-resources.json",
        "no": "empty-resources.json"
      },
      "jumpboxTemplateFileName": "(jumpboxTemplate)[parameters(jumpboxEnabled)]",
      "senseParam": {
        "yes": " -s ",
        "no": ""
      },
      "marvelParam": {
        "ubuntu": {
          "yes": " -m ",
          "no": ""
        },
        "centos": {
          "yes": " -m ",
          "no": ""
        },
        "windows": {
          "yes": " -m ",
          "no": ""
        }
      },
      "afsParam": {
        "ubuntu": {
          "yes": "[concat(' -a ', variables('storageAccountNameAFS'), ' -c -k ')]",
          "no": "[concat(' -a ', variables('storageAccountNameAFS'), ' -k ')]"
        },
        "centos": {
          "yes": "",
          "no": ""
        },
        "windows": {
          "yes": "",
          "no": ""
        }
      },
      "marvelExportParam": {
        "ubuntu": {
          "yes": " -e 10.0.2.2-3",
          "no": ""
        },
        "centos": {
          "yes": " -e 10.0.2.2-3",
          "no": ""
        },
        "windows": {
          "yes": " -marvelEndpoints 10.0.2.2-3",
          "no": ""
        }
      },
      "jmeterParam": {
        "yes": " -j ",
        "no": ""
      },
      "cloudAzureParam": {
        "yes": " -po  parameters('cloudAzureStorageAccount') -r  parameters('cloudAzureStorageKey') ",
        "no": ""
      },
      "cloudAzureParamValue": "(cloudAzureParam)[parameters(cloudAzure)]",
      "marvelExportParamValue": "(marvelExportParam)[parameters(OS)][parameters(marvelCluster)]",
      "senseParamValue": "(senseParam)[parameters(sense)]",
      "marvelParamValue": "(marvelParam)[parameters(OS)][parameters(marvel)]",
      "jmeterParamValue": "(jmeterParam)[parameters(jmeterAgent)]",
      "afsParamValue": "(afsParam)[parameters(OS)][parameters(afs)]",
      "kibanaTemplates": {
        "yes": "kibana-resources.json",
        "no": "empty-resources.json"
      },
      "kibanaTemplateFileName": "(kibanaTemplates)[parameters(kibana)]",
      "ubuntuScripts": [
        "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-ubuntu-install.sh', parameters('_artifactsLocationSasToken')))]",
        "[uri(parameters('_artifactsLocation'), concat('scripts/kibana-install.sh', parameters('_artifactsLocationSasToken')))]",
        "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/vm-disk-utils-0.1.sh",
        "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/afs-utils-0.1.sh"
      ],
      "centosScripts": [
        "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-centos-install.sh', parameters('_artifactsLocationSasToken')))]",
        "[uri(parameters('_artifactsLocation'), concat('scripts/kibana-centos-install.sh', parameters('_artifactsLocationSasToken')))]",
        "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/vm-disk-utils-0.1.sh"
      ],
      "windowsScripts": [
        "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-windows-install.ps1', parameters('_artifactsLocationSasToken')))]"
      ],
      "authSet": {
        "password": "GEN-PASSWORD",
        "sshKey": "GEN-SSH-PUB-KEY",
        "type": "sshPublicKey"
      },
      "configurationObject": {
        "password": {},
        "sshPublicKey": {
          "disablePasswordAuthentication": true,
          "ssh": {
            "publicKeys": [
              {
                "path": "/home/GEN-UNIQUE/.ssh/authorized_keys",
                "keyData": "GEN-SSH-PUB-KEY"
              }
            ]
          }
        }
      },
      "osFamily": {
        "ubuntu": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "14.04.4-LTS",
            "version": "latest"
          },
          "linuxConfiguration": "(configurationObject)[parameters(authenticationType)]",
          "managementPort": "22",
          "extensionSettings": {
            "marvel": {
              "publisher": "Microsoft.Azure.Extensions",
              "type": "CustomScript",
              "autoUpgradeMinorVersion": true,
              "typeHandlerVersion": "2.0",
              "settings": {
                "fileUris": [
                  "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-ubuntu-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "[uri(parameters('_artifactsLocation'), concat('scripts/kibana-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/vm-disk-utils-0.1.sh",
                  "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/afs-utils-0.1.sh"
                ],
                "commandToExecute": "bash elasticsearch-ubuntu-install.sh -wn (esSettings).marvelClusterName -v (esSettings).version -d (esSettings).marvelHosts -k "
              }
            },
            "master": {
              "publisher": "Microsoft.Azure.Extensions",
              "type": "CustomScript",
              "autoUpgradeMinorVersion": true,
              "typeHandlerVersion": "2.0",
              "settings": {
                "fileUris": [
                  "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-ubuntu-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "[uri(parameters('_artifactsLocation'), concat('scripts/kibana-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/vm-disk-utils-0.1.sh",
                  "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/afs-utils-0.1.sh"
                ],
                "commandToExecute": "bash elasticsearch-ubuntu-install.sh -xn (esSettings).clusterName -v (esSettings).version -d (esSettings).discoveryHosts(marvelParam)[parameters(OS)][parameters(marvel)](jmeterParam)[parameters(jmeterAgent)](cloudAzureParam)[parameters(cloudAzure)](marvelExportParam)[parameters(OS)][parameters(marvelCluster)](afsParam)[parameters(OS)][parameters(afs)]"
              }
            },
            "client": {
              "publisher": "Microsoft.Azure.Extensions",
              "type": "CustomScript",
              "typeHandlerVersion": "2.0",
              "autoUpgradeMinorVersion": true,
              "settings": {
                "fileUris": [
                  "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-ubuntu-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "[uri(parameters('_artifactsLocation'), concat('scripts/kibana-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/vm-disk-utils-0.1.sh",
                  "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/afs-utils-0.1.sh"
                ],
                "commandToExecute": "bash elasticsearch-ubuntu-install.sh -yn (esSettings).clusterName -v (esSettings).version -d (esSettings).discoveryHosts(marvelParam)[parameters(OS)][parameters(marvel)](jmeterParam)[parameters(jmeterAgent)](cloudAzureParam)[parameters(cloudAzure)](marvelExportParam)[parameters(OS)][parameters(marvelCluster)](afsParam)[parameters(OS)][parameters(afs)]"
              }
            },
            "data": {
              "publisher": "Microsoft.Azure.Extensions",
              "type": "CustomScript",
              "typeHandlerVersion": "2.0",
              "settings": {
                "fileUris": [
                  "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-ubuntu-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "[uri(parameters('_artifactsLocation'), concat('scripts/kibana-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/vm-disk-utils-0.1.sh",
                  "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/afs-utils-0.1.sh"
                ],
                "commandToExecute": "bash elasticsearch-ubuntu-install.sh -zn (esSettings).clusterName -v (esSettings).version -d (esSettings).discoveryHosts(marvelParam)[parameters(OS)][parameters(marvel)](jmeterParam)[parameters(jmeterAgent)](cloudAzureParam)[parameters(cloudAzure)](marvelExportParam)[parameters(OS)][parameters(marvelCluster)](afsParam)[parameters(OS)][parameters(afs)]"
              }
            },
            "kibana": {
              "publisher": "Microsoft.Azure.Extensions",
              "type": "CustomScript",
              "autoUpgradeMinorVersion": true,
              "typeHandlerVersion": "2.0",
              "settings": {
                "fileUris": [
                  "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-ubuntu-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "[uri(parameters('_artifactsLocation'), concat('scripts/kibana-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/vm-disk-utils-0.1.sh",
                  "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/afs-utils-0.1.sh"
                ],
                "commandToExecute": "bash kibana-install.sh -v (esSettings).version(marvelParam)[parameters(OS)][parameters(marvel)](senseParam)[parameters(sense)] -t [concat('http://', variables('kibanaIPPrefix')[parameters('marvelCluster')], '0:9200')]"
              }
            }
          }
        },
        "centos": {
          "imageReference": {
            "publisher": "OpenLogic",
            "offer": "CentOS",
            "sku": "7.2",
            "version": "latest"
          },
          "linuxConfiguration": "(configurationObject)[parameters(authenticationType)]",
          "managementPort": "22",
          "extensionSettings": {
            "marvel": {
              "publisher": "Microsoft.Azure.Extensions",
              "type": "CustomScript",
              "autoUpgradeMinorVersion": true,
              "typeHandlerVersion": "2.0",
              "settings": {
                "fileUris": [
                  "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-centos-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "[uri(parameters('_artifactsLocation'), concat('scripts/kibana-centos-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/vm-disk-utils-0.1.sh"
                ],
                "commandToExecute": "bash elasticsearch-centos-install.sh -wn (esSettings).marvelClusterName -v (esSettings).version -d (esSettings).marvelHosts -k "
              }
            },
            "master": {
              "publisher": "Microsoft.Azure.Extensions",
              "type": "CustomScript",
              "typeHandlerVersion": "2.0",
              "autoUpgradeMinorVersion": true,
              "settings": {
                "fileUris": [
                  "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-centos-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "[uri(parameters('_artifactsLocation'), concat('scripts/kibana-centos-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/vm-disk-utils-0.1.sh"
                ],
                "commandToExecute": "bash elasticsearch-centos-install.sh -xn (esSettings).clusterName -v (esSettings).version -d (esSettings).discoveryHosts(marvelParam)[parameters(OS)][parameters(marvel)](jmeterParam)[parameters(jmeterAgent)](cloudAzureParam)[parameters(cloudAzure)](marvelExportParam)[parameters(OS)][parameters(marvelCluster)](afsParam)[parameters(OS)][parameters(afs)]"
              }
            },
            "client": {
              "publisher": "Microsoft.Azure.Extensions",
              "type": "CustomScript",
              "typeHandlerVersion": "2.0",
              "autoUpgradeMinorVersion": true,
              "settings": {
                "fileUris": [
                  "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-centos-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "[uri(parameters('_artifactsLocation'), concat('scripts/kibana-centos-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/vm-disk-utils-0.1.sh"
                ],
                "commandToExecute": "bash elasticsearch-centos-install.sh -yn (esSettings).clusterName -v (esSettings).version -d (esSettings).discoveryHosts(marvelParam)[parameters(OS)][parameters(marvel)](jmeterParam)[parameters(jmeterAgent)](cloudAzureParam)[parameters(cloudAzure)](marvelExportParam)[parameters(OS)][parameters(marvelCluster)](afsParam)[parameters(OS)][parameters(afs)]"
              }
            },
            "data": {
              "publisher": "Microsoft.Azure.Extensions",
              "type": "CustomScript",
              "typeHandlerVersion": "2.0",
              "autoUpgradeMinorVersion": true,
              "settings": {
                "fileUris": [
                  "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-centos-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "[uri(parameters('_artifactsLocation'), concat('scripts/kibana-centos-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/vm-disk-utils-0.1.sh"
                ],
                "commandToExecute": "bash elasticsearch-centos-install.sh -zn (esSettings).clusterName -v (esSettings).version -d (esSettings).discoveryHosts(marvelParam)[parameters(OS)][parameters(marvel)](jmeterParam)[parameters(jmeterAgent)](cloudAzureParam)[parameters(cloudAzure)](marvelExportParam)[parameters(OS)][parameters(marvelCluster)](afsParam)[parameters(OS)][parameters(afs)]"
              }
            },
            "kibana": {
              "publisher": "Microsoft.Azure.Extensions",
              "type": "CustomScript",
              "typeHandlerVersion": "2.0",
              "autoUpgradeMinorVersion": true,
              "settings": {
                "fileUris": [
                  "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-centos-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "[uri(parameters('_artifactsLocation'), concat('scripts/kibana-centos-install.sh', parameters('_artifactsLocationSasToken')))]",
                  "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/vm-disk-utils-0.1.sh"
                ],
                "commandToExecute": "bash kibana-centos-install.sh -v (esSettings).version(marvelParam)[parameters(OS)][parameters(marvel)](senseParam)[parameters(sense)] -t [concat('http://', variables('kibanaIPPrefix')[parameters('marvelCluster')], '0:9200')]"
              }
            }
          }
        },
        "windows": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2012-R2-Datacenter",
            "version": "latest"
          },
          "linuxConfiguration": "",
          "managementPort": "3389",
          "extensionSettings": {
            "marvel": {
              "publisher": "Microsoft.Compute",
              "type": "CustomScriptExtension",
              "typeHandlerVersion": "1.4",
              "autoUpgradeMinorVersion": true,
              "settings": {
                "fileUris": [
                  "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-windows-install.ps1', parameters('_artifactsLocationSasToken')))]"
                ],
                "commandToExecute": "powershell.exe -File elasticsearch-windows-install.ps1 -elasticSearchVersion (esSettings).version -elasticClusterName (esSettings).marvelClusterName -discoveryEndpoints (esSettings).marvelHosts -marvelOnlyNode -storageKey "
              }
            },
            "master": {
              "publisher": "Microsoft.Compute",
              "type": "CustomScriptExtension",
              "typeHandlerVersion": "1.4",
              "autoUpgradeMinorVersion": true,
              "settings": {
                "fileUris": [
                  "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-windows-install.ps1', parameters('_artifactsLocationSasToken')))]"
                ],
                "commandToExecute": "powershell.exe -File elasticsearch-windows-install.ps1 -elasticSearchVersion (esSettings).version -elasticClusterName (esSettings).clusterName -discoveryEndpoints (esSettings).discoveryHosts(cloudAzureParam)[parameters(cloudAzure)](marvelParam)[parameters(OS)][parameters(marvel)](marvelExportParam)[parameters(OS)][parameters(marvelCluster)] -masterOnlyNode -storageKey "
              }
            },
            "client": {
              "publisher": "Microsoft.Compute",
              "type": "CustomScriptExtension",
              "typeHandlerVersion": "1.4",
              "autoUpgradeMinorVersion": true,
              "settings": {
                "fileUris": [
                  "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-windows-install.ps1', parameters('_artifactsLocationSasToken')))]"
                ],
                "commandToExecute": "powershell.exe -File elasticsearch-windows-install.ps1 -elasticSearchVersion (esSettings).version -elasticClusterName (esSettings).clusterName -discoveryEndpoints (esSettings).discoveryHosts(cloudAzureParam)[parameters(cloudAzure)](marvelParam)[parameters(OS)][parameters(marvel)](marvelExportParam)[parameters(OS)][parameters(marvelCluster)] -clientOnlyNode -storageKey "
              }
            },
            "data": {
              "publisher": "Microsoft.Compute",
              "type": "CustomScriptExtension",
              "typeHandlerVersion": "1.4",
              "autoUpgradeMinorVersion": true,
              "settings": {
                "fileUris": [
                  "[uri(parameters('_artifactsLocation'), concat('scripts/elasticsearch-windows-install.ps1', parameters('_artifactsLocationSasToken')))]"
                ],
                "commandToExecute": "powershell.exe -File elasticsearch-windows-install.ps1 -elasticSearchVersion (esSettings).version -elasticClusterName (esSettings).clusterName -discoveryEndpoints (esSettings).discoveryHosts(cloudAzureParam)[parameters(cloudAzure)](marvelParam)[parameters(OS)][parameters(marvel)](marvelExportParam)[parameters(OS)][parameters(marvelCluster)] -dataOnlyNode -storageKey "
              }
            }
          }
        }
      },
      "osSettings": "(osFamily)[parameters(OS)]",
      "dataSkuSettings": {
        "Standard_D2_v3": {
          "dataDisks": 2,
          "nodesPerStorageAccount": 6,
          "storageAccountType": "Standard_LRS"
        },
        "Standard_D4_v3": {
          "dataDisks": 8,
          "nodesPerStorageAccount": 3,
          "storageAccountType": "Standard_LRS"
        },
        "Standard_D8_v3": {
          "dataDisks": 16,
          "nodesPerStorageAccount": 2,
          "storageAccountType": "Standard_LRS"
        },
        "Standard_D2s_v3": {
          "dataDisks": 2,
          "nodesPerStorageAccount": 6,
          "storageAccountType": "Premium_LRS"
        },
        "Standard_D4s_v3": {
          "dataDisks": 8,
          "nodesPerStorageAccount": 4,
          "storageAccountType": "Premium_LRS"
        },
        "Standard_D8s_v3": {
          "dataDisks": 16,
          "nodesPerStorageAccount": 2,
          "storageAccountType": "Premium_LRS"
        },
        "Standard_D16s_v3": {
          "dataDisks": 16,
          "nodesPerStorageAccount": 2,
          "storageAccountType": "Premium_LRS"
        },
        "Standard_A2": {
          "dataDisks": 4,
          "nodesPerStorageAccount": 6,
          "storageAccountType": "Standard_LRS"
        },
        "Standard_A3": {
          "dataDisks": 8,
          "nodesPerStorageAccount": 4,
          "storageAccountType": "Standard_LRS"
        },
        "Standard_A4": {
          "dataDisks": 16,
          "nodesPerStorageAccount": 2,
          "storageAccountType": "Standard_LRS"
        },
        "Standard_A7": {
          "dataDisks": 16,
          "nodesPerStorageAccount": 2,
          "storageAccountType": "Standard_LRS"
        }
      },
      "nodesPerStorageAccount": "(dataSkuSettings)[parameters(vmSizeDataNodes)].nodesPerStorageAccount",
      "storageBinPackMap": [
        "[div(sub(add(1, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(2, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(3, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(4, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(5, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(6, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(7, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(8, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(9, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(10, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(11, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(12, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(13, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(14, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(15, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(16, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(17, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(18, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(19, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(20, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(21, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(22, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(23, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(24, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(25, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(26, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(27, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(28, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(29, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(30, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(31, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(32, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(33, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(34, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(35, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(36, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(37, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(38, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(39, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(40, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(51, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(52, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(53, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(54, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(55, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(56, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(57, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(58, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(59, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "[div(sub(add(60, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]"
      ],
      "dataNodeStorageSettings": {
        "count": "[div(sub(add(parameters('vmDataNodeCount'), variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
        "mapping": [
          "[div(sub(add(1, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(2, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(3, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(4, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(5, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(6, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(7, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(8, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(9, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(10, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(11, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(12, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(13, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(14, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(15, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(16, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(17, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(18, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(19, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(20, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(21, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(22, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(23, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(24, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(25, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(26, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(27, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(28, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(29, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(30, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(31, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(32, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(33, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(34, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(35, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(36, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(37, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(38, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(39, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(40, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(51, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(52, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(53, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(54, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(55, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(56, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(57, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(58, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(59, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
          "[div(sub(add(60, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]"
        ],
        "accountType": "(dataSkuSettings)[parameters(vmSizeDataNodes)].storageAccountType",
        "afs": "[variables('storageAccountNameAFS')]",
        "shared": "[variables('storageAccountNameShared')]",
        "prefix": "[concat(variables('storageAccountPrefix'), 'da')]"
      },
      "dataTemplateFileName": {
        "afs-yes": "data-nodes-0disk-resources.json",
        "afs-no": "[concat('data-nodes-', string(variables('dataSkuSettings')[parameters('vmSizeDataNodes')].dataDisks), 'disk-resources.json')]"
      },
      "dataTemplateFileNameValue": "(dataTemplateFileName)[concat(afs-, parameters(afs))]"
    },
    "resources": [
      {
        "name": "master-nodes",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "Microsoft.Resources/deployments/shared"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesFolderName'), '/', variables('masterTemplateFileName'), parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "storageSettings": {
              "value": {
                "count": "[div(sub(add(parameters('vmDataNodeCount'), variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                "mapping": [
                  "[div(sub(add(1, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(2, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(3, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(4, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(5, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(6, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(7, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(8, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(9, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(10, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(11, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(12, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(13, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(14, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(15, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(16, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(17, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(18, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(19, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(20, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(21, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(22, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(23, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(24, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(25, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(26, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(27, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(28, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(29, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(30, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(31, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(32, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(33, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(34, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(35, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(36, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(37, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(38, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(39, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(40, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(51, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(52, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(53, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(54, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(55, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(56, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(57, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(58, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(59, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(60, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]"
                ],
                "accountType": "(dataSkuSettings)[parameters(vmSizeDataNodes)].storageAccountType",
                "afs": "[variables('storageAccountNameAFS')]",
                "shared": "[variables('storageAccountNameShared')]",
                "prefix": "[concat(variables('storageAccountPrefix'), 'da')]"
              }
            },
            "adminUsername": {
              "value": "GEN-UNIQUE"
            },
            "authSet": {
              "value": {
                "password": "GEN-PASSWORD",
                "sshKey": "GEN-SSH-PUB-KEY",
                "type": "sshPublicKey"
              }
            },
            "masterNodesIpPrefix": {
              "value": "10.0.0.1"
            },
            "vmSize": {
              "value": "Standard_D2_v3"
            },
            "subnet": {
              "value": "(networkSettings).subnet.master"
            },
            "osSettings": {
              "value": "(osFamily)[parameters(OS)]"
            },
            "namespace": {
              "value": "elasticsearch-master"
            },
            "location": {
              "value": "[resourceGroup().location]"
            }
          }
        }
      },
      {
        "name": "marvel-nodes",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "Microsoft.Resources/deployments/shared"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesFolderName'), '/', variables('marvelTemplateFileName'), parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          }
        }
      },
      {
        "name": "shared",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-06-01",
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesFolderName'), '/', variables('sharedTemplateFileName'), parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "networkSettings": {
              "value": {
                "virtualNetworkName": "es-vnet",
                "addressPrefix": "10.0.0.0/16",
                "subnet": {
                  "master": {
                    "name": "master",
                    "prefix": "10.0.0.0/24",
                    "vnet": "es-vnet"
                  },
                  "data": {
                    "name": "data",
                    "prefix": "10.0.1.0/24",
                    "vnet": "es-vnet"
                  },
                  "other": {
                    "name": "other",
                    "prefix": "10.0.2.0/24",
                    "vnet": "es-vnet"
                  }
                }
              }
            },
            "storageSettings": {
              "value": {
                "count": "[div(sub(add(parameters('vmDataNodeCount'), variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                "mapping": [
                  "[div(sub(add(1, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(2, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(3, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(4, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(5, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(6, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(7, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(8, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(9, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(10, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(11, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(12, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(13, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(14, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(15, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(16, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(17, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(18, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(19, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(20, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(21, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(22, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(23, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(24, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(25, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(26, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(27, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(28, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(29, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(30, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(31, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(32, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(33, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(34, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(35, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(36, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(37, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(38, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(39, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(40, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(51, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(52, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(53, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(54, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(55, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(56, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(57, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(58, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(59, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(60, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]"
                ],
                "accountType": "(dataSkuSettings)[parameters(vmSizeDataNodes)].storageAccountType",
                "afs": "[variables('storageAccountNameAFS')]",
                "shared": "[variables('storageAccountNameShared')]",
                "prefix": "[concat(variables('storageAccountPrefix'), 'da')]"
              }
            },
            "loadBalancerType": {
              "value": "internal"
            },
            "ilbIpAddress": {
              "value": "10.0.2.100"
            },
            "location": {
              "value": "[resourceGroup().location]"
            }
          }
        }
      },
      {
        "name": "client-nodes",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "Microsoft.Resources/deployments/shared"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesFolderName'), '/', variables('clientTemplateFileName'), parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "adminUsername": {
              "value": "GEN-UNIQUE"
            },
            "authSet": {
              "value": {
                "password": "GEN-PASSWORD",
                "sshKey": "GEN-SSH-PUB-KEY",
                "type": "sshPublicKey"
              }
            },
            "storageSettings": {
              "value": {
                "count": "[div(sub(add(parameters('vmDataNodeCount'), variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                "mapping": [
                  "[div(sub(add(1, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(2, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(3, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(4, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(5, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(6, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(7, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(8, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(9, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(10, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(11, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(12, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(13, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(14, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(15, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(16, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(17, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(18, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(19, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(20, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(21, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(22, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(23, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(24, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(25, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(26, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(27, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(28, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(29, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(30, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(31, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(32, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(33, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(34, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(35, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(36, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(37, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(38, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(39, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(40, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(51, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(52, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(53, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(54, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(55, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(56, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(57, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(58, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(59, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(60, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]"
                ],
                "accountType": "(dataSkuSettings)[parameters(vmSizeDataNodes)].storageAccountType",
                "afs": "[variables('storageAccountNameAFS')]",
                "shared": "[variables('storageAccountNameShared')]",
                "prefix": "[concat(variables('storageAccountPrefix'), 'da')]"
              }
            },
            "subnet": {
              "value": "(networkSettings).subnet.other"
            },
            "vmSize": {
              "value": "Standard_D2_v3"
            },
            "osSettings": {
              "value": "(osFamily)[parameters(OS)]"
            },
            "vmCount": {
              "value": 1
            },
            "lbBackendPools": {
              "value": {
                "backendPools": [
                  {
                    "id": "Microsoft.Network/loadBalancers/backendAddressPools/es-load-balancer/LBBE"
                  }
                ]
              }
            },
            "namespace": {
              "value": "elasticsearch-client"
            },
            "location": {
              "value": "[resourceGroup().location]"
            }
          }
        }
      },
      {
        "name": "data-nodes",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "Microsoft.Resources/deployments/shared"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesFolderName'), '/', variables('dataTemplateFileNameValue'), parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "adminUsername": {
              "value": "GEN-UNIQUE"
            },
            "authSet": {
              "value": {
                "password": "GEN-PASSWORD",
                "sshKey": "GEN-SSH-PUB-KEY",
                "type": "sshPublicKey"
              }
            },
            "storageSettings": {
              "value": {
                "count": "[div(sub(add(parameters('vmDataNodeCount'), variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                "mapping": [
                  "[div(sub(add(1, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(2, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(3, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(4, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(5, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(6, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(7, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(8, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(9, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(10, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(11, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(12, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(13, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(14, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(15, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(16, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(17, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(18, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(19, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(20, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(21, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(22, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(23, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(24, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(25, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(26, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(27, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(28, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(29, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(30, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(31, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(32, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(33, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(34, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(35, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(36, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(37, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(38, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(39, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(40, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(51, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(52, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(53, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(54, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(55, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(56, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(57, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(58, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(59, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
                  "[div(sub(add(60, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]"
                ],
                "accountType": "(dataSkuSettings)[parameters(vmSizeDataNodes)].storageAccountType",
                "afs": "[variables('storageAccountNameAFS')]",
                "shared": "[variables('storageAccountNameShared')]",
                "prefix": "[concat(variables('storageAccountPrefix'), 'da')]"
              }
            },
            "subnet": {
              "value": "(networkSettings).subnet.data"
            },
            "vmSize": {
              "value": "Standard_D2_v3"
            },
            "vmCount": {
              "value": 3
            },
            "namespace": {
              "value": "elasticsearch-data"
            },
            "osSettings": {
              "value": "(osFamily)[parameters(OS)]"
            },
            "lbBackendPools": {
              "value": "(dataLBSettingOptions)[mod(add(parameters(vmClientNodeCount), 2), add(parameters(vmClientNodeCount), 1))]"
            },
            "location": {
              "value": "[resourceGroup().location]"
            }
          }
        }
      },
      {
        "name": "jumpbox",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "Microsoft.Resources/deployments/shared"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesFolderName'), '/', variables('jumpboxTemplateFileName'), parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "adminUsername": {
              "value": "GEN-UNIQUE"
            },
            "authSet": {
              "value": {
                "password": "GEN-PASSWORD",
                "sshKey": "GEN-SSH-PUB-KEY",
                "type": "sshPublicKey"
              }
            },
            "subnet": {
              "value": "(networkSettings).subnet.other"
            },
            "osSettings": {
              "value": "(osFamily)[parameters(OS)]"
            },
            "namespace": {
              "value": "elasticsearch-jumpbox"
            },
            "location": {
              "value": "[resourceGroup().location]"
            }
          }
        }
      },
      {
        "name": "kibana",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "Microsoft.Resources/deployments/shared"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesFolderName'), '/', variables('kibanaTemplateFileName'), parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "adminUsername": {
              "value": "GEN-UNIQUE"
            },
            "authSet": {
              "value": {
                "password": "GEN-PASSWORD",
                "sshKey": "GEN-SSH-PUB-KEY",
                "type": "sshPublicKey"
              }
            },
            "subnet": {
              "value": "(networkSettings).subnet.other"
            },
            "osSettings": {
              "value": "(osFamily)[parameters(OS)]"
            },
            "namespace": {
              "value": "elasticsearch-kibana"
            },
            "location": {
              "value": "[resourceGroup().location]"
            }
          }
        }
      }
    ],
    "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
  }
}