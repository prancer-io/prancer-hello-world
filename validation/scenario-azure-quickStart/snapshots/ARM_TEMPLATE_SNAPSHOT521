{
  "structure": "filesystem",
  "error": null,
  "reference": "master",
  "contentType": "json",
  "source": "gitConnectorAzureQuickStart",
  "paths": [
    "/application-workloads/solace/solace-message-router/azuredeploy.json",
    "/application-workloads/solace/solace-message-router/azuredeploy.parameters.json"
  ],
  "timestamp": 1642962896306,
  "queryuser": null,
  "checksum": "99914b932bd37a50b983c5e7c90ae93b",
  "node": {
    "masterSnapshotId": "ARM_TEMPLATE_SNAPSHOT",
    "type": "arm",
    "collection": "armtemplate",
    "paths": [
      "/application-workloads/solace/solace-message-router/azuredeploy.json",
      "/application-workloads/solace/solace-message-router/azuredeploy.parameters.json"
    ],
    "snapshotId": "ARM_TEMPLATE_SNAPSHOT521",
    "status": "active",
    "validate": true,
    "resourceTypes": [
      "microsoft.network/publicipaddresses",
      "microsoft.resources/deployments",
      "microsoft.network/virtualnetworks",
      "microsoft.network/networkinterfaces",
      "microsoft.compute/virtualmachines/extensions",
      "microsoft.compute/virtualmachines",
      "microsoft.compute/availabilitysets"
    ]
  },
  "snapshotId": "ARM_TEMPLATE_SNAPSHOT521",
  "collection": "armtemplate",
  "json": {
    "contentVersion": "1.0.0.0",
    "parameters": {
      "vmAdminUsername": {
        "type": "string",
        "metadata": {
          "description": "Username for the virtual Machine(s) hosting the PubSub+ event broker instance(s). Do not use special characters."
        },
        "value": "GEN-UNIQUE"
      },
      "vmAdminPassword": {
        "type": "securestring",
        "metadata": {
          "description": "Password for the virtual Machine(s). Azure sets rules on passwords, check the online feedback."
        },
        "value": "GEN-PASSWORD"
      },
      "solaceAdminPassword": {
        "type": "securestring",
        "metadata": {
          "description": "Password for the PubSub+ event broker management 'admin' user. For password rules refer to https://docs.solace.com/Configuring-and-Managing/Configuring-Internal-CLI-User-Accounts.htm#Changing-CLI-User-Passwords "
        },
        "value": "admin"
      },
      "securityGroupName": {
        "type": "string",
        "defaultValue": "solace-security",
        "metadata": {
          "description": "Security group defined to support PubSub+ event broker system level and default message vpn ports."
        }
      },
      "workspaceName": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "Optional: Unique OMS Workspace Name for Log Analytics. Leave this field empty to not deploy an OMS Workspace."
        },
        "value": "GEN-UNIQUE"
      },
      "workspaceRegion": {
        "type": "string",
        "defaultValue": "East US",
        "metadata": {
          "description": "OMS Workspace Region for Log Analytics. Not used if Workspace Name is empty."
        },
        "allowedValues": [
          "East US",
          "West Europe",
          "Southeast Asia",
          "Australia Southeast",
          "Japan East",
          "UK South",
          "Central India",
          "Canada Central"
        ],
        "value": "East US"
      },
      "vmAndLoadbalancerExposure": {
        "type": "string",
        "defaultValue": "Public",
        "metadata": {
          "description": "Specify the type of access to the broker VMs for SSH and to the Load Balancer for broker services. 'Internal' will make them accessible only from the local virtual network"
        },
        "allowedValues": [
          "Internal",
          "Public"
        ]
      },
      "dnsLabelForPublicLoadBalancer": {
        "type": "string",
        "defaultValue": "[concat('lb', uniqueString(resourceGroup().id, deployment().name))]",
        "metadata": {
          "description": "Ignored if Local exposure selected. If using a Public access, provide a unique DNS Label for the Load Balancer access IP. Name must satisfy regular expression ^[a-z][a-z0-9-]{1,61}[a-z0-9]$. Default will generate a unique string"
        },
        "value": "GEN-UNIQUE"
      },
      "dnsLabelForVmIp": {
        "type": "string",
        "defaultValue": "[concat('vm', uniqueString(resourceGroup().id, deployment().name))]",
        "metadata": {
          "description": "Ignored if Local exposure selected. If using a Public access, provide a unique DNS Label for the broker Virtual Machine(s). Do not use '-'. Default will generate a unique string"
        }
      },
      "centosVersion": {
        "type": "string",
        "defaultValue": "7.4",
        "metadata": {
          "description": "The CentOS version for deploying the Docker containers. This will pick a fully patched image of this given CentOS version. Allowed values: 7.2, 7.3, 7.4"
        },
        "allowedValues": [
          "7.2",
          "7.3",
          "7.4"
        ]
      },
      "maxNumberOfClientConnections": {
        "type": "string",
        "defaultValue": "100",
        "metadata": {
          "description": "Broker system scaling: the maximum supported number of client connections"
        },
        "allowedValues": [
          "100",
          "1000",
          "10000",
          "100000",
          "200000"
        ]
      },
      "maxNumberOfQueueMessages": {
        "type": "string",
        "defaultValue": "100",
        "metadata": {
          "description": "Broker system scaling: the maximum number of queue messages, in millions of messages"
        },
        "allowedValues": [
          "100",
          "240",
          "3000"
        ]
      },
      "messageRoutingNodeVmSize": {
        "type": "string",
        "defaultValue": "Standard_D2_v3",
        "metadata": {
          "description": "The size of a PubSub+ broker message routing node VM. Important: ensure adequate CPU and Memory resources are available to support the selected broker system scaling parameters. For requirements check https://docs.solace.com/."
        },
        "allowedValues": [
          "Standard_D2_v3",
          "Standard_D2_v3",
          "Standard_D4_v3",
          "Standard_D8_v3",
          "Standard_D16_v3",
          "Standard_D2_v3",
          "Standard_D4_v3",
          "Standard_D8_v3",
          "Standard_D16_v3",
          "Standard_D2s_v3",
          "Standard_D2s_v3",
          "Standard_D4s_v3",
          "Standard_D8s_v3",
          "Standard_D16s_v3"
        ]
      },
      "monitorNodeVmSize": {
        "type": "string",
        "defaultValue": "Standard_D2_v3",
        "metadata": {
          "description": "The size of the PubSub+ monitor node VM in a High Availabity deployment. For requirements check https://docs.solace.com/."
        },
        "allowedValues": [
          "Standard_D2_v3",
          "Standard_D2s_v3",
          "Standard_D2_v3",
          "Standard_D2s_v3",
          "Standard_D2_v3"
        ]
      },
      "dataDiskSize": {
        "type": "string",
        "defaultValue": "0",
        "metadata": {
          "description": "The size of the data disk in GB for diagnostics and message spooling on the Solace Message Routing Nodes. For requirements check https://docs.solace.com/."
        },
        "allowedValues": [
          "0",
          "8",
          "16",
          "32",
          "64",
          "128",
          "256"
        ],
        "value": "8"
      },
      "brokerDockerImageReference": {
        "type": "string",
        "defaultValue": "solace/solace-pubsub-standard:latest",
        "metadata": {
          "description": "Solace PubSub+ event broker docker image reference: a docker registry name with optional tag or a download URL. The download URL can be obtained from http://dev.solace.com/downloads/ or it can be a url to a remotely hosted load version. Default will use the latest image available from Docker Hub."
        },
        "value": "solace/solace-pubsub-standard:latest"
      },
      "deploymentModel": {
        "type": "string",
        "metadata": {
          "description": "Deploy three node HA cluster or single node"
        },
        "allowedValues": [
          "HighAvailability",
          "SingleNode"
        ],
        "value": "HighAvailability"
      },
      "existingVirtualNetworkName": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "Optional: Only used if deploying into an existing virtual network and subnet. Specify the Existing Virtual Network Name together with the Existing Subnet Name, otherwise leave it at default blank."
        }
      },
      "existingSubnetName": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "Optional: Only used if deploying into an existing virtual network and subnet. Specify the Existing Virtual Network Name together with the Existing Subnet Name, otherwise leave it at default blank."
        }
      },
      "vnetAddressPrefix": {
        "type": "string",
        "defaultValue": "10.0.0.0/16",
        "metadata": {
          "description": "The virtual network's address range in CIDR notation where the PubSub+ event broker will be deployed."
        }
      },
      "subnetPrefix": {
        "type": "string",
        "defaultValue": "10.0.0.0/24",
        "metadata": {
          "description": "The subnet's address range in CIDR notation where the PubSub+ event broker will be deployed. It must be contained by the address space of the virtual network. The address range of a subnet which is in use can't be edited."
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for all resources. Default will use the same location as the Resource Group."
        }
      },
      "numberOfFaultDomains": {
        "type": "int",
        "defaultValue": 3,
        "metadata": {
          "description": "The number of fault domains to be used for the deployment. For the maximum number fault domains available to your location refer to https://github.com/MicrosoftDocs/azure-docs/blob/master/includes/managed-disks-common-fault-domain-region-list.md"
        },
        "value": 3
      },
      "_artifactsLocation": {
        "type": "string",
        "metadata": {
          "description": "The base URI where artifacts required by this template are located."
        },
        "defaultValue": "[deployment().properties.templatelink.uri]"
      },
      "_artifactsLocationSasToken": {
        "type": "securestring",
        "metadata": {
          "description": "Optional: The Shared Access Signatures (SAS) token if required for the artifacts location, otherwise leave it at default blank."
        },
        "defaultValue": ""
      }
    },
    "variables": {
      "availabilitySetName": "solace-availabilityset",
      "platformFaultDomainCount": 3,
      "platformUpdateDomainCount": "[if(equals(parameters('numberOfFaultDomains'), 1), 1, 3)]",
      "imagePublisher": "OpenLogic",
      "imageOffer": "Centos",
      "nestedTemplatesLocation": "nestedtemplates/",
      "solaceSecurityTemplateName": "SolaceSecurity.Template",
      "securitySharedTemplateName": "security-shared-resources.json",
      "securitySharedTemplateUri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesLocation'), variables('securitySharedTemplateName'), parameters('_artifactsLocationSasToken')))]",
      "solaceLoadBalancerName": "SolaceLoadBalancer.Template",
      "loadBalancerSharedTemplateName": "loadbalancer-shared-resources.json",
      "loadBalancerSharedTemplateUri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesLocation'), variables('loadBalancerSharedTemplateName'), parameters('_artifactsLocationSasToken')))]",
      "solaceUpdateSubnetName": "SolaceUpdateSubnet.Template",
      "updateSubnetSharedTemplateName": "update-subnet-shared-resources.json",
      "updateSubnetSharedTemplateUri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesLocation'), variables('updateSubnetSharedTemplateName'), parameters('_artifactsLocationSasToken')))]",
      "solaceWorkspaceName": "SolaceWorkspace.Template",
      "workspaceEnabledSharedTemplateName": "workspace-enabled-shared-resources.json",
      "workspaceEnabledSharedTemplateUri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesLocation'), variables('workspaceEnabledSharedTemplateName'), parameters('_artifactsLocationSasToken')))]",
      "scriptsLocation": "scripts/",
      "solaceInstallScriptName": "install-solace.sh",
      "solaceInstallScriptFileUri": "[uri(parameters('_artifactsLocation'), concat(variables('scriptsLocation'), variables('solaceInstallScriptName'), parameters('_artifactsLocationSasToken')))]",
      "sempQueryScriptName": "semp_query.sh",
      "sempQueryScriptFileUri": "[uri(parameters('_artifactsLocation'), concat(variables('scriptsLocation'), variables('sempQueryScriptName'), parameters('_artifactsLocationSasToken')))]",
      "publicIPAddressNameVM": "myVMPublicIPD",
      "publicIPAddressNameLB": "myLBPublicIPD",
      "publicIPAddressType": "Dynamic",
      "virtualNetworkName": "[if(not(empty(parameters('existingVirtualNetworkName'))), parameters('existingVirtualNetworkName'), 'solace-vnet')]",
      "subnetName": "[if(not(empty(parameters('existingSubnetName'))), parameters('existingSubnetName'), 'solace-subnet')]",
      "nicName": "Nicd",
      "deploymentModelHighAvailability": {
        "numberOfNodes": 3
      },
      "deploymentModelSingleNode": {
        "numberOfNodes": 1
      },
      "subnetRef": "Microsoft.Network/virtualNetworks/subnets/[if(not(empty(parameters('existingVirtualNetworkName'))), parameters('existingVirtualNetworkName'), 'solace-vnet')]/[if(not(empty(parameters('existingSubnetName'))), parameters('existingSubnetName'), 'solace-subnet')]",
      "numberOfInstances": "(concat(deploymentModel, parameters(deploymentModel))).numberOfNodes",
      "monitorNodeIndex": 2,
      "lbName": "solace-ha-group-loadbalancer",
      "lbPoolName": "solace-ha-group",
      "lbPoolID": "Microsoft.Network/loadBalancers/backendAddressPools/solace-ha-group-loadbalancer/solace-ha-group",
      "dataDisksChoices": {
        "0": [
          {
            "name": "[concat('vm', uniqueString(resourceGroup().id, deployment().name))]0_DataDisk",
            "diskSizeGB": "8",
            "lun": 0,
            "caching": "ReadWrite",
            "createOption": "Empty",
            "managedDisk": {
              "storageAccountType": "StandardSSD_LRS"
            }
          }
        ],
        "1": [
          {
            "name": "[concat('vm', uniqueString(resourceGroup().id, deployment().name))]1_DataDisk",
            "diskSizeGB": "8",
            "lun": 0,
            "caching": "ReadWrite",
            "createOption": "Empty",
            "managedDisk": {
              "storageAccountType": "StandardSSD_LRS"
            }
          }
        ],
        "2": []
      },
      "adminPasswordDir": "/mnt/resource/secrets",
      "adminPasswordFile": "/mnt/resource/secrets/solOSpasswd"
    },
    "resources": [
      {
        "apiVersion": "2019-10-01",
        "type": "Microsoft.Resources/deployments",
        "name": "SolaceSecurity.Template",
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesLocation'), variables('securitySharedTemplateName'), parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "securityGroupName": {
              "value": "solace-security"
            },
            "subnetPrefix": {
              "value": "10.0.0.0/24"
            },
            "location": {
              "value": "[resourceGroup().location]"
            }
          }
        }
      },
      {
        "apiVersion": "2019-10-01",
        "type": "Microsoft.Resources/deployments",
        "name": "SolaceLoadBalancer.Template",
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesLocation'), variables('loadBalancerSharedTemplateName'), parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "vmAndLoadbalancerExposure": {
              "value": "Public"
            },
            "dnsLabelForPublicLoadBalancer": {
              "value": "GEN-UNIQUE"
            },
            "publicIPAddressNameLB": {
              "value": "myLBPublicIPD"
            },
            "publicIPAddressType": {
              "value": "Dynamic"
            },
            "lbName": {
              "value": "solace-ha-group-loadbalancer"
            },
            "lbPoolName": {
              "value": "solace-ha-group"
            },
            "subnetRef": {
              "value": "Microsoft.Network/virtualNetworks/subnets/[if(not(empty(parameters('existingVirtualNetworkName'))), parameters('existingVirtualNetworkName'), 'solace-vnet')]/[if(not(empty(parameters('existingSubnetName'))), parameters('existingSubnetName'), 'solace-subnet')]"
            },
            "location": {
              "value": "[resourceGroup().location]"
            }
          }
        }
      },
      {
        "condition": "[not(empty(parameters('workspaceName')))]",
        "apiVersion": "2019-10-01",
        "type": "Microsoft.Resources/deployments",
        "name": "SolaceWorkspace.Template",
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesLocation'), variables('workspaceEnabledSharedTemplateName'), parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "workspaceName": {
              "value": "GEN-UNIQUE"
            },
            "workspaceRegion": {
              "value": "East US"
            }
          }
        }
      },
      {
        "condition": false,
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "myVMPublicIPDcopyindex()",
        "location": "[resourceGroup().location]",
        "copy": {
          "name": "interfaceLoop",
          "count": "(concat(deploymentModel, parameters(deploymentModel))).numberOfNodes"
        },
        "properties": {
          "publicIPAllocationMethod": "Dynamic",
          "dnsSettings": {
            "domainNameLabel": "[concat('vm', uniqueString(resourceGroup().id, deployment().name))]copyindex()"
          }
        }
      },
      {
        "condition": "[empty(parameters('existingSubnetName'))]",
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[if(not(empty(parameters('existingVirtualNetworkName'))), parameters('existingVirtualNetworkName'), 'solace-vnet')]",
        "location": "[resourceGroup().location]",
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "10.0.0.0/16"
            ]
          },
          "subnets": [
            {
              "name": "[if(not(empty(parameters('existingSubnetName'))), parameters('existingSubnetName'), 'solace-subnet')]",
              "properties": {
                "addressPrefix": "10.0.0.0/24"
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2019-10-01",
        "name": "SolaceUpdateSubnet.Template",
        "type": "Microsoft.Resources/deployments",
        "dependsOn": [
          "Microsoft.Resources/deployments/SolaceSecurity.Template"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat(variables('nestedTemplatesLocation'), variables('updateSubnetSharedTemplateName'), parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "virtualNetworkName": {
              "value": "[if(not(empty(parameters('existingVirtualNetworkName'))), parameters('existingVirtualNetworkName'), 'solace-vnet')]"
            },
            "subnetName": {
              "value": "[if(not(empty(parameters('existingSubnetName'))), parameters('existingSubnetName'), 'solace-subnet')]"
            },
            "subnetAddressPrefix": {
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName')), '2018-03-01').addressPrefix]"
            },
            "nsgId": {
              "value": "Microsoft.Network/networkSecurityGroups/solace-security"
            },
            "location": {
              "value": "[resourceGroup().location]"
            }
          }
        }
      },
      {
        "condition": false,
        "comments": "Only created if network interfaces are to be publicly exposed. Otherwise the next resource is created.",
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "PublicNicdcopyindex()",
        "location": "[resourceGroup().location]",
        "copy": {
          "name": "nicLoop",
          "count": "(concat(deploymentModel, parameters(deploymentModel))).numberOfNodes"
        },
        "dependsOn": [
          "Microsoft.Network/publicIPAddresses/myVMPublicIPDcopyindex()",
          "Microsoft.Network/virtualNetworks/[if(not(empty(parameters('existingVirtualNetworkName'))), parameters('existingVirtualNetworkName'), 'solace-vnet')]",
          "Microsoft.Resources/deployments/SolaceLoadBalancer.Template"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups/solace-security"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "publicIPAddress": {
                  "id": "Microsoft.Network/publicIPAddresses/myVMPublicIPDcopyindex()"
                },
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/[if(not(empty(parameters('existingVirtualNetworkName'))), parameters('existingVirtualNetworkName'), 'solace-vnet')]/[if(not(empty(parameters('existingSubnetName'))), parameters('existingSubnetName'), 'solace-subnet')]"
                },
                "loadBalancerBackendAddressPools": [
                  {
                    "id": "Microsoft.Network/loadBalancers/backendAddressPools/solace-ha-group-loadbalancer/solace-ha-group"
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "condition": "[not(equals(parameters('vmAndLoadbalancerExposure'),'Public'))]",
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "InternalNicdcopyindex()",
        "location": "[resourceGroup().location]",
        "copy": {
          "name": "nicLoop",
          "count": "(concat(deploymentModel, parameters(deploymentModel))).numberOfNodes"
        },
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/[if(not(empty(parameters('existingVirtualNetworkName'))), parameters('existingVirtualNetworkName'), 'solace-vnet')]",
          "Microsoft.Resources/deployments/SolaceLoadBalancer.Template"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups/solace-security"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/[if(not(empty(parameters('existingVirtualNetworkName'))), parameters('existingVirtualNetworkName'), 'solace-vnet')]/[if(not(empty(parameters('existingSubnetName'))), parameters('existingSubnetName'), 'solace-subnet')]"
                },
                "loadBalancerBackendAddressPools": [
                  {
                    "id": "Microsoft.Network/loadBalancers/backendAddressPools/solace-ha-group-loadbalancer/solace-ha-group"
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2019-12-01",
        "type": "Microsoft.Compute/availabilitySets",
        "name": "solace-availabilityset",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Aligned"
        },
        "properties": {
          "platformFaultDomainCount": 3,
          "platformUpdateDomainCount": "[if(equals(parameters('numberOfFaultDomains'), 1), 1, 3)]"
        }
      },
      {
        "apiVersion": "2019-12-01",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[concat('vm', uniqueString(resourceGroup().id, deployment().name))]copyindex()",
        "location": "[resourceGroup().location]",
        "copy": {
          "name": "virtualMachineLoop",
          "count": "(concat(deploymentModel, parameters(deploymentModel))).numberOfNodes"
        },
        "dependsOn": [
          "Microsoft.Network/networkInterfaces/PublicNicdcopyindex()",
          "Microsoft.Compute/availabilitySets/solace-availabilityset"
        ],
        "properties": {
          "availabilitySet": {
            "id": "Microsoft.Compute/availabilitySets/solace-availabilityset"
          },
          "hardwareProfile": {
            "vmSize": "[if(equals(copyindex(), variables('monitorNodeIndex')), parameters('monitorNodeVmSize'), parameters('messageRoutingNodeVmSize'))]"
          },
          "osProfile": {
            "computerName": "[concat('vm', uniqueString(resourceGroup().id, deployment().name))]copyindex()",
            "adminUsername": "GEN-UNIQUE",
            "adminPassword": "GEN-PASSWORD"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "OpenLogic",
              "offer": "Centos",
              "sku": "7.4",
              "version": "latest"
            },
            "osDisk": {
              "name": "[concat('vm', uniqueString(resourceGroup().id, deployment().name))]copyindex()_OSDisk",
              "caching": "ReadWrite",
              "createOption": "FromImage"
            },
            "dataDisks": "(dataDisksChoices)[if(or(equals(parameters(dataDiskSize), 0), equals(copyindex(), variables(monitorNodeIndex))), 2, string(copyindex()))]"
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/PublicNicdcopyindex()"
              }
            ]
          }
        }
      },
      {
        "apiVersion": "2019-12-01",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat('vm', uniqueString(resourceGroup().id, deployment().name))]copyindex()/DockerExtension",
        "location": "[resourceGroup().location]",
        "copy": {
          "name": "DockerLoop",
          "count": "(concat(deploymentModel, parameters(deploymentModel))).numberOfNodes"
        },
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/[concat('vm', uniqueString(resourceGroup().id, deployment().name))]copyindex()"
        ],
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "DockerExtension",
          "typeHandlerVersion": "1.0",
          "autoUpgradeMinorVersion": true,
          "settings": {}
        }
      },
      {
        "condition": "[not(empty(parameters('workspaceName')))]",
        "apiVersion": "2019-12-01",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat('vm', uniqueString(resourceGroup().id, deployment().name))]copyindex()/OmsAgentExtension",
        "location": "[resourceGroup().location]",
        "copy": {
          "name": "OmsAgentLoop",
          "count": "(concat(deploymentModel, parameters(deploymentModel))).numberOfNodes"
        },
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/[concat('vm', uniqueString(resourceGroup().id, deployment().name))]copyindex()/extensions/DockerExtension",
          "Microsoft.Resources/deployments/SolaceWorkspace.Template"
        ],
        "properties": {
          "publisher": "Microsoft.EnterpriseCloud.Monitoring",
          "type": "OmsAgentForLinux",
          "typeHandlerVersion": "1.4",
          "settings": {
            "workspaceId": "[if(empty(parameters('workspaceName')),  '', reference(variables('solaceWorkspaceName')).outputs.workspaceId.value)]"
          },
          "protectedSettings": {
            "workspaceKey": "[if(empty(parameters('workspaceName')),  '', reference(variables('solaceWorkspaceName')).outputs.workspaceKey.value)]"
          }
        }
      },
      {
        "apiVersion": "2019-12-01",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat('vm', uniqueString(resourceGroup().id, deployment().name))]copyindex()/configureSolaceContainer",
        "location": "[resourceGroup().location]",
        "copy": {
          "name": "SolaceLoop",
          "count": "(concat(deploymentModel, parameters(deploymentModel))).numberOfNodes"
        },
        "dependsOn": [
          "[if(empty(parameters('workspaceName')), concat('Microsoft.Compute/virtualMachines/', parameters('dnsLabelForVmIp'), copyindex(), '/extensions/DockerExtension'), concat('Microsoft.Compute/virtualMachines/', parameters('dnsLabelForVmIp'), copyindex(), '/extensions/OmsAgentExtension'))]"
        ],
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": [
              "[uri(parameters('_artifactsLocation'), concat(variables('scriptsLocation'), variables('solaceInstallScriptName'), parameters('_artifactsLocationSasToken')))]",
              "[uri(parameters('_artifactsLocation'), concat(variables('scriptsLocation'), variables('sempQueryScriptName'), parameters('_artifactsLocationSasToken')))]"
            ]
          },
          "protectedSettings": {
            "commandToExecute": "[concat('mkdir -p -m 770 ', variables('adminPasswordDir'), '; echo ', parameters('solaceAdminPassword'), ' > ', variables('adminPasswordFile'), '; bash ', variables('solaceInstallScriptName'), ' -c ', copyindex(), ' -d ', parameters('dnsLabelForVmIp'), ' -i ', variables('numberOfInstances'), ' -p ', variables('adminPasswordFile'), ' -n ', parameters('maxNumberOfClientConnections'), ' -q ', parameters('maxNumberOfQueueMessages'), ' -s ', if(equals(copyindex(), variables('monitorNodeIndex')), '0', parameters('dataDiskSize')), if(empty(parameters('workspaceName')), '', concat(' -w ', reference(variables('solaceWorkspaceName')).outputs.workspaceId.value)), ' -u ', parameters('brokerDockerImageReference'))]"
          }
        }
      }
    ],
    "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
  }
}