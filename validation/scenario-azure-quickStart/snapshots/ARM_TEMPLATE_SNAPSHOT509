{
  "structure": "filesystem",
  "error": null,
  "reference": "master",
  "contentType": "json",
  "source": "gitConnectorAzureQuickStart",
  "paths": [
    "/application-workloads/sas/sas9.4-viya/sas9.4-viya/azuredeploy.json",
    "/application-workloads/sas/sas9.4-viya/sas9.4-viya/azuredeploy.parameters.json"
  ],
  "timestamp": 1642962896140,
  "queryuser": null,
  "checksum": "99914b932bd37a50b983c5e7c90ae93b",
  "node": {
    "masterSnapshotId": "ARM_TEMPLATE_SNAPSHOT",
    "type": "arm",
    "collection": "armtemplate",
    "paths": [
      "/application-workloads/sas/sas9.4-viya/sas9.4-viya/azuredeploy.json",
      "/application-workloads/sas/sas9.4-viya/sas9.4-viya/azuredeploy.parameters.json"
    ],
    "snapshotId": "ARM_TEMPLATE_SNAPSHOT509",
    "status": "active",
    "validate": true,
    "resourceTypes": [
      "microsoft.network/publicipaddresses",
      "microsoft.network/virtualnetworks",
      "microsoft.resources/deployments",
      "microsoft.network/networkinterfaces",
      "microsoft.compute/virtualmachines",
      "microsoft.network/networksecuritygroups",
      "microsoft.compute/proximityplacementgroups",
      "microsoft.keyvault/vaults/secrets",
      "microsoft.storage/storageaccounts",
      "microsoft.keyvault/vaults"
    ]
  },
  "snapshotId": "ARM_TEMPLATE_SNAPSHOT509",
  "collection": "armtemplate",
  "json": {
    "contentVersion": "1.0.0.0",
    "parameters": {
      "SASApplicationName": {
        "minLength": 2,
        "maxLength": 6,
        "type": "String",
        "defaultValue": "sasapp",
        "metadata": {
          "description": "This tag will be used as a prefix for the hostname of the SAS servers and Azure resources"
        }
      },
      "adminIngressLocation": {
        "type": "String",
        "metadata": {
          "description": "Allow inbound SSH traffic to the Ansible Controller-Bastion Host from this CIDR block or IP address range. Must be a valid IP or CIDR range of the form x.x.x.x or x.x.x.x/x"
        },
        "value": "183.83.137.123"
      },
      "vnetAddressCIDR": {
        "defaultValue": "10.10.0.0/16",
        "type": "String",
        "metadata": {
          "description": "Virtual Network CIDR, ex. 10.10.0.0/16"
        }
      },
      "ansibleBastionPublicSubnetCIDR": {
        "defaultValue": "10.10.1.0/24",
        "type": "String",
        "metadata": {
          "description": "Virtual Network Public Subnet CIDR, ex. 10.10.1.0/24 which should allign with VNET CIDR"
        }
      },
      "SASPrivateSubnetCIDR": {
        "defaultValue": "10.10.2.0/24",
        "type": "String",
        "metadata": {
          "description": "Virtual Network Private Subnet CIDR, ex. 10.10.2.0/24 which should allign with VNET CIDR"
        }
      },
      "ansibleVMSize": {
        "defaultValue": "Standard_D4s_v3",
        "type": "String",
        "metadata": {
          "description": "This is the SKU for the Ansible VM. The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks. For details: https://azure.microsoft.com/en-in/pricing/details/virtual-machines/red-hat/"
        }
      },
      "windowsRdpVMSize": {
        "defaultValue": "Standard_D8S_v3",
        "type": "String",
        "metadata": {
          "description": "This is the SKU for the Windows Server VM. The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks"
        }
      },
      "SASMetaVMSize": {
        "defaultValue": "Standard_D4s_v3",
        "type": "String",
        "metadata": {
          "description": "This is the SKU for the Meta VM.The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks. For details: https://azure.microsoft.com/en-in/pricing/details/virtual-machines/red-hat/"
        }
      },
      "SASComputeVMSize": {
        "defaultValue": "Standard_E8s_v3",
        "type": "String",
        "metadata": {
          "description": "This is the SKU for the Compute VM.The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks. For details: https://azure.microsoft.com/en-in/pricing/details/virtual-machines/red-hat/"
        }
      },
      "SASMidVMSize": {
        "defaultValue": "Standard_E8s_v3",
        "type": "String",
        "metadata": {
          "description": "This is the SKU for the Mid VM. The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks. For details: https://azure.microsoft.com/en-in/pricing/details/virtual-machines/red-hat/"
        }
      },
      "SASDataStorage": {
        "defaultValue": 100,
        "minValue": 100,
        "maxValue": 32767,
        "type": "Int",
        "metadata": {
          "description": "The SAS data volume size for SAS 94"
        }
      },
      "primaryUserName": {
        "type": "string",
        "metadata": {
          "description": "Username for the Virtual Machine."
        },
        "value": "GEN-UNIQUE"
      },
      "SASExternalPassword": {
        "minLength": 12,
        "maxLength": 255,
        "type": "SecureString",
        "metadata": {
          "description": "Password for RDP login & SAS admin account in SAS servers"
        },
        "value": "GEN-PASSWORD"
      },
      "SASInternalPassword": {
        "minLength": 8,
        "maxLength": 255,
        "type": "SecureString",
        "metadata": {
          "description": "Password for SAS Internal Accounts(Metadata & WIP)"
        },
        "value": "GEN-PASSWORD"
      },
      "viyaPrivateSubnetCIDR": {
        "defaultValue": "10.10.3.0/24",
        "type": "String",
        "metadata": {
          "description": "Virtual Network Private Subnet CIDR, ex. 10.10.3.0/24 which should allign with VNET CIDR"
        }
      },
      "viyaMicroservicesVMSize": {
        "defaultValue": "Standard_E16s_v3",
        "type": "String",
        "metadata": {
          "description": "This is the SKU for the MicroServices VM. The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks. For details: https://azure.microsoft.com/en-in/pricing/details/virtual-machines/red-hat/"
        }
      },
      "viyaSpreVMSize": {
        "defaultValue": "Standard_E8s_v3",
        "type": "String",
        "metadata": {
          "description": "This is the SKU for the SPRE VM. The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks. For details: https://azure.microsoft.com/en-in/pricing/details/virtual-machines/red-hat/"
        }
      },
      "viyaCASControllerVMSize": {
        "defaultValue": "Standard_E8s_v3",
        "type": "String",
        "metadata": {
          "description": "This is the SKU for the CASController VM. The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disk. For details: https://azure.microsoft.com/en-in/pricing/details/virtual-machines/red-hat/"
        }
      },
      "viyaCASWorkerVMSize": {
        "defaultValue": "Standard_E8s_v3",
        "type": "String",
        "metadata": {
          "description": "This is the SKU for the CAS Worker VM. The default SKU value represents the minimum recommended size for system stability in most SAS software license sets. The selected SKU must support premium disks. For details: https://azure.microsoft.com/en-in/pricing/details/virtual-machines/red-hat/"
        }
      },
      "numberOfViyaCASNodes": {
        "defaultValue": 1,
        "minValue": 1,
        "maxValue": 100,
        "type": "Int",
        "metadata": {
          "description": "The number of CAS Worker Nodes to create."
        }
      },
      "SASViyaDataStorage": {
        "defaultValue": 100,
        "minValue": 100,
        "maxValue": 32767,
        "type": "Int",
        "metadata": {
          "description": "The SAS data volume size for SAS Viya."
        }
      },
      "storageAccountName": {
        "type": "String",
        "metadata": {
          "description": "Storage AccountName where SAS Depot is located"
        },
        "value": "ccwestus"
      },
      "storageAccountKey": {
        "type": "SecureString",
        "metadata": {
          "description": "Storage Account Key"
        },
        "value": "kngqtXaNOL8g6ugAspsX9c4ReC+ckjFkcaGB00XEumjTjuhtrDOXqswcP/hm+lr+URpREaobkHWdTihqyvf2aw=="
      },
      "fileShareName": {
        "type": "String",
        "metadata": {
          "description": "File Share Name where SASDepot is located"
        },
        "value": "sasrepo"
      },
      "SASDepotFolder": {
        "type": "String",
        "metadata": {
          "description": "Folder Name in Azure File share where SAS94 depot is located"
        },
        "defaultValue": "sasdepot"
      },
      "viyaRepoFolder": {
        "type": "String",
        "metadata": {
          "description": "Folder Name in Azure File share where SAS Viya Repo is located"
        },
        "defaultValue": "viyarepo"
      },
      "SASServerLicenseFile": {
        "type": "String",
        "metadata": {
          "description": "Name of SAS Application Server License file.You will find this file inside the SAS Software Depot. It should be inside the folder sid_file."
        },
        "value": "SAS94_9CCPHL_70154202_LINUX_X86-64.txt"
      },
      "keyVaultOwnerID": {
        "type": "String",
        "metadata": {
          "description": "Key Vault Owner Object ID,Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault.Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets. e.g.In Azure Cloud PowerShell type PS> Get-AzADUser -UserPrincipalName user@domain.com | grep Id"
        },
        "value": "GEN-AZUREAD-OBJECTID"
      },
      "SSHPublicKey": {
        "type": "String",
        "metadata": {
          "description": "The full ssh public key that will be added to the servers."
        },
        "value": "GEN-SSH-PUB-KEY"
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Azure Resources location, where all the SAS 94 and Viya resources should be created. e.g. servers, disks, IP's etc."
        }
      },
      "_artifactsLocation": {
        "type": "string",
        "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/",
        "metadata": {
          "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
        }
      },
      "_artifactsLocationSasToken": {
        "type": "securestring",
        "defaultValue": "",
        "metadata": {
          "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
        }
      }
    },
    "variables": {
      "access_policy_template": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/access_policy.json', parameters('_artifactsLocationSasToken')))]",
      "ansible_nw_interface": "sasapp_ansible_nic",
      "ansible_nw_sg": "sasapp_ansible_nsg",
      "ansible_pub_nw_interface": "sasapp_ansible_pub_nic",
      "ansible_vm_name": "ansible",
      "cascontroller_nw_interface": "sasapp_cascontroller_nic",
      "cascontroller_nw_sg": "sasapp_cascontroller_nsg",
      "cascontroller_vm_name": "cascontroller",
      "casworker_nw_sg": "sasapp_casworker_nsg",
      "casworker_vm_name": "casworker",
      "certificatesPermissions": [
        "import",
        "get",
        "list"
      ],
      "compute_nw_interface": "sasapp_compute_nic",
      "compute_nw_sg": "sasapp_compute_nsg",
      "compute_vm_name": "compute",
      "custom_data_cas": "#cloud-config\n mounts:\n   - [ ephemeral0, /cascache]",
      "custom_data_sas": "#cloud-config\n mounts:\n   - [ ephemeral0, /saswork]",
      "diagnostic_storagegroup_name": "[toLower(concat(parameters('SASApplicationName'),'diag', variables('resourceGroupUniqueString')))]",
      "domain_name": "internal.cloudapp.net",
      "key_vault_name": "sasappKeyVault",
      "key_vault_secretname_pubkey": "ansible-pubkey",
      "key_vault_secretname_pvtkey": "ansible-pvtkey",
      "key_vault_secretname_sasext": "sasextpw",
      "key_vault_secretname_sasinst": "sasintpw",
      "key_vault_secretname_stgacc": "stgacckey",
      "keysPermissions": [
        "get",
        "list",
        "import"
      ],
      "linux_extension_template": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]",
      "meta_nw_interface": "sasapp_meta_nic",
      "meta_nw_sg": "sasapp_meta_nsg",
      "meta_vm_name": "meta",
      "microservices_nw_interface": "sasapp_microservices_nic",
      "microservices_nw_sg": "sasapp_microservices_nsg",
      "microservices_vm_name": "microservices",
      "mid_nw_interface": "sasapp_mid_nic",
      "mid_nw_sg": "sasapp_mid_nsg",
      "mid_vm_name": "mid",
      "ppg_name": "sasapp_ppg_[uniqueString(resourceGroup().id)]",
      "storage_account_uri": "[concat(parameters('storageAccountName'),'.file.',environment().suffixes.storage)]",
      "pub_sub_nw_sg": "sasapp_subnet_pub1_nsg",
      "pvt_sub_nw_sg": "sasapp_subnet_pvt1_nsg",
      "rbacPrincipalID": "GEN-AZUREAD-OBJECTID",
      "rdp_nw_interface": "sasapp_rdp_nic",
      "rdp_nw_sg": "sasapp_rdp_nsg",
      "rdp_os_version": "2019-Datacenter",
      "rdp_vm_name": "rdp",
      "reader_role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "resourceGroupUniqueString": "[uniqueString(resourceGroup().id)]",
      "role_assignment_template": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/role_assignments.json', parameters('_artifactsLocationSasToken')))]",
      "sas_opt_sas_disk_size": 128,
      "sas_osdisk_size": 128,
      "sas_viya_backup_size": 100,
      "sas94vm_tags": {
        "Application": "sasapp",
        "Component": "SAS94NonGrid"
      },
      "sasviyavm_tags": {
        "Application": "sasapp",
        "Component": "SASViya"
      },
      "secretsPermissions": [
        "get",
        "list",
        "set"
      ],
      "skuName": "standard",
      "spre_nw_interface": "sasapp_spre_nic",
      "spre_nw_sg": "sasapp_spre_nsg",
      "spre_vm_name": "spre",
      "tenantId": "[subscription().tenantId]",
      "vnet_name": "sasapp_vnet",
      "vnet_pub_subnt": "sasapp_vnet_pub1_subnet",
      "vnet_pvt_subnt": "sasapp_vnet_pvt1_subnet",
      "vnet_viya_pvt_subnt": "sasapp_vnet_pvt2_subnet",
      "windows_extension_template": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_windows_extension.json', parameters('_artifactsLocationSasToken')))]"
    },
    "resources": [
      {
        "apiVersion": "2019-12-01",
        "type": "Microsoft.Compute/proximityPlacementGroups",
        "name": "sasapp_ppg_[uniqueString(resourceGroup().id)]",
        "location": "[resourceGroup().location]"
      },
      {
        "type": "Microsoft.Network/virtualNetworks",
        "apiVersion": "2019-06-01",
        "name": "sasapp_vnet",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/networkSecurityGroups/sasapp_subnet_pub1_nsg",
          "Microsoft.Network/networkSecurityGroups/sasapp_subnet_pvt1_nsg"
        ],
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "10.10.0.0/16"
            ]
          },
          "subnets": [
            {
              "name": "sasapp_vnet_pvt1_subnet",
              "properties": {
                "addressPrefix": "10.10.2.0/24",
                "networkSecurityGroup": {
                  "id": "Microsoft.Network/networkSecurityGroups/sasapp_subnet_pvt1_nsg"
                }
              }
            },
            {
              "name": "sasapp_vnet_pvt2_subnet",
              "properties": {
                "addressPrefix": "10.10.3.0/24",
                "networkSecurityGroup": {
                  "id": "Microsoft.Network/networkSecurityGroups/sasapp_subnet_pvt1_nsg"
                }
              }
            },
            {
              "name": "sasapp_vnet_pub1_subnet",
              "properties": {
                "addressPrefix": "10.10.1.0/24",
                "networkSecurityGroup": {
                  "id": "Microsoft.Network/networkSecurityGroups/sasapp_subnet_pub1_nsg"
                }
              }
            }
          ],
          "enableDdosProtection": false,
          "enableVmProtection": false
        }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2019-09-01",
        "name": "sasapp_subnet_pub1_nsg",
        "location": "[resourceGroup().location]",
        "properties": {
          "securityRules": [
            {
              "name": "allow-ssh",
              "properties": {
                "protocol": "TCP",
                "sourcePortRange": "*",
                "destinationPortRange": "22",
                "sourceAddressPrefix": "183.83.137.123",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 1000,
                "direction": "Inbound"
              }
            }
          ],
          "defaultSecurityRules": [
            {
              "name": "AllowVnetInBound",
              "properties": {
                "description": "Allow inbound traffic from all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "80,443",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Inbound"
              }
            },
            {
              "name": "DenyAllInBound",
              "properties": {
                "description": "Deny all inbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowVnetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Outbound"
              }
            },
            {
              "name": "AllowInternetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to Internet",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "Internet",
                "access": "Allow",
                "priority": 65001,
                "direction": "Outbound"
              }
            },
            {
              "name": "DenyAllOutBound",
              "properties": {
                "description": "Deny all outbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Outbound"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2019-09-01",
        "name": "sasapp_subnet_pvt1_nsg",
        "location": "[resourceGroup().location]",
        "properties": {
          "defaultSecurityRules": [
            {
              "name": "AllowVnetInBound",
              "properties": {
                "description": "Allow inbound traffic from all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "80,443",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Inbound"
              }
            },
            {
              "name": "DenyAllInBound",
              "properties": {
                "description": "Deny all inbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowVnetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Outbound"
              }
            },
            {
              "name": "AllowInternetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to Internet",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "Internet",
                "access": "Allow",
                "priority": 65001,
                "direction": "Outbound"
              }
            },
            {
              "name": "DenyAllOutBound",
              "properties": {
                "description": "Deny all outbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Outbound"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.KeyVault/vaults",
        "apiVersion": "2019-09-01",
        "name": "sasappKeyVault",
        "location": "[resourceGroup().location]",
        "properties": {
          "enabledForDeployment": true,
          "enabledForDiskEncryption": false,
          "enabledForTemplateDeployment": true,
          "enableSoftDelete": false,
          "tenantId": "[subscription().tenantId]",
          "accessPolicies": [
            {
              "objectId": "GEN-AZUREAD-OBJECTID",
              "tenantId": "[subscription().tenantId]",
              "permissions": {
                "keys": [
                  "get",
                  "list",
                  "import"
                ],
                "secrets": [
                  "get",
                  "list",
                  "set"
                ]
              }
            }
          ],
          "sku": {
            "name": "standard",
            "family": "A"
          },
          "networkAcls": {
            "defaultAction": "Allow",
            "bypass": "AzureServices"
          }
        }
      },
      {
        "type": "Microsoft.KeyVault/vaults/secrets",
        "apiVersion": "2019-09-01",
        "name": "sasappKeyVault/sasintpw",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.KeyVault/vaults/sasappKeyVault"
        ],
        "properties": {
          "value": "GEN-PASSWORD"
        }
      },
      {
        "type": "Microsoft.KeyVault/vaults/secrets",
        "apiVersion": "2019-09-01",
        "name": "sasappKeyVault/sasextpw",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.KeyVault/vaults/sasappKeyVault"
        ],
        "properties": {
          "value": "GEN-PASSWORD"
        }
      },
      {
        "type": "Microsoft.KeyVault/vaults/secrets",
        "apiVersion": "2019-09-01",
        "name": "sasappKeyVault/stgacckey",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.KeyVault/vaults/sasappKeyVault"
        ],
        "properties": {
          "value": "kngqtXaNOL8g6ugAspsX9c4ReC+ckjFkcaGB00XEumjTjuhtrDOXqswcP/hm+lr+URpREaobkHWdTihqyvf2aw=="
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2019-04-01",
        "name": "[toLower(concat(parameters('SASApplicationName'),'diag', variables('resourceGroupUniqueString')))]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard_LRS",
          "tier": "Standard"
        },
        "kind": "StorageV2",
        "properties": {
          "networkAcls": {
            "bypass": "AzureServices",
            "defaultAction": "Allow"
          },
          "supportsHttpsTrafficOnly": false,
          "encryption": {
            "services": {
              "file": {
                "enabled": true
              },
              "blob": {
                "enabled": true
              }
            },
            "keySource": "Microsoft.Storage"
          }
        }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2019-09-01",
        "name": "sasapp_ansible_nsg",
        "location": "[resourceGroup().location]",
        "properties": {
          "securityRules": [
            {
              "name": "allow-ssh",
              "properties": {
                "protocol": "TCP",
                "sourcePortRange": "*",
                "destinationPortRange": "22",
                "sourceAddressPrefix": "183.83.137.123",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 1000,
                "direction": "Inbound"
              }
            }
          ],
          "defaultSecurityRules": [
            {
              "name": "AllowVnetInBound",
              "properties": {
                "description": "Allow inbound traffic from all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "80,443",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Inbound"
              }
            },
            {
              "name": "DenyAllInBound",
              "properties": {
                "description": "Deny all inbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowVnetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Outbound"
              }
            },
            {
              "name": "AllowInternetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to Internet",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "Internet",
                "access": "Allow",
                "priority": 65001,
                "direction": "Outbound"
              }
            },
            {
              "name": "DenyAllOutBound",
              "properties": {
                "description": "Deny all outbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Outbound"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2019-09-01",
        "name": "sasapp_meta_nsg",
        "location": "[resourceGroup().location]",
        "properties": {
          "defaultSecurityRules": [
            {
              "name": "AllowVnetInBound",
              "properties": {
                "description": "Allow inbound traffic from all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Inbound"
              }
            },
            {
              "name": "DenyAllInBound",
              "properties": {
                "description": "Deny all inbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowVnetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Outbound"
              }
            },
            {
              "name": "AllowInternetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to the Internet",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "Internet",
                "access": "Allow",
                "priority": 65001,
                "direction": "Outbound"
              }
            },
            {
              "name": "DenyAllOutBound",
              "properties": {
                "description": "Deny all outbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Outbound"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2019-09-01",
        "name": "sasapp_mid_nsg",
        "location": "[resourceGroup().location]",
        "properties": {
          "defaultSecurityRules": [
            {
              "name": "AllowVnetInBound",
              "properties": {
                "description": "Allow inbound traffic from all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Inbound"
              }
            },
            {
              "name": "DenyAllInBound",
              "properties": {
                "description": "Deny all inbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowVnetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Outbound"
              }
            },
            {
              "name": "AllowInternetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to the Internet",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "Internet",
                "access": "Allow",
                "priority": 65001,
                "direction": "Outbound"
              }
            },
            {
              "name": "DenyAllOutBound",
              "properties": {
                "description": "Deny all outbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Outbound"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2019-09-01",
        "name": "sasapp_compute_nsg",
        "location": "[resourceGroup().location]",
        "properties": {
          "defaultSecurityRules": [
            {
              "name": "AllowVnetInBound",
              "properties": {
                "description": "Allow inbound traffic from all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Inbound"
              }
            },
            {
              "name": "DenyAllInBound",
              "properties": {
                "description": "Deny all inbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowVnetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Outbound"
              }
            },
            {
              "name": "AllowInternetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to the Internet",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "Internet",
                "access": "Allow",
                "priority": 65001,
                "direction": "Outbound"
              }
            },
            {
              "name": "DenyAllOutBound",
              "properties": {
                "description": "Deny all outbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Outbound"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2019-09-01",
        "name": "sasapp_rdp_nsg",
        "location": "[resourceGroup().location]",
        "properties": {
          "defaultSecurityRules": [
            {
              "name": "AllowVnetInBound",
              "properties": {
                "description": "Allow inbound traffic from all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Inbound"
              }
            },
            {
              "name": "DenyAllInBound",
              "properties": {
                "description": "Deny all inbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowVnetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Outbound"
              }
            },
            {
              "name": "AllowInternetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to the Internet",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "Internet",
                "access": "Allow",
                "priority": 65001,
                "direction": "Outbound"
              }
            },
            {
              "name": "DenyAllOutBound",
              "properties": {
                "description": "Deny all outbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Outbound"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2019-09-01",
        "name": "sasapp_microservices_nsg",
        "location": "[resourceGroup().location]",
        "properties": {
          "defaultSecurityRules": [
            {
              "name": "AllowVnetInBound",
              "properties": {
                "description": "Allow inbound traffic from all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Inbound"
              }
            },
            {
              "name": "DenyAllInBound",
              "properties": {
                "description": "Deny all inbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowVnetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Outbound"
              }
            },
            {
              "name": "AllowInternetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to the Internet",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "Internet",
                "access": "Allow",
                "priority": 65001,
                "direction": "Outbound"
              }
            },
            {
              "name": "DenyAllOutBound",
              "properties": {
                "description": "Deny all outbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Outbound"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2019-09-01",
        "name": "sasapp_spre_nsg",
        "location": "[resourceGroup().location]",
        "properties": {
          "defaultSecurityRules": [
            {
              "name": "AllowVnetInBound",
              "properties": {
                "description": "Allow inbound traffic from all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Inbound"
              }
            },
            {
              "name": "DenyAllInBound",
              "properties": {
                "description": "Deny all inbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowVnetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Outbound"
              }
            },
            {
              "name": "AllowInternetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to the Internet",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "Internet",
                "access": "Allow",
                "priority": 65001,
                "direction": "Outbound"
              }
            },
            {
              "name": "DenyAllOutBound",
              "properties": {
                "description": "Deny all outbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Outbound"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2019-09-01",
        "name": "sasapp_cascontroller_nsg",
        "location": "[resourceGroup().location]",
        "properties": {
          "defaultSecurityRules": [
            {
              "name": "AllowVnetInBound",
              "properties": {
                "description": "Allow inbound traffic from all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Inbound"
              }
            },
            {
              "name": "DenyAllInBound",
              "properties": {
                "description": "Deny all inbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowVnetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Outbound"
              }
            },
            {
              "name": "AllowInternetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to the Internet",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "Internet",
                "access": "Allow",
                "priority": 65001,
                "direction": "Outbound"
              }
            },
            {
              "name": "DenyAllOutBound",
              "properties": {
                "description": "Deny all outbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Outbound"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2019-09-01",
        "name": "sasapp_casworker_nsg",
        "location": "[resourceGroup().location]",
        "properties": {
          "defaultSecurityRules": [
            {
              "name": "AllowVnetInBound",
              "properties": {
                "description": "Allow inbound traffic from all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "direction": "Inbound"
              }
            },
            {
              "name": "DenyAllInBound",
              "properties": {
                "description": "Deny all inbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowVnetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 65000,
                "direction": "Outbound"
              }
            },
            {
              "name": "AllowInternetOutBound",
              "properties": {
                "description": "Allow outbound traffic from all VMs to the Internet",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "Internet",
                "access": "Allow",
                "priority": 65001,
                "direction": "Outbound"
              }
            },
            {
              "name": "DenyAllOutBound",
              "properties": {
                "description": "Deny all outbound traffic",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 65500,
                "direction": "Outbound"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2019-09-01",
        "name": "sasapp_ansible_pub_nic",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Basic",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAddressVersion": "IPv4",
          "publicIPAllocationMethod": "Static",
          "idleTimeoutInMinutes": 4
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2019-09-01",
        "name": "sasapp_ansible_nic",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/publicIPAddresses/sasapp_ansible_pub_nic",
          "Microsoft.Network/networkSecurityGroups/sasapp_ansible_nsg",
          "Microsoft.Network/virtualNetworks/sasapp_vnet"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "publicIPAddress": {
                  "id": "Microsoft.Network/publicIPAddresses/sasapp_ansible_pub_nic"
                },
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/sasapp_vnet/sasapp_vnet_pub1_subnet"
                },
                "privateIPAddressVersion": "IPv4"
              }
            }
          ],
          "enableAcceleratedNetworking": true,
          "enableIPForwarding": false,
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups/sasapp_ansible_nsg"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2019-07-01",
        "name": "ansible",
        "location": "[resourceGroup().location]",
        "identity": {
          "type": "SystemAssigned"
        },
        "dependsOn": [
          "Microsoft.Network/networkInterfaces/sasapp_ansible_nic",
          "Microsoft.Storage/storageAccounts/[toLower(concat(parameters('SASApplicationName'),'diag', variables('resourceGroupUniqueString')))]",
          "Microsoft.KeyVault/vaults/sasappKeyVault"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_D4s_v3"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "RedHat",
              "offer": "RHEL",
              "sku": "7.7",
              "version": "latest"
            },
            "osDisk": {
              "osType": "Linux",
              "name": "ansible-osdisk",
              "createOption": "FromImage",
              "caching": "ReadWrite",
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              },
              "diskSizeGB": 64
            },
            "dataDisks": [
              {
                "name": "ansible-playbook",
                "diskSizeGB": 50,
                "lun": 0,
                "createOption": "Empty"
              }
            ]
          },
          "osProfile": {
            "computerName": "ansible",
            "adminUsername": "GEN-UNIQUE",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "/home/GEN-UNIQUE/.ssh/authorized_keys",
                    "keyData": "GEN-SSH-PUB-KEY"
                  }
                ]
              }
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/sasapp_ansible_nic"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(variables('diagnostic_storagegroup_name')).primaryEndpoints.blob]"
            }
          },
          "proximityPlacementGroup": {
            "id": "Microsoft.Compute/proximityPlacementGroups/sasapp_ppg_[uniqueString(resourceGroup().id)]"
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "AnsibleRoleAssignment",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/ansible",
          "Microsoft.Resources/deployments/AnsibleAccessPolicy"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/role_assignments.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "roleAssignmentName": {
              "value": "[guid(resourceId('Microsoft.Compute/virtualMachines', variables('ansible_vm_name')), variables('reader_role'), variables('rbacPrincipalID'))]"
            },
            "roleDefinitionID": {
              "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
            },
            "principalId": {
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('ansible_vm_name')),'2019-07-01','Full').identity.principalId]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "AnsibleAccessPolicy",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/ansible",
          "Microsoft.KeyVault/vaults/sasappKeyVault"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/access_policy.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "keyVaultName": {
              "value": "sasappKeyVault"
            },
            "tenantId": {
              "value": "[subscription().tenantId]"
            },
            "objectId": {
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('ansible_vm_name')),'2019-12-01', 'Full').identity.principalId]"
            },
            "secretsPermissions": {
              "value": [
                "get",
                "list",
                "set"
              ]
            },
            "keysPermissions": {
              "value": [
                "get",
                "list",
                "import"
              ]
            },
            "certificatesPermissions": {
              "value": [
                "import",
                "get",
                "list"
              ]
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase1-AnsibleHostSetup",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/ansible",
          "Microsoft.Resources/deployments/AnsibleAccessPolicy"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "ansible"
            },
            "commandToExecute": {
              "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./ansible_setup.sh',' ',parameters('storageAccountName'),' ',parameters('fileShareName'),' ',parameters('viyaRepoFolder'),' ',parameters('SASApplicationName'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberOfViyaCASNodes'),' ',variables('mid_vm_name'),' ',parameters('_artifactsLocation'),' ',variables('compute_vm_name'),' ',variables('meta_vm_name'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runPhase1_HostSetup.log')]"
            },
            "filepath": {
              "value": "scripts/ansible_setup.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase2-AnsibleSSLCopy",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/ansible",
          "Microsoft.Resources/deployments/Phase2-MetaInstall",
          "Microsoft.Resources/deployments/Phase2-MidInstall",
          "Microsoft.Resources/deployments/Phase2-ComputeInstall",
          "Microsoft.Resources/deployments/Phase4-ViyaInstallpart2"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "ansible"
            },
            "commandToExecute": {
              "value": "set -o pipefail;./ansible_ssl.sh 2>&1 | tee /var/log/sas/install/runPhase2AnsibleSSLCopy.log;"
            },
            "filepath": {
              "value": "scripts/ansible_ssl.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase3-ViyaInstallpart1",
        "dependsOn": [
          "Microsoft.Resources/deployments/Phase1-AnsibleHostSetup",
          "Microsoft.Resources/deployments/Phase2-MicroServicesViyaARK",
          "Microsoft.Resources/deployments/Phase2-SpreViyaARK",
          "Microsoft.Resources/deployments/Phase2-CASControllerViyaARK",
          "casworkerviyaarkcopy"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "ansible"
            },
            "commandToExecute": {
              "value": "set -o pipefail;./viyainstall.sh 1 2>&1 | tee /var/log/sas/install/runPhase3_viyainstallpart1.log"
            },
            "filepath": {
              "value": "scripts/viyainstall.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase4-ViyaInstallpart2",
        "dependsOn": [
          "Microsoft.Resources/deployments/Phase3-ViyaInstallpart1"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "ansible"
            },
            "commandToExecute": {
              "value": "set -o pipefail;./viyainstall.sh 2 2>&1 | tee /var/log/sas/install/runPhase4_viyainstallpart2.log"
            },
            "filepath": {
              "value": "scripts/viyainstall.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase5-ViyaInstallpart3",
        "dependsOn": [
          "Microsoft.Resources/deployments/Phase2-AnsibleSSLCopy"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "ansible"
            },
            "commandToExecute": {
              "value": "set -o pipefail;./viyainstall.sh 3 2>&1 | tee /var/log/sas/install/runPhase5_viyainstallpart3.log"
            },
            "filepath": {
              "value": "scripts/viyainstall.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase6-ViyaPostInstall",
        "dependsOn": [
          "Microsoft.Resources/deployments/Phase5-ViyaInstallpart3"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "ansible"
            },
            "commandToExecute": {
              "value": "set -o pipefail;./viyainstall.sh 4 2>&1 | tee /var/log/sas/install/runPhase6_viyapostinstall.log"
            },
            "filepath": {
              "value": "scripts/viyainstall.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2019-09-01",
        "name": "sasapp_rdp_nic",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/networkSecurityGroups/sasapp_rdp_nsg",
          "Microsoft.Network/virtualNetworks/sasapp_vnet"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/sasapp_vnet/sasapp_vnet_pvt1_subnet"
                },
                "privateIPAddressVersion": "IPv4"
              }
            }
          ],
          "enableAcceleratedNetworking": true,
          "enableIPForwarding": false,
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups/sasapp_rdp_nsg"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2019-07-01",
        "name": "rdp",
        "location": "[resourceGroup().location]",
        "identity": {
          "type": "SystemAssigned"
        },
        "dependsOn": [
          "Microsoft.Network/networkInterfaces/sasapp_rdp_nic",
          "Microsoft.Storage/storageAccounts/[toLower(concat(parameters('SASApplicationName'),'diag', variables('resourceGroupUniqueString')))]"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_D8S_v3"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "MicrosoftWindowsServer",
              "offer": "WindowsServer",
              "sku": "2019-Datacenter",
              "version": "latest"
            },
            "osDisk": {
              "createOption": "FromImage"
            }
          },
          "osProfile": {
            "computerName": "rdp",
            "adminUsername": "GEN-UNIQUE",
            "adminPassword": "GEN-PASSWORD"
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/sasapp_rdp_nic"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(variables('diagnostic_storagegroup_name')).primaryEndpoints.blob]"
            }
          },
          "proximityPlacementGroup": {
            "id": "Microsoft.Compute/proximityPlacementGroups/sasapp_ppg_[uniqueString(resourceGroup().id)]"
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "RDPContentFileDownload",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/rdp"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_windows_extension.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "rdp"
            },
            "commandToExecute": {
              "value": "powershell.exe Expand-Archive -LiteralPath client_install.zip -Destination C:\\WindowsAzure\\client_install"
            },
            "filepath": {
              "value": "client_install.zip"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase1-SASClientInstall",
        "dependsOn": [
          "Microsoft.Resources/deployments/RDPContentFileDownload"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_windows_extension.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "rdp"
            },
            "commandToExecute": {
              "value": "[concat('powershell -ExecutionPolicy Unrestricted -File sas_client_install.ps1 ','-stg_acc_name ',parameters('storageAccountName'),' -stg_key ',parameters('storageAccountKey'),' -file_share_name ',parameters('fileShareName'),' -depot_folder_name ',parameters('SASDepotFolder'),' -clients_sid ',parameters('SASServerLicenseFile'),' -app_name ',parameters('SASApplicationName'),' -mid_name ',variables('mid_vm_name'),' -domain_name ',variables('domain_name'),' -artifact_loc ',parameters('_artifactsLocation'),' -storageuri ',variables('storage_account_uri'))]"
            },
            "filepath": {
              "value": "sas_client_install.ps1"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2019-09-01",
        "name": "sasapp_meta_nic",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/networkSecurityGroups/sasapp_meta_nsg",
          "Microsoft.Network/virtualNetworks/sasapp_vnet"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/sasapp_vnet/sasapp_vnet_pvt1_subnet"
                },
                "privateIPAddressVersion": "IPv4"
              }
            }
          ],
          "enableAcceleratedNetworking": true,
          "enableIPForwarding": false,
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups/sasapp_meta_nsg"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2019-07-01",
        "name": "meta",
        "location": "[resourceGroup().location]",
        "identity": {
          "type": "SystemAssigned"
        },
        "dependsOn": [
          "Microsoft.Network/networkInterfaces/sasapp_meta_nic",
          "Microsoft.Storage/storageAccounts/[toLower(concat(parameters('SASApplicationName'),'diag', variables('resourceGroupUniqueString')))]"
        ],
        "tags": {
          "Application": "sasapp",
          "Component": "SAS94NonGrid"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_D4s_v3"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "RedHat",
              "offer": "RHEL",
              "sku": "7.7",
              "version": "latest"
            },
            "osDisk": {
              "osType": "Linux",
              "name": "meta-osdisk",
              "createOption": "FromImage",
              "caching": "ReadWrite",
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              },
              "diskSizeGB": 128
            },
            "dataDisks": [
              {
                "name": "meta-opt-sas",
                "diskSizeGB": 128,
                "lun": 0,
                "createOption": "Empty"
              }
            ]
          },
          "osProfile": {
            "computerName": "meta",
            "adminUsername": "GEN-UNIQUE",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "/home/GEN-UNIQUE/.ssh/authorized_keys",
                    "keyData": "GEN-SSH-PUB-KEY"
                  }
                ]
              }
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/sasapp_meta_nic"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(variables('diagnostic_storagegroup_name')).primaryEndpoints.blob]"
            }
          },
          "proximityPlacementGroup": {
            "id": "Microsoft.Compute/proximityPlacementGroups/sasapp_ppg_[uniqueString(resourceGroup().id)]"
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "MetaRoleAssignment",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/meta"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/role_assignments.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "roleAssignmentName": {
              "value": "[guid(resourceId('Microsoft.Compute/virtualMachines', variables('meta_vm_name')), variables('reader_role'), variables('rbacPrincipalID'))]"
            },
            "roleDefinitionID": {
              "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
            },
            "principalId": {
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('meta_vm_name')),'2019-07-01','Full').identity.principalId]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "MetaAccessPolicy",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/meta",
          "Microsoft.KeyVault/vaults/sasappKeyVault",
          "[resourceID('Microsoft.Resources/deployments','AnsibleAccessPolicy')]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/access_policy.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "keyVaultName": {
              "value": "sasappKeyVault"
            },
            "tenantId": {
              "value": "[subscription().tenantId]"
            },
            "objectId": {
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('meta_vm_name')),'2019-12-01', 'Full').identity.principalId]"
            },
            "secretsPermissions": {
              "value": [
                "get",
                "list",
                "set"
              ]
            },
            "keysPermissions": {
              "value": [
                "get",
                "list",
                "import"
              ]
            },
            "certificatesPermissions": {
              "value": [
                "import",
                "get",
                "list"
              ]
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase1-MetaHostSetup",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/meta",
          "Microsoft.Resources/deployments/MetaAccessPolicy"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "meta"
            },
            "commandToExecute": {
              "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('SASApplicationName'),' ',parameters('SASDepotFolder'),' ',parameters('fileShareName'),' ',parameters('storageAccountName'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('SASServerLicenseFile'),' ','meta',' ',parameters('_artifactsLocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runPhase1_HostSetup.log')]"
            },
            "filepath": {
              "value": "scripts/sasapp_prereq.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "MetaContentFileDownload",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/meta",
          "Microsoft.Resources/deployments/Phase1-MetaHostSetup"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "meta"
            },
            "commandToExecute": {
              "value": "cp response-properties.tar.gz /tmp"
            },
            "filepath": {
              "value": "properties/response-properties.tar.gz"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase2-MetaInstall",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/meta",
          "Microsoft.Resources/deployments/MetaContentFileDownload",
          "Microsoft.Resources/deployments/Phase1-AnsibleHostSetup"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "meta"
            },
            "commandToExecute": {
              "value": "set -o pipefail;./meta_install.sh 2>&1 | tee /var/log/sas/install/meta_install.log"
            },
            "filepath": {
              "value": "scripts/meta_install.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase3-MetaConfig",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/meta",
          "Microsoft.Resources/deployments/Phase2-MetaInstall",
          "Microsoft.Resources/deployments/Phase2-AnsibleSSLCopy"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "meta"
            },
            "commandToExecute": {
              "value": "set -o pipefail;./meta_config.sh 2>&1 | tee /var/log/sas/install/meta_config.log"
            },
            "filepath": {
              "value": "scripts/meta_config.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2019-09-01",
        "name": "sasapp_compute_nic",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/networkSecurityGroups/sasapp_compute_nsg",
          "Microsoft.Network/virtualNetworks/sasapp_vnet"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/sasapp_vnet/sasapp_vnet_pvt1_subnet"
                },
                "privateIPAddressVersion": "IPv4"
              }
            }
          ],
          "enableAcceleratedNetworking": true,
          "enableIPForwarding": false,
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups/sasapp_compute_nsg"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2019-07-01",
        "name": "compute",
        "location": "[resourceGroup().location]",
        "identity": {
          "type": "SystemAssigned"
        },
        "dependsOn": [
          "Microsoft.Network/networkInterfaces/sasapp_compute_nic",
          "Microsoft.Storage/storageAccounts/[toLower(concat(parameters('SASApplicationName'),'diag', variables('resourceGroupUniqueString')))]"
        ],
        "tags": {
          "Application": "sasapp",
          "Component": "SAS94NonGrid"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_E8s_v3"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "RedHat",
              "offer": "RHEL",
              "sku": "7.7",
              "version": "latest"
            },
            "osDisk": {
              "osType": "Linux",
              "name": "compute-osdisk",
              "createOption": "FromImage",
              "caching": "ReadWrite",
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              },
              "diskSizeGB": 128
            },
            "dataDisks": [
              {
                "name": "compute-opt-sas",
                "diskSizeGB": 128,
                "lun": 0,
                "createOption": "Empty"
              },
              {
                "name": "compute-sasdata",
                "diskSizeGB": 100,
                "lun": 1,
                "createOption": "Empty"
              }
            ]
          },
          "osProfile": {
            "computerName": "compute",
            "adminUsername": "GEN-UNIQUE",
            "customData": "[base64(variables('custom_data_sas'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "/home/GEN-UNIQUE/.ssh/authorized_keys",
                    "keyData": "GEN-SSH-PUB-KEY"
                  }
                ]
              }
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/sasapp_compute_nic"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(variables('diagnostic_storagegroup_name')).primaryEndpoints.blob]"
            }
          },
          "proximityPlacementGroup": {
            "id": "Microsoft.Compute/proximityPlacementGroups/sasapp_ppg_[uniqueString(resourceGroup().id)]"
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "ComputeRoleAssignment",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/compute"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/role_assignments.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "roleAssignmentName": {
              "value": "[guid(resourceId('Microsoft.Compute/virtualMachines', variables('compute_vm_name')), variables('reader_role'), variables('rbacPrincipalID'))]"
            },
            "roleDefinitionID": {
              "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
            },
            "principalId": {
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('compute_vm_name')),'2019-07-01','Full').identity.principalId]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "ComputeAccessPolicy",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/compute",
          "[resourceID('Microsoft.Resources/deployments','MetaAccessPolicy')]",
          "Microsoft.KeyVault/vaults/sasappKeyVault"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/access_policy.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "keyVaultName": {
              "value": "sasappKeyVault"
            },
            "tenantId": {
              "value": "[subscription().tenantId]"
            },
            "objectId": {
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('compute_vm_name')),'2019-12-01', 'Full').identity.principalId]"
            },
            "secretsPermissions": {
              "value": [
                "get",
                "list",
                "set"
              ]
            },
            "keysPermissions": {
              "value": [
                "get",
                "list",
                "import"
              ]
            },
            "certificatesPermissions": {
              "value": [
                "import",
                "get",
                "list"
              ]
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase1-ComputeHostSetup",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/compute",
          "Microsoft.Resources/deployments/ComputeAccessPolicy"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "compute"
            },
            "commandToExecute": {
              "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('SASApplicationName'),' ',parameters('SASDepotFolder'),' ',parameters('fileShareName'),' ',parameters('storageAccountName'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('SASServerLicenseFile'),' ','compute',' ',parameters('_artifactsLocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runPhase1_HostSetup.log')]"
            },
            "filepath": {
              "value": "scripts/sasapp_prereq.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "ComputeContentFileDownload",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/compute",
          "Microsoft.Resources/deployments/Phase1-ComputeHostSetup"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "compute"
            },
            "commandToExecute": {
              "value": "cp response-properties.tar.gz /tmp"
            },
            "filepath": {
              "value": "properties/response-properties.tar.gz"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase2-ComputeInstall",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/compute",
          "Microsoft.Resources/deployments/ComputeContentFileDownload",
          "Microsoft.Resources/deployments/Phase1-AnsibleHostSetup"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "compute"
            },
            "commandToExecute": {
              "value": "set -o pipefail;./compute_install.sh 2>&1 | tee /var/log/sas/install/compute_install.log"
            },
            "filepath": {
              "value": "scripts/compute_install.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase3-ComputeConfig",
        "dependsOn": [
          "Microsoft.Resources/deployments/Phase2-ComputeInstall",
          "Microsoft.Resources/deployments/Phase3-MetaConfig"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "compute"
            },
            "commandToExecute": {
              "value": "set -o pipefail;./compute_config.sh 2>&1 | tee /var/log/sas/install/compute_config.log"
            },
            "filepath": {
              "value": "scripts/compute_config.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2019-09-01",
        "name": "sasapp_mid_nic",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/networkSecurityGroups/sasapp_mid_nsg",
          "Microsoft.Network/virtualNetworks/sasapp_vnet"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/sasapp_vnet/sasapp_vnet_pvt1_subnet"
                },
                "privateIPAddressVersion": "IPv4"
              }
            }
          ],
          "enableAcceleratedNetworking": true,
          "enableIPForwarding": false,
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups/sasapp_mid_nsg"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2019-07-01",
        "name": "mid",
        "location": "[resourceGroup().location]",
        "identity": {
          "type": "SystemAssigned"
        },
        "dependsOn": [
          "Microsoft.Network/networkInterfaces/sasapp_mid_nic",
          "Microsoft.Storage/storageAccounts/[toLower(concat(parameters('SASApplicationName'),'diag', variables('resourceGroupUniqueString')))]"
        ],
        "tags": {
          "Application": "sasapp",
          "Component": "SAS94NonGrid"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_E8s_v3"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "RedHat",
              "offer": "RHEL",
              "sku": "7.7",
              "version": "latest"
            },
            "osDisk": {
              "osType": "Linux",
              "name": "mid-osdisk",
              "createOption": "FromImage",
              "caching": "ReadWrite",
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              },
              "diskSizeGB": 128
            },
            "dataDisks": [
              {
                "name": "mid-opt-sas",
                "diskSizeGB": 128,
                "lun": 0,
                "createOption": "Empty"
              }
            ]
          },
          "osProfile": {
            "computerName": "mid",
            "adminUsername": "GEN-UNIQUE",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "/home/GEN-UNIQUE/.ssh/authorized_keys",
                    "keyData": "GEN-SSH-PUB-KEY"
                  }
                ]
              }
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/sasapp_mid_nic"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(variables('diagnostic_storagegroup_name')).primaryEndpoints.blob]"
            }
          },
          "proximityPlacementGroup": {
            "id": "Microsoft.Compute/proximityPlacementGroups/sasapp_ppg_[uniqueString(resourceGroup().id)]"
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "MidRoleAssignment",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/mid"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/role_assignments.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "roleAssignmentName": {
              "value": "[guid(resourceId('Microsoft.Compute/virtualMachines', variables('mid_vm_name')), variables('reader_role'), variables('rbacPrincipalID'))]"
            },
            "roleDefinitionID": {
              "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
            },
            "principalId": {
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('mid_vm_name')),'2019-07-01','Full').identity.principalId]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "MidAccessPolicy",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/mid",
          "[resourceID('Microsoft.Resources/deployments','ComputeAccessPolicy')]",
          "Microsoft.KeyVault/vaults/sasappKeyVault"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/access_policy.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "keyVaultName": {
              "value": "sasappKeyVault"
            },
            "tenantId": {
              "value": "[subscription().tenantId]"
            },
            "objectId": {
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('mid_vm_name')),'2019-12-01', 'Full').identity.principalId]"
            },
            "secretsPermissions": {
              "value": [
                "get",
                "list",
                "set"
              ]
            },
            "keysPermissions": {
              "value": [
                "get",
                "list",
                "import"
              ]
            },
            "certificatesPermissions": {
              "value": [
                "import",
                "get",
                "list"
              ]
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase1-MidHostSetup",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/mid",
          "Microsoft.Resources/deployments/MidAccessPolicy"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "mid"
            },
            "commandToExecute": {
              "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./sasapp_prereq.sh',' ',parameters('SASApplicationName'),' ',parameters('SASDepotFolder'),' ',parameters('fileShareName'),' ',parameters('storageAccountName'),' ',variables('domain_name'),' ',parameters('location'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',variables('mid_vm_name'),' ',variables('meta_vm_name'),' ',variables('compute_vm_name'),' ',parameters('SASServerLicenseFile'),' ','mid',' ',parameters('_artifactsLocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runPhase1_HostSetup.log')]"
            },
            "filepath": {
              "value": "scripts/sasapp_prereq.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "MidContentFileDownload",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/mid",
          "Microsoft.Resources/deployments/Phase1-MidHostSetup"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "mid"
            },
            "commandToExecute": {
              "value": "cp response-properties.tar.gz /tmp"
            },
            "filepath": {
              "value": "properties/response-properties.tar.gz"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase2-MidInstall",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/mid",
          "Microsoft.Resources/deployments/MidContentFileDownload",
          "Microsoft.Resources/deployments/Phase1-AnsibleHostSetup"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "mid"
            },
            "commandToExecute": {
              "value": "set -o pipefail;./mid_install.sh 2>&1 | tee /var/log/sas/install/mid-install.log"
            },
            "filepath": {
              "value": "scripts/mid_install.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase3-MidConfig",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/mid",
          "Microsoft.Resources/deployments/Phase2-MidInstall",
          "Microsoft.Resources/deployments/Phase3-ComputeConfig"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "mid"
            },
            "commandToExecute": {
              "value": "set -o pipefail;./mid_config.sh 2>&1 | tee /var/log/sas/install/mid_config.log"
            },
            "filepath": {
              "value": "scripts/mid_config.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2019-09-01",
        "name": "sasapp_microservices_nic",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/networkSecurityGroups/sasapp_microservices_nsg",
          "Microsoft.Network/virtualNetworks/sasapp_vnet"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/sasapp_vnet/sasapp_vnet_pvt2_subnet"
                },
                "privateIPAddressVersion": "IPv4"
              }
            }
          ],
          "enableAcceleratedNetworking": true,
          "enableIPForwarding": false,
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups/sasapp_microservices_nsg"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2019-07-01",
        "name": "microservices",
        "location": "[resourceGroup().location]",
        "identity": {
          "type": "SystemAssigned"
        },
        "dependsOn": [
          "Microsoft.Network/networkInterfaces/sasapp_microservices_nic",
          "Microsoft.Storage/storageAccounts/[toLower(concat(parameters('SASApplicationName'),'diag', variables('resourceGroupUniqueString')))]"
        ],
        "tags": {
          "Application": "sasapp",
          "Component": "SASViya"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_E16s_v3"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "RedHat",
              "offer": "RHEL",
              "sku": "7.7",
              "version": "latest"
            },
            "osDisk": {
              "osType": "Linux",
              "name": "microservices-osdisk",
              "createOption": "FromImage",
              "caching": "ReadWrite",
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              },
              "diskSizeGB": 128
            },
            "dataDisks": [
              {
                "name": "microservices-opt-sas",
                "diskSizeGB": 128,
                "lun": 0,
                "createOption": "Empty"
              },
              {
                "name": "microservices-sasbackup",
                "diskSizeGB": 100,
                "lun": 1,
                "createOption": "Empty"
              }
            ]
          },
          "osProfile": {
            "computerName": "microservices",
            "adminUsername": "GEN-UNIQUE",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "/home/GEN-UNIQUE/.ssh/authorized_keys",
                    "keyData": "GEN-SSH-PUB-KEY"
                  }
                ]
              }
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/sasapp_microservices_nic"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(variables('diagnostic_storagegroup_name')).primaryEndpoints.blob]"
            }
          },
          "proximityPlacementGroup": {
            "id": "Microsoft.Compute/proximityPlacementGroups/sasapp_ppg_[uniqueString(resourceGroup().id)]"
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "MicroServicesRoleAssignment",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/microservices"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/role_assignments.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "roleAssignmentName": {
              "value": "[guid(resourceId('Microsoft.Compute/virtualMachines', variables('microservices_vm_name')), variables('reader_role'), variables('rbacPrincipalID'))]"
            },
            "roleDefinitionID": {
              "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
            },
            "principalId": {
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('microservices_vm_name')),'2019-07-01','Full').identity.principalId]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "MicroServicesAccessPolicy",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/microservices",
          "Microsoft.KeyVault/vaults/sasappKeyVault",
          "[resourceID('Microsoft.Resources/deployments','MidAccessPolicy')]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/access_policy.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "keyVaultName": {
              "value": "sasappKeyVault"
            },
            "tenantId": {
              "value": "[subscription().tenantId]"
            },
            "objectId": {
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('microservices_vm_name')),'2019-12-01', 'Full').identity.principalId]"
            },
            "secretsPermissions": {
              "value": [
                "get",
                "list",
                "set"
              ]
            },
            "keysPermissions": {
              "value": [
                "get",
                "list",
                "import"
              ]
            },
            "certificatesPermissions": {
              "value": [
                "import",
                "get",
                "list"
              ]
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase1-MicroServicesHostSetup",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/microservices",
          "Microsoft.Resources/deployments/MicroServicesAccessPolicy"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "microservices"
            },
            "commandToExecute": {
              "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storageAccountName'),' ',parameters('fileShareName'),' ',parameters('viyaRepoFolder'),' ',parameters('SASApplicationName'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberOfViyaCASNodes'),' ',parameters('_artifactsLocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runPhase1_HostSetup.log')]"
            },
            "filepath": {
              "value": "scripts/viya_prereq.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "MicroServicesContentFileDownload",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/microservices",
          "Microsoft.Resources/deployments/Phase1-MicroServicesHostSetup"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "microservices"
            },
            "commandToExecute": {
              "value": "cp viya-ark.tar.gz /tmp"
            },
            "filepath": {
              "value": "properties/viya-ark.tar.gz"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase2-MicroServicesViyaARK",
        "dependsOn": [
          "Microsoft.Resources/deployments/MicroServicesContentFileDownload",
          "Microsoft.Resources/deployments/Phase1-AnsibleHostSetup"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "microservices"
            },
            "commandToExecute": {
              "value": "set -o pipefail;./viya_ark.sh 2>&1 | tee /var/log/sas/install/runPhase2_viyaark.log"
            },
            "filepath": {
              "value": "scripts/viya_ark.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2019-09-01",
        "name": "sasapp_spre_nic",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/networkSecurityGroups/sasapp_spre_nsg",
          "Microsoft.Network/virtualNetworks/sasapp_vnet"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/sasapp_vnet/sasapp_vnet_pvt2_subnet"
                },
                "privateIPAddressVersion": "IPv4"
              }
            }
          ],
          "enableAcceleratedNetworking": true,
          "enableIPForwarding": false,
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups/sasapp_spre_nsg"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2019-07-01",
        "name": "spre",
        "location": "[resourceGroup().location]",
        "identity": {
          "type": "SystemAssigned"
        },
        "dependsOn": [
          "Microsoft.Network/networkInterfaces/sasapp_spre_nic",
          "Microsoft.Storage/storageAccounts/[toLower(concat(parameters('SASApplicationName'),'diag', variables('resourceGroupUniqueString')))]"
        ],
        "tags": {
          "Application": "sasapp",
          "Component": "SASViya"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_E8s_v3"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "RedHat",
              "offer": "RHEL",
              "sku": "7.7",
              "version": "latest"
            },
            "osDisk": {
              "osType": "Linux",
              "name": "spre-osdisk",
              "createOption": "FromImage",
              "caching": "ReadWrite",
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              },
              "diskSizeGB": 128
            },
            "dataDisks": [
              {
                "name": "spre-opt-sas",
                "diskSizeGB": 128,
                "lun": 0,
                "createOption": "Empty"
              },
              {
                "name": "spre-sasbackup",
                "diskSizeGB": 100,
                "lun": 1,
                "createOption": "Empty"
              }
            ]
          },
          "osProfile": {
            "computerName": "spre",
            "adminUsername": "GEN-UNIQUE",
            "customData": "[base64(variables('custom_data_sas'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "/home/GEN-UNIQUE/.ssh/authorized_keys",
                    "keyData": "GEN-SSH-PUB-KEY"
                  }
                ]
              }
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/sasapp_spre_nic"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(variables('diagnostic_storagegroup_name')).primaryEndpoints.blob]"
            }
          },
          "proximityPlacementGroup": {
            "id": "Microsoft.Compute/proximityPlacementGroups/sasapp_ppg_[uniqueString(resourceGroup().id)]"
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "SpreRoleAssignment",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/spre"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/role_assignments.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "roleAssignmentName": {
              "value": "[guid(resourceId('Microsoft.Compute/virtualMachines', variables('spre_vm_name')), variables('reader_role'), variables('rbacPrincipalID'))]"
            },
            "roleDefinitionID": {
              "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
            },
            "principalId": {
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('spre_vm_name')),'2019-07-01','Full').identity.principalId]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "SpreAccessPolicy",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/spre",
          "Microsoft.KeyVault/vaults/sasappKeyVault",
          "[resourceID('Microsoft.Resources/deployments','CAScontrollerAccessPolicy')]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/access_policy.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "keyVaultName": {
              "value": "sasappKeyVault"
            },
            "tenantId": {
              "value": "[subscription().tenantId]"
            },
            "objectId": {
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('spre_vm_name')),'2019-12-01', 'Full').identity.principalId]"
            },
            "secretsPermissions": {
              "value": [
                "get",
                "list",
                "set"
              ]
            },
            "keysPermissions": {
              "value": [
                "get",
                "list",
                "import"
              ]
            },
            "certificatesPermissions": {
              "value": [
                "import",
                "get",
                "list"
              ]
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase1-SpreHostSetup",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/spre",
          "Microsoft.Resources/deployments/SpreAccessPolicy"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "spre"
            },
            "commandToExecute": {
              "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storageAccountName'),' ',parameters('fileShareName'),' ',parameters('fileShareName'),' ',parameters('SASApplicationName'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberOfViyaCASNodes'),' ',parameters('_artifactsLocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runPhase1_HostSetup.log')]"
            },
            "filepath": {
              "value": "scripts/viya_prereq.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "SpreContentFileDownload",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/spre",
          "Microsoft.Resources/deployments/Phase1-SpreHostSetup"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "spre"
            },
            "commandToExecute": {
              "value": "cp viya-ark.tar.gz /tmp"
            },
            "filepath": {
              "value": "properties/viya-ark.tar.gz"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase2-SpreViyaARK",
        "dependsOn": [
          "Microsoft.Resources/deployments/SpreContentFileDownload",
          "Microsoft.Resources/deployments/Phase1-AnsibleHostSetup"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "spre"
            },
            "commandToExecute": {
              "value": "set -o pipefail;./viya_ark.sh 2>&1 | tee /var/log/sas/install/runPhase2_viyaark.log"
            },
            "filepath": {
              "value": "scripts/viya_ark.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2019-09-01",
        "name": "sasapp_cascontroller_nic",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/networkSecurityGroups/sasapp_cascontroller_nsg",
          "Microsoft.Network/virtualNetworks/sasapp_vnet"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/sasapp_vnet/sasapp_vnet_pvt2_subnet"
                },
                "privateIPAddressVersion": "IPv4"
              }
            }
          ],
          "enableAcceleratedNetworking": true,
          "enableIPForwarding": false,
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups/sasapp_cascontroller_nsg"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2019-07-01",
        "name": "Cascontroller_vm_name",
        "location": "[resourceGroup().location]",
        "identity": {
          "type": "SystemAssigned"
        },
        "dependsOn": [
          "Microsoft.Network/networkInterfaces/sasapp_cascontroller_nic",
          "Microsoft.Storage/storageAccounts/[toLower(concat(parameters('SASApplicationName'),'diag', variables('resourceGroupUniqueString')))]"
        ],
        "tags": {
          "Application": "sasapp",
          "Component": "SASViya"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_E8s_v3"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "RedHat",
              "offer": "RHEL",
              "sku": "7.7",
              "version": "latest"
            },
            "osDisk": {
              "osType": "Linux",
              "name": "cascontroller-osdisk",
              "createOption": "FromImage",
              "caching": "ReadWrite",
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              },
              "diskSizeGB": 128
            },
            "dataDisks": [
              {
                "name": "cascontroller-opt-sas",
                "diskSizeGB": 128,
                "lun": 0,
                "createOption": "Empty"
              },
              {
                "name": "cascontroller-sasbackup",
                "diskSizeGB": 100,
                "lun": 1,
                "createOption": "Empty"
              },
              {
                "name": "cascontroller-sasdata",
                "diskSizeGB": 100,
                "lun": 2,
                "createOption": "Empty"
              }
            ]
          },
          "osProfile": {
            "computerName": "Cascontroller_vm_name",
            "adminUsername": "GEN-UNIQUE",
            "customData": "[base64(variables('custom_data_cas'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "/home/GEN-UNIQUE/.ssh/authorized_keys",
                    "keyData": "GEN-SSH-PUB-KEY"
                  }
                ]
              }
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/sasapp_cascontroller_nic"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(variables('diagnostic_storagegroup_name')).primaryEndpoints.blob]"
            }
          },
          "proximityPlacementGroup": {
            "id": "Microsoft.Compute/proximityPlacementGroups/sasapp_ppg_[uniqueString(resourceGroup().id)]"
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "CASControllerRoleAssignment",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/Cascontroller_vm_name"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/role_assignments.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "roleAssignmentName": {
              "value": "[guid(resourceId('Microsoft.Compute/virtualMachines', variables('Cascontroller_vm_name')), variables('reader_role'), variables('rbacPrincipalID'))]"
            },
            "roleDefinitionID": {
              "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
            },
            "principalId": {
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('Cascontroller_vm_name')),'2019-07-01','Full').identity.principalId]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "CASControllerAccessPolicy",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/Cascontroller_vm_name",
          "[resourceID('Microsoft.Resources/deployments','MicroServicesAccessPolicy')]",
          "Microsoft.KeyVault/vaults/sasappKeyVault"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/access_policy.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "keyVaultName": {
              "value": "sasappKeyVault"
            },
            "tenantId": {
              "value": "[subscription().tenantId]"
            },
            "objectId": {
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',variables('Cascontroller_vm_name')),'2019-12-01', 'Full').identity.principalId]"
            },
            "secretsPermissions": {
              "value": [
                "get",
                "list",
                "set"
              ]
            },
            "keysPermissions": {
              "value": [
                "get",
                "list",
                "import"
              ]
            },
            "certificatesPermissions": {
              "value": [
                "import",
                "get",
                "list"
              ]
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase1-CASControllerHostSetup",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/Cascontroller_vm_name",
          "Microsoft.Resources/deployments/CAScontrollerAccessPolicy"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "Cascontroller_vm_name"
            },
            "commandToExecute": {
              "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storageAccountName'),' ',parameters('fileShareName'),' ',parameters('fileShareName'),' ',parameters('SASApplicationName'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberOfViyaCASNodes'),' ',parameters('_artifactsLocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runPhase1_HostSetup.log')]"
            },
            "filepath": {
              "value": "scripts/viya_prereq.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "CASContentFileDownload",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/Cascontroller_vm_name",
          "Microsoft.Resources/deployments/Phase1-CASControllerHostSetup"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "Cascontroller_vm_name"
            },
            "commandToExecute": {
              "value": "cp viya-ark.tar.gz /tmp"
            },
            "filepath": {
              "value": "properties/viya-ark.tar.gz"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase2-CASControllerViyaARK",
        "dependsOn": [
          "Microsoft.Resources/deployments/CASContentFileDownload",
          "Microsoft.Resources/deployments/Phase1-AnsibleHostSetup"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "Cascontroller_vm_name"
            },
            "commandToExecute": {
              "value": "set -o pipefail;./viya_ark.sh 2>&1 | tee /var/log/sas/install/runPhase2_viyaark.log"
            },
            "filepath": {
              "value": "scripts/viya_ark.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2019-09-01",
        "name": "sasapp_casworkercopyIndex()_nic",
        "location": "[resourceGroup().location]",
        "copy": {
          "name": "casworkernicLoop",
          "count": 1
        },
        "dependsOn": [
          "Microsoft.Network/networkSecurityGroups/sasapp_casworker_nsg",
          "Microsoft.Network/virtualNetworks/sasapp_vnet"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/sasapp_vnet/sasapp_vnet_pvt2_subnet"
                },
                "privateIPAddressVersion": "IPv4"
              }
            }
          ],
          "enableAcceleratedNetworking": true,
          "enableIPForwarding": false,
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups/sasapp_casworker_nsg"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2019-07-01",
        "name": "casworkercopyIndex()",
        "location": "[resourceGroup().location]",
        "identity": {
          "type": "SystemAssigned"
        },
        "copy": {
          "name": "casworkervmLoop",
          "count": 1
        },
        "dependsOn": [
          "casworkernicLoop"
        ],
        "tags": {
          "Application": "sasapp",
          "Component": "SASViya"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_E8s_v3"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "RedHat",
              "offer": "RHEL",
              "sku": "7.7",
              "version": "latest"
            },
            "osDisk": {
              "osType": "Linux",
              "name": "casworkercopyIndex()-osdisk",
              "createOption": "FromImage",
              "caching": "ReadWrite",
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              },
              "diskSizeGB": 128
            },
            "dataDisks": [
              {
                "name": "casworkercopyIndex()-opt-sas",
                "diskSizeGB": 128,
                "lun": 0,
                "createOption": "Empty"
              },
              {
                "name": "casworkercopyIndex()-sasbackup",
                "diskSizeGB": 100,
                "lun": 1,
                "createOption": "Empty"
              }
            ]
          },
          "osProfile": {
            "computerName": "casworkercopyIndex()",
            "adminUsername": "GEN-UNIQUE",
            "customData": "[base64(variables('custom_data_cas'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "/home/GEN-UNIQUE/.ssh/authorized_keys",
                    "keyData": "GEN-SSH-PUB-KEY"
                  }
                ]
              }
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/sasapp_casworkercopyIndex()_nic"
              }
            ]
          },
          "proximityPlacementGroup": {
            "id": "Microsoft.Compute/proximityPlacementGroups/sasapp_ppg_[uniqueString(resourceGroup().id)]"
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "casworkercopyIndex()roleassignment",
        "copy": {
          "name": "casworkerrolecopy",
          "count": 1
        },
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/casworkercopyIndex()"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/role_assignments.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "roleAssignmentName": {
              "value": "[guid(resourceId('Microsoft.Compute/virtualMachines', concat(variables('casworker_vm_name'), copyIndex())), variables('reader_role'), variables('rbacPrincipalID'))]"
            },
            "roleDefinitionID": {
              "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
            },
            "principalId": {
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',concat(variables('casworker_vm_name'), copyIndex())),'2019-07-01','Full').identity.principalId]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "casworkercopyIndex()accesspolicy",
        "copy": {
          "name": "casworkerpolicycopy",
          "count": 1,
          "mode": "serial",
          "batchSize": 1
        },
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/casworkercopyIndex()",
          "Microsoft.KeyVault/vaults/sasappKeyVault",
          "[resourceID('Microsoft.Resources/deployments','SpreAccessPolicy')]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/access_policy.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "keyVaultName": {
              "value": "sasappKeyVault"
            },
            "tenantId": {
              "value": "[subscription().tenantId]"
            },
            "objectId": {
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines',concat(variables('casworker_vm_name'), copyIndex())),'2019-07-01','Full').identity.principalId]"
            },
            "secretsPermissions": {
              "value": [
                "get",
                "list",
                "set"
              ]
            },
            "keysPermissions": {
              "value": [
                "get",
                "list",
                "import"
              ]
            },
            "certificatesPermissions": {
              "value": [
                "import",
                "get",
                "list"
              ]
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase1-casworkercopyIndex()Hostsetup",
        "copy": {
          "name": "casworkerextensioncopy",
          "count": 1
        },
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/casworkercopyIndex()",
          "casworkerpolicycopy"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "casworkercopyIndex()"
            },
            "commandToExecute": {
              "value": "[concat('mkdir -p /var/log/sas/install && set -o pipefail; ./viya_prereq.sh',' ',parameters('storageAccountName'),' ',parameters('fileShareName'),' ',parameters('fileShareName'),' ',parameters('SASApplicationName'),' ',variables('domain_name'),' ',variables('ansible_vm_name'),' ',variables('microservices_vm_name'),' ',variables('cascontroller_vm_name'),' ',variables('spre_vm_name'),' ',variables('casworker_vm_name'),' ',variables('key_vault_secretname_sasinst'),' ',variables('key_vault_secretname_sasext'),' ',variables('key_vault_name'),' ',variables('key_vault_secretname_pvtkey'),' ',variables('key_vault_secretname_pubkey'),' ',parameters('numberOfViyaCASNodes'),' ',parameters('_artifactsLocation'),' ',variables('key_vault_secretname_stgacc'),' ',variables('storage_account_uri'),' ','2>&1 | tee /var/log/sas/install/runPhase1_HostSetup.log')]"
            },
            "filepath": {
              "value": "scripts/viya_prereq.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "WorkerContentFileDownloadcopyIndex()",
        "copy": {
          "name": "casworkerdownloadextensioncopy",
          "count": 1,
          "mode": "serial",
          "batchSize": 1
        },
        "dependsOn": [
          "Microsoft.Resources/deployments/Phase1-casworkercopyIndex()Hostsetup"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "casworkercopyIndex()"
            },
            "commandToExecute": {
              "value": "cp viya-ark.tar.gz /tmp"
            },
            "filepath": {
              "value": "properties/viya-ark.tar.gz"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "Phase2-casworkercopyIndex()ViyaARK",
        "copy": {
          "name": "casworkerviyaarkcopy",
          "count": 1
        },
        "dependsOn": [
          "casworkerdownloadextensioncopy",
          "Microsoft.Resources/deployments/Phase1-AnsibleHostSetup"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vm_linux_extension.json', parameters('_artifactsLocationSasToken')))]"
          },
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "vmName": {
              "value": "casworkercopyIndex()"
            },
            "commandToExecute": {
              "value": "set -o pipefail;./viya_ark.sh 2>&1 | tee /var/log/sas/install/runPhase2_viyaark.log"
            },
            "filepath": {
              "value": "scripts/viya_ark.sh"
            },
            "_artifactsLocation": {
              "value": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/application-workloads/sas/sas9.4-viya/"
            },
            "_artifactsLocationSasToken": {
              "value": ""
            }
          }
        }
      }
    ],
    "outputs": {
      "AnsibleJumpHostServerIP": {
        "type": "String",
        "value": "[concat(reference(resourceId('Microsoft.Compute/virtualMachines',variables('ansible_vm_name'))).osProfile.adminUsername,'@',reference(resourceId('Microsoft.Network/publicIPAddresses',variables('ansible_pub_nw_interface'))).IpAddress)]"
      },
      "SASRdpServerIP": {
        "type": "String",
        "value": "[reference(resourceId('Microsoft.Network/networkInterfaces',variables('rdp_nw_interface'))).ipConfigurations[0].properties.privateIPAddress]"
      },
      "SASStudioMidTier": {
        "type": "String",
        "value": "[concat('https://',parameters('SASApplicationName'),variables('mid_vm_name'),'.',variables('domain_name'),':8343/SASStudio')]"
      },
      "SASInstallUser": {
        "type": "String",
        "value": "sasinst"
      },
      "viyaSASDrive": {
        "type": "String",
        "value": "[concat('https://',parameters('SASApplicationName'),variables('microservices_vm_name'),'.',variables('domain_name'),'/SASDrive')]"
      },
      "viyaSASStudio": {
        "type": "String",
        "value": "[concat('https://',parameters('SASApplicationName'),variables('microservices_vm_name'),'.',variables('domain_name'),'/SASStudioV')]"
      },
      "viyaUserLogon": {
        "type": "String",
        "value": "[concat('https://',parameters('SASApplicationName'),variables('microservices_vm_name'),'.',variables('domain_name'),'/SASLogon/reset_password?code=',json(split(reference('Phase6-ViyaPostInstall').outputs.instanceView.value.statuses[0].message, '#SASBOOT#')[1]).SAS_BOOT)]"
      }
    },
    "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
  }
}