{
  "structure": "filesystem",
  "error": null,
  "reference": "master",
  "contentType": "json",
  "source": "gitConnectorAzureQuickStart",
  "paths": [
    "/quickstarts/microsoft.network/front-door-standard-premium-function-public/azuredeploy.json",
    "/quickstarts/microsoft.network/front-door-standard-premium-function-public/azuredeploy.parameters.json"
  ],
  "timestamp": 1642962909041,
  "queryuser": null,
  "checksum": "99914b932bd37a50b983c5e7c90ae93b",
  "node": {
    "masterSnapshotId": "ARM_TEMPLATE_SNAPSHOT",
    "type": "arm",
    "collection": "armtemplate",
    "paths": [
      "/quickstarts/microsoft.network/front-door-standard-premium-function-public/azuredeploy.json",
      "/quickstarts/microsoft.network/front-door-standard-premium-function-public/azuredeploy.parameters.json"
    ],
    "snapshotId": "ARM_TEMPLATE_SNAPSHOT1549",
    "status": "active",
    "validate": true,
    "resourceTypes": [
      "microsoft.cdn/profiles/origingroups/origins",
      "microsoft.resources/deployments",
      "microsoft.cdn/profiles/afdendpoints",
      "microsoft.cdn/profiles",
      "microsoft.cdn/profiles/afdendpoints/routes",
      "microsoft.cdn/profiles/origingroups"
    ]
  },
  "snapshotId": "ARM_TEMPLATE_SNAPSHOT1549",
  "collection": "armtemplate",
  "json": {
    "contentVersion": "1.0.0.0",
    "parameters": {
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "The location into which regionally scoped resources should be deployed. Note that Front Door is a global resource."
        }
      },
      "functionAppName": {
        "type": "string",
        "defaultValue": "[format('fn-{0}', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "The name of the Azure Functions application to create. This must be globally unique."
        }
      },
      "functionPlanSkuName": {
        "type": "string",
        "defaultValue": "EP1",
        "metadata": {
          "description": "The name of the SKU to use when creating the Azure Functions plan."
        }
      },
      "frontDoorEndpointName": {
        "type": "string",
        "defaultValue": "[format('afd-{0}', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "The name of the Front Door endpoint to create. This must be globally unique."
        }
      },
      "frontDoorSkuName": {
        "type": "string",
        "defaultValue": "Standard_AzureFrontDoor",
        "allowedValues": [
          "Standard_AzureFrontDoor",
          "Premium_AzureFrontDoor"
        ],
        "metadata": {
          "description": "The name of the SKU to use when creating the Front Door profile."
        }
      }
    },
    "functions": [],
    "variables": {
      "frontDoorProfileName": "MyFrontDoor",
      "frontDoorOriginGroupName": "MyOriginGroup",
      "frontDoorOriginName": "MyAppServiceOrigin",
      "frontDoorRouteName": "MyRoute"
    },
    "resources": [
      {
        "type": "Microsoft.Cdn/profiles",
        "apiVersion": "2020-09-01",
        "name": "MyFrontDoor",
        "location": "global",
        "sku": {
          "name": "Standard_AzureFrontDoor"
        }
      },
      {
        "type": "Microsoft.Cdn/profiles/afdEndpoints",
        "apiVersion": "2020-09-01",
        "name": "[format('{0}/{1}', variables('frontDoorProfileName'), parameters('frontDoorEndpointName'))]",
        "location": "global",
        "properties": {
          "originResponseTimeoutSeconds": 240,
          "enabledState": "Enabled"
        },
        "dependsOn": [
          "Microsoft.Cdn/profiles/MyFrontDoor"
        ]
      },
      {
        "type": "Microsoft.Cdn/profiles/originGroups",
        "apiVersion": "2020-09-01",
        "name": "[format('{0}/{1}', variables('frontDoorProfileName'), variables('frontDoorOriginGroupName'))]",
        "properties": {
          "loadBalancingSettings": {
            "sampleSize": 4,
            "successfulSamplesRequired": 3
          },
          "healthProbeSettings": {
            "probePath": "/",
            "probeRequestType": "HEAD",
            "probeProtocol": "Http",
            "probeIntervalInSeconds": 100
          }
        },
        "dependsOn": [
          "Microsoft.Cdn/profiles/MyFrontDoor"
        ]
      },
      {
        "type": "Microsoft.Cdn/profiles/originGroups/origins",
        "apiVersion": "2020-09-01",
        "name": "[format('{0}/{1}/{2}', variables('frontDoorProfileName'), variables('frontDoorOriginGroupName'), variables('frontDoorOriginName'))]",
        "properties": {
          "hostName": "[reference(resourceId('Microsoft.Resources/deployments', 'functionapp'), '2019-10-01').outputs.functionAppHostName.value]",
          "httpPort": 80,
          "httpsPort": 443,
          "originHostHeader": "[reference(resourceId('Microsoft.Resources/deployments', 'functionapp'), '2019-10-01').outputs.functionAppHostName.value]",
          "priority": 1,
          "weight": 1000
        },
        "dependsOn": [
          "Microsoft.Cdn/profiles/originGroups/MyFrontDoor/MyOriginGroup",
          "Microsoft.Cdn/profiles/MyFrontDoor",
          "Microsoft.Resources/deployments/functionapp"
        ]
      },
      {
        "type": "Microsoft.Cdn/profiles/afdEndpoints/routes",
        "apiVersion": "2020-09-01",
        "name": "[format('{0}/{1}/{2}', variables('frontDoorProfileName'), parameters('frontDoorEndpointName'), variables('frontDoorRouteName'))]",
        "properties": {
          "originGroup": {
            "id": "Microsoft.Cdn/profiles/originGroups/MyFrontDoor/MyOriginGroup"
          },
          "supportedProtocols": [
            "Http",
            "Https"
          ],
          "patternsToMatch": [
            "/*"
          ],
          "compressionSettings": {
            "contentTypesToCompress": [
              "application/eot",
              "application/font",
              "application/font-sfnt",
              "application/javascript",
              "application/json",
              "application/opentype",
              "application/otf",
              "application/pkcs7-mime",
              "application/truetype",
              "application/ttf",
              "application/vnd.ms-fontobject",
              "application/xhtml+xml",
              "application/xml",
              "application/xml+rss",
              "application/x-font-opentype",
              "application/x-font-truetype",
              "application/x-font-ttf",
              "application/x-httpd-cgi",
              "application/x-javascript",
              "application/x-mpegurl",
              "application/x-opentype",
              "application/x-otf",
              "application/x-perl",
              "application/x-ttf",
              "font/eot",
              "font/ttf",
              "font/otf",
              "font/opentype",
              "image/svg+xml",
              "text/css",
              "text/csv",
              "text/html",
              "text/javascript",
              "text/js",
              "text/plain",
              "text/richtext",
              "text/tab-separated-values",
              "text/xml",
              "text/x-script",
              "text/x-component",
              "text/x-java-source"
            ],
            "isCompressionEnabled": true
          },
          "queryStringCachingBehavior": "IgnoreQueryString",
          "forwardingProtocol": "HttpsOnly",
          "linkToDefaultDomain": "Enabled",
          "httpsRedirect": "Enabled"
        },
        "dependsOn": [
          "Microsoft.Cdn/profiles/afdEndpoints/MyFrontDoor/[format('afd-{0}', uniqueString(resourceGroup().id))]",
          "Microsoft.Cdn/profiles/originGroups/origins/MyFrontDoor/MyOriginGroup/MyAppServiceOrigin",
          "Microsoft.Cdn/profiles/originGroups/MyFrontDoor/MyOriginGroup",
          "Microsoft.Cdn/profiles/MyFrontDoor"
        ]
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "functionapp",
        "properties": {
          "expressionEvaluationOptions": {
            "scope": "inner"
          },
          "mode": "Incremental",
          "parameters": {
            "location": {
              "value": "[resourceGroup().location]"
            },
            "appName": {
              "value": "[format('fn-{0}', uniqueString(resourceGroup().id))]"
            },
            "functionPlanSkuName": {
              "value": "EP1"
            },
            "frontDoorId": {
              "value": "[reference(resourceId('Microsoft.Cdn/profiles', variables('frontDoorProfileName'))).frontdoorId]"
            }
          },
          "template": {
            "contentVersion": "1.0.0.0",
            "parameters": {
              "location": {
                "type": "string",
                "metadata": {
                  "description": "The location into which the Azure Functions resources should be deployed."
                }
              },
              "appName": {
                "type": "string",
                "metadata": {
                  "description": "The name of the Azure Functions application to create. This must be globally unique."
                }
              },
              "functionRuntime": {
                "type": "string",
                "defaultValue": "dotnet",
                "metadata": {
                  "description": "The runtime to deploy onto the Azure Functions application."
                }
              },
              "functionPlanSkuName": {
                "type": "string",
                "metadata": {
                  "description": "The name of the SKU to use when creating the Azure Functions plan. Common SKUs include Y1 (consumption) and EP1, EP2, and EP3 (premium)."
                }
              },
              "frontDoorId": {
                "type": "string",
                "metadata": {
                  "description": "The unique ID associated with the Front Door profile that will send traffic to this application. Access restrictions will be configured to disallow traffic that hasn't had this ID attached to it."
                }
              }
            },
            "functions": [],
            "variables": {
              "appServicePlanName": "FunctionPlan",
              "appInsightsName": "AppInsights",
              "storageAccountName": "[format('fnstor{0}', uniqueString(resourceGroup().id, parameters('appName')))]",
              "functionPlanKind": "[if(equals(parameters('functionPlanSkuName'), 'Y1'), 'functionapp', 'elastic')]",
              "functionName": "MyHttpTriggeredFunction"
            },
            "resources": [
              {
                "type": "Microsoft.Storage/storageAccounts",
                "apiVersion": "2019-06-01",
                "name": "storageAccountName",
                "location": "[resourceGroup().location]",
                "sku": {
                  "name": "Standard_LRS",
                  "tier": "Standard"
                },
                "kind": "StorageV2",
                "properties": {
                  "supportsHttpsTrafficOnly": true,
                  "encryption": {
                    "services": {
                      "file": {
                        "keyType": "Account",
                        "enabled": true
                      },
                      "blob": {
                        "keyType": "Account",
                        "enabled": true
                      }
                    },
                    "keySource": "Microsoft.Storage"
                  },
                  "accessTier": "Hot"
                }
              },
              {
                "type": "Microsoft.Insights/components",
                "apiVersion": "2018-05-01-preview",
                "name": "appInsightsName",
                "location": "[resourceGroup().location]",
                "kind": "web",
                "properties": {
                  "Application_Type": "web",
                  "publicNetworkAccessForIngestion": "Enabled",
                  "publicNetworkAccessForQuery": "Enabled"
                }
              },
              {
                "type": "Microsoft.Web/serverfarms",
                "apiVersion": "2020-06-01",
                "name": "appServicePlanName",
                "location": "[resourceGroup().location]",
                "kind": "functionPlanKind",
                "sku": {
                  "name": "EP1"
                },
                "properties": {}
              },
              {
                "type": "Microsoft.Web/sites",
                "apiVersion": "2020-06-01",
                "name": "appName",
                "location": "[resourceGroup().location]",
                "kind": "functionapp",
                "properties": {
                  "serverFarmId": "Microsoft.Web/serverfarms/appServicePlanName",
                  "siteConfig": {
                    "appSettings": [
                      {
                        "name": "AzureWebJobsStorage",
                        "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
                      },
                      {
                        "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                        "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
                      },
                      {
                        "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                        "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
                      },
                      {
                        "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                        "value": "[format('InstrumentationKey={0}', reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey)]"
                      },
                      {
                        "name": "FUNCTIONS_WORKER_RUNTIME",
                        "value": "functionRuntime"
                      },
                      {
                        "name": "FUNCTIONS_EXTENSION_VERSION",
                        "value": "~3"
                      },
                      {
                        "name": "AzureWebJobsDisableHomepage",
                        "value": "true"
                      }
                    ],
                    "ipSecurityRestrictions": [
                      {
                        "tag": "ServiceTag",
                        "ipAddress": "AzureFrontDoor.Backend",
                        "action": "Allow",
                        "priority": 100,
                        "headers": {
                          "x-azure-fdid": [
                            "frontDoorId"
                          ]
                        },
                        "name": "Allow traffic from Front Door"
                      }
                    ]
                  },
                  "httpsOnly": true
                },
                "dependsOn": [
                  "Microsoft.Insights/components/appInsightsName",
                  "Microsoft.Web/serverfarms/appServicePlanName",
                  "Microsoft.Storage/storageAccounts/storageAccountName"
                ]
              },
              {
                "type": "Microsoft.Web/sites/functions",
                "apiVersion": "2020-06-01",
                "name": "[format('{0}/{1}', parameters('appName'), variables('functionName'))]",
                "properties": {
                  "config": {
                    "disabled": false,
                    "bindings": [
                      {
                        "name": "req",
                        "type": "httpTrigger",
                        "direction": "in",
                        "authLevel": "anonymous",
                        "methods": [
                          "get"
                        ]
                      },
                      {
                        "name": "$return",
                        "type": "http",
                        "direction": "out"
                      }
                    ]
                  },
                  "files": {
                    "run.csx": "        #r \"Newtonsoft.Json\"\r\n        using System.Net;\r\n        using Microsoft.AspNetCore.Mvc;\r\n        using Microsoft.Extensions.Primitives;\r\n        using Newtonsoft.Json;\r\n        \r\n        public static async Task<IActionResult> Run(HttpRequest req, ILogger log)\r\n        {\r\n            log.LogInformation(\"C# HTTP trigger function processed a request.\");\r\n            string name = req.Query[\"name\"];\r\n            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();\r\n            dynamic data = JsonConvert.DeserializeObject(requestBody);\r\n            name = name ?? data?.name;\r\n            \r\n            string responseMessage = string.IsNullOrEmpty(name)\r\n                ? \"This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response.\"\r\n                : $\"Hello, {name}. This HTTP triggered function executed successfully.\";\r\n            \r\n            return new OkObjectResult(responseMessage);\r\n        }\r\n      "
                  }
                },
                "dependsOn": [
                  "Microsoft.Web/sites/appName"
                ]
              }
            ],
            "outputs": {
              "functionAppHostName": {
                "type": "string",
                "value": "[reference(resourceId('Microsoft.Web/sites', parameters('appName'))).defaultHostName]"
              },
              "functionName": {
                "type": "string",
                "value": "functionName"
              }
            },
            "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
          }
        },
        "dependsOn": [
          "Microsoft.Cdn/profiles/MyFrontDoor"
        ]
      }
    ],
    "outputs": {
      "frontDoorEndpointFunctionUrl": {
        "type": "string",
        "value": "[format('https://{0}/api/{1}', reference(resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorProfileName'), parameters('frontDoorEndpointName'))).hostName, reference(resourceId('Microsoft.Resources/deployments', 'functionapp'), '2019-10-01').outputs.functionName.value)]"
      },
      "functionAppFunctionUrl": {
        "type": "string",
        "value": "[format('https://{0}/api/{1}', reference(resourceId('Microsoft.Resources/deployments', 'functionapp'), '2019-10-01').outputs.functionAppHostName.value, reference(resourceId('Microsoft.Resources/deployments', 'functionapp'), '2019-10-01').outputs.functionName.value)]"
      }
    },
    "metadata": {
      "_generator": {
        "name": "bicep",
        "version": "0.3.126.58533",
        "templateHash": "9932106935421130927"
      }
    },
    "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
  }
}