{
  "structure": "filesystem",
  "error": null,
  "reference": "master",
  "contentType": "json",
  "source": "gitConnectorAzureQuickStart",
  "paths": [
    "/quickstarts/microsoft.web/web-app-asp-app-on-asev3-create/azuredeploy.json",
    "/quickstarts/microsoft.web/web-app-asp-app-on-asev3-create/azuredeploy.parameters.json"
  ],
  "timestamp": 1642962911227,
  "queryuser": null,
  "checksum": "99914b932bd37a50b983c5e7c90ae93b",
  "node": {
    "masterSnapshotId": "ARM_TEMPLATE_SNAPSHOT",
    "type": "arm",
    "collection": "armtemplate",
    "paths": [
      "/quickstarts/microsoft.web/web-app-asp-app-on-asev3-create/azuredeploy.json",
      "/quickstarts/microsoft.web/web-app-asp-app-on-asev3-create/azuredeploy.parameters.json"
    ],
    "snapshotId": "ARM_TEMPLATE_SNAPSHOT1781",
    "status": "active",
    "validate": true,
    "resourceTypes": [
      "microsoft.network/virtualnetworks",
      "microsoft.resources/deployments",
      "microsoft.web/hostingenvironments",
      "microsoft.network/networksecuritygroups"
    ]
  },
  "snapshotId": "ARM_TEMPLATE_SNAPSHOT1781",
  "collection": "armtemplate",
  "json": {
    "contentVersion": "1.0.0.0",
    "parameters": {
      "useExistingVnetandSubnet": {
        "type": "bool",
        "defaultValue": false,
        "metadata": {
          "description": "Required. Use existing virtual network and subnet."
        }
      },
      "vNetResourceGroupName": {
        "type": "string",
        "defaultValue": "[resourceGroup().name]",
        "metadata": {
          "description": "Required. Resource Group name of virtual network if using existing vnet and subnet."
        }
      },
      "virtualNetworkName": {
        "type": "string",
        "defaultValue": "vnet-asev3",
        "metadata": {
          "description": "Required. The Virtual Network (vNet) Name."
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Required. Location for all resources."
        }
      },
      "vNetAddressPrefixes": {
        "type": "array",
        "defaultValue": [
          "172.16.0.0/16"
        ],
        "metadata": {
          "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
        }
      },
      "subnetAddressPrefix": {
        "type": "string",
        "defaultValue": "172.16.0.0/24",
        "metadata": {
          "description": "Required. The subnet Name of ASEv3."
        }
      },
      "subnetName": {
        "type": "string",
        "defaultValue": "snet-asev3",
        "metadata": {
          "description": "Required. The subnet Name of ASEv3."
        }
      },
      "subnets": {
        "type": "array",
        "defaultValue": [
          {
            "name": "snet-asev3",
            "addressPrefix": "172.16.0.0/24",
            "delegations": [
              {
                "name": "Microsoft.Web.hostingEnvironments",
                "properties": {
                  "serviceName": "Microsoft.Web/hostingEnvironments"
                }
              }
            ],
            "privateEndpointNetworkPolicies": "Enabled",
            "privateLinkServiceNetworkPolicies": "Enabled",
            "networkSecurityGroupName": "nsg-asev3"
          }
        ],
        "metadata": {
          "description": "Required. The subnet properties."
        }
      },
      "aseName": {
        "type": "string",
        "metadata": {
          "description": "Required. Name of ASEv3."
        },
        "value": "GEN-UNIQUE"
      },
      "dedicatedHostCount": {
        "type": "string",
        "defaultValue": "0",
        "metadata": {
          "description": "Required. Dedicated host count of ASEv3."
        }
      },
      "zoneRedundant": {
        "type": "bool",
        "defaultValue": false,
        "metadata": {
          "description": "Required. Zone redundant of ASEv3."
        }
      },
      "createPrivateDNS": {
        "type": "bool",
        "defaultValue": true,
        "metadata": {
          "description": "Optional. Create a private DNS zone for ASEv3."
        }
      },
      "internalLoadBalancingMode": {
        "type": "int",
        "defaultValue": 3,
        "allowedValues": [
          0,
          3
        ],
        "metadata": {
          "description": "Required. Load balancer mode: 0-external load balancer, 3-internal load balancer for ASEv3."
        }
      },
      "networkSecurityGroupName": {
        "type": "string",
        "defaultValue": "nsg-asev3",
        "minLength": 1,
        "metadata": {
          "description": "Required. Name of the Network Security Group."
        }
      },
      "networkSecurityGroupSecurityRules": {
        "type": "array",
        "defaultValue": [],
        "metadata": {
          "description": "Required. Array of Security Rules to deploy to the Network Security Group."
        }
      }
    },
    "functions": [],
    "variables": {
      "uniStr": "[uniqueString(resourceGroup().id)]",
      "virtualNetworkId": "[resourceGroup().name]/Microsoft.Network/virtualNetworks/vnet-asev3",
      "subnetId": "[resourceGroup().name]/Microsoft.Network/virtualNetworks/subnets/vnet-asev3/snet-asev3"
    },
    "resources": [
      {
        "condition": "[not(parameters('useExistingVnetandSubnet'))]",
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2020-11-01",
        "name": "nsg-asev3",
        "location": "[resourceGroup().location]",
        "properties": {
          "copy": [
            {
              "name": "securityRules",
              "count": 47,
              "input": {
                "name": "networkSecurityGroupSecurityRules)[copyIndex(securityRules",
                "properties": {
                  "description": "networkSecurityGroupSecurityRules)[copyIndex(securityRules",
                  "access": "networkSecurityGroupSecurityRules)[copyIndex(securityRules",
                  "destinationAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix)]",
                  "destinationAddressPrefixes": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes)]",
                  "destinationPortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges)]",
                  "destinationPortRange": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange)]",
                  "direction": "networkSecurityGroupSecurityRules)[copyIndex(securityRules",
                  "priority": "[int(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.priority)]",
                  "protocol": "networkSecurityGroupSecurityRules)[copyIndex(securityRules",
                  "sourceAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix)]",
                  "sourcePortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges)]",
                  "sourcePortRange": "networkSecurityGroupSecurityRules)[copyIndex(securityRules"
                }
              }
            }
          ]
        }
      },
      {
        "condition": "[not(parameters('useExistingVnetandSubnet'))]",
        "type": "Microsoft.Network/virtualNetworks",
        "apiVersion": "2020-11-01",
        "name": "vnet-asev3",
        "location": "[resourceGroup().location]",
        "properties": {
          "copy": [
            {
              "name": "subnets",
              "count": 21,
              "input": {
                "name": "subnets)[copyIndex(subnets",
                "properties": {
                  "addressPrefix": "subnets)[copyIndex(subnets",
                  "networkSecurityGroup": "[if(empty(parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName), json('null'), json(format('{{\"id\": \"{0}\"}}', resourceId('Microsoft.Network/networkSecurityGroups', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName))))]",
                  "delegations": "subnets)[copyIndex(subnets"
                }
              }
            }
          ],
          "addressSpace": {
            "addressPrefixes": [
              "172.16.0.0/16"
            ]
          }
        },
        "dependsOn": [
          "Microsoft.Network/networkSecurityGroups/nsg-asev3"
        ]
      },
      {
        "type": "Microsoft.Web/hostingEnvironments",
        "apiVersion": "2020-12-01",
        "name": "GEN-UNIQUE",
        "location": "[resourceGroup().location]",
        "kind": "ASEV3",
        "properties": {
          "dedicatedHostCount": "0",
          "zoneRedundant": false,
          "internalLoadBalancingMode": 3,
          "virtualNetwork": {
            "id": "[resourceGroup().name]/Microsoft.Network/virtualNetworks/subnets/vnet-asev3/snet-asev3"
          }
        },
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/vnet-asev3"
        ]
      },
      {
        "condition": false,
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "[format('{0}-subnet-delegation-{1}', parameters('subnetName'), variables('uniStr'))]",
        "resourceGroup": "[resourceGroup().name]",
        "properties": {
          "expressionEvaluationOptions": {
            "scope": "inner"
          },
          "mode": "Incremental",
          "parameters": {
            "virtualNetworkName": {
              "value": "vnet-asev3"
            },
            "subnetName": {
              "value": "snet-asev3"
            },
            "subnetAddressPrefix": {
              "value": "172.16.0.0/24"
            }
          },
          "template": {
            "contentVersion": "1.0.0.0",
            "parameters": {
              "virtualNetworkName": {
                "type": "string",
                "metadata": {
                  "description": "Required. The Virtual Network (vNet) Name."
                }
              },
              "subnetName": {
                "type": "string",
                "metadata": {
                  "description": "Required. The subnet Name of ASEv3."
                }
              },
              "subnetAddressPrefix": {
                "type": "string",
                "metadata": {
                  "description": "Required. The subnet Name of ASEv3."
                }
              }
            },
            "functions": [],
            "resources": [
              {
                "type": "Microsoft.Network/virtualNetworks/subnets",
                "apiVersion": "2020-11-01",
                "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('subnetName'))]",
                "properties": {
                  "addressPrefix": "172.16.0.0/24",
                  "delegations": [
                    {
                      "name": "Microsoft.Web.hostingEnvironments",
                      "properties": {
                        "serviceName": "Microsoft.Web/hostingEnvironments"
                      }
                    }
                  ]
                }
              }
            ],
            "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
          }
        }
      },
      {
        "condition": "[and(parameters('createPrivateDNS'), equals(parameters('internalLoadBalancingMode'), 3))]",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2019-10-01",
        "name": "[format('private-dns-zone-deployment-{0}', variables('uniStr'))]",
        "properties": {
          "expressionEvaluationOptions": {
            "scope": "inner"
          },
          "mode": "Incremental",
          "parameters": {
            "privateDNSZoneName": {
              "value": "[reference(resourceId('Microsoft.Web/hostingEnvironments', parameters('aseName'))).dnsSuffix]"
            },
            "virtualNetworkId": {
              "value": "[resourceGroup().name]/Microsoft.Network/virtualNetworks/vnet-asev3"
            },
            "aseName": {
              "value": "GEN-UNIQUE"
            }
          },
          "template": {
            "contentVersion": "1.0.0.0",
            "parameters": {
              "aseName": {
                "type": "string",
                "metadata": {
                  "description": "Required. ASE name."
                }
              },
              "privateDNSZoneName": {
                "type": "string",
                "metadata": {
                  "description": "Required. Private DNS zone name."
                }
              },
              "virtualNetworkId": {
                "type": "string",
                "metadata": {
                  "description": "Required. Network Id."
                }
              }
            },
            "functions": [],
            "resources": [
              {
                "type": "Microsoft.Network/privateDnsZones",
                "apiVersion": "2020-06-01",
                "name": "privateDNSZoneName",
                "location": "global",
                "properties": {}
              },
              {
                "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                "apiVersion": "2020-06-01",
                "name": "[format('{0}/{1}', parameters('privateDNSZoneName'), 'vnetLink')]",
                "location": "global",
                "properties": {
                  "virtualNetwork": {
                    "id": "virtualNetworkId"
                  },
                  "registrationEnabled": false
                },
                "dependsOn": [
                  "Microsoft.Network/privateDnsZones/privateDNSZoneName"
                ]
              },
              {
                "type": "Microsoft.Network/privateDnsZones/A",
                "apiVersion": "2020-06-01",
                "name": "[format('{0}/{1}', parameters('privateDNSZoneName'), '*')]",
                "properties": {
                  "ttl": 3600,
                  "aRecords": [
                    {
                      "ipv4Address": "[reference(resourceId('Microsoft.Web/hostingEnvironments/configurations', split(format('{0}/networking', parameters('aseName')), '/')[0], split(format('{0}/networking', parameters('aseName')), '/')[1]), '2021-01-15').internalInboundIpAddresses[0]]"
                    }
                  ]
                },
                "dependsOn": [
                  "Microsoft.Network/privateDnsZones/privateDNSZoneName"
                ]
              },
              {
                "type": "Microsoft.Network/privateDnsZones/A",
                "apiVersion": "2020-06-01",
                "name": "[format('{0}/{1}', parameters('privateDNSZoneName'), '*.scm')]",
                "properties": {
                  "ttl": 3600,
                  "aRecords": [
                    {
                      "ipv4Address": "[reference(resourceId('Microsoft.Web/hostingEnvironments/configurations', split(format('{0}/networking', parameters('aseName')), '/')[0], split(format('{0}/networking', parameters('aseName')), '/')[1]), '2021-01-15').internalInboundIpAddresses[0]]"
                    }
                  ]
                },
                "dependsOn": [
                  "Microsoft.Network/privateDnsZones/privateDNSZoneName"
                ]
              },
              {
                "type": "Microsoft.Network/privateDnsZones/A",
                "apiVersion": "2020-06-01",
                "name": "[format('{0}/{1}', parameters('privateDNSZoneName'), '@')]",
                "properties": {
                  "ttl": 3600,
                  "aRecords": [
                    {
                      "ipv4Address": "[reference(resourceId('Microsoft.Web/hostingEnvironments/configurations', split(format('{0}/networking', parameters('aseName')), '/')[0], split(format('{0}/networking', parameters('aseName')), '/')[1]), '2021-01-15').internalInboundIpAddresses[0]]"
                    }
                  ]
                },
                "dependsOn": [
                  "Microsoft.Network/privateDnsZones/privateDNSZoneName"
                ]
              }
            ],
            "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
          }
        },
        "dependsOn": [
          "Microsoft.Web/hostingEnvironments/GEN-UNIQUE"
        ]
      }
    ],
    "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
  }
}