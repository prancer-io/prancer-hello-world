{
  "structure": "filesystem",
  "error": null,
  "reference": "master",
  "contentType": "json",
  "source": "gitConnectorAzureQuickStart",
  "paths": [
    "/quickstarts/microsoft.keyvault/key-vault-private-endpoint/azuredeploy.json",
    "/quickstarts/microsoft.keyvault/key-vault-private-endpoint/azuredeploy.parameters.json"
  ],
  "timestamp": 1642962907302,
  "queryuser": null,
  "checksum": "99914b932bd37a50b983c5e7c90ae93b",
  "node": {
    "masterSnapshotId": "ARM_TEMPLATE_SNAPSHOT",
    "type": "arm",
    "collection": "armtemplate",
    "paths": [
      "/quickstarts/microsoft.keyvault/key-vault-private-endpoint/azuredeploy.json",
      "/quickstarts/microsoft.keyvault/key-vault-private-endpoint/azuredeploy.parameters.json"
    ],
    "snapshotId": "ARM_TEMPLATE_SNAPSHOT1380",
    "status": "active",
    "validate": true,
    "resourceTypes": [
      "microsoft.network/publicipaddresses",
      "microsoft.network/virtualnetworks",
      "microsoft.network/privatednszones",
      "microsoft.network/networkinterfaces",
      "microsoft.network/privatednszones/virtualnetworklinks",
      "microsoft.compute/virtualmachines/extensions",
      "microsoft.compute/virtualmachines",
      "microsoft.network/networksecuritygroups",
      "microsoft.keyvault/vaults/secrets",
      "microsoft.operationalinsights/workspaces",
      "microsoft.network/privateendpoints",
      "microsoft.network/privateendpoints/privatednszonegroups",
      "microsoft.storage/storageaccounts",
      "microsoft.keyvault/vaults"
    ]
  },
  "snapshotId": "ARM_TEMPLATE_SNAPSHOT1380",
  "collection": "armtemplate",
  "json": {
    "contentVersion": "1.0.0.0",
    "parameters": {
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Specifies the location for all the resources."
        }
      },
      "virtualNetworkName": {
        "defaultValue": "UbuntuVnet",
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the virtual network hosting the virtual machine."
        }
      },
      "virtualNetworkAddressPrefix": {
        "defaultValue": "10.0.0.0/16",
        "type": "string",
        "metadata": {
          "description": "Specifies the address prefix of the virtual network hosting the virtual machine."
        }
      },
      "subnetName": {
        "defaultValue": "DefaultSubnet",
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the subnet hosting the virtual machine."
        }
      },
      "subnetAddressPrefix": {
        "defaultValue": "10.0.0.0/24",
        "type": "string",
        "metadata": {
          "description": "Specifies the address prefix of the subnet hosting the virtual machine."
        }
      },
      "blobStorageAccountName": {
        "type": "string",
        "defaultValue": "[concat('boot', uniquestring(resourceGroup().id))]",
        "metadata": {
          "description": "Specifies the globally unique name for the storage account used to store the boot diagnostics logs of the virtual machine."
        }
      },
      "vmName": {
        "type": "string",
        "defaultValue": "TestVm",
        "metadata": {
          "description": "Specifies the name of the virtual machine."
        }
      },
      "vmSize": {
        "type": "string",
        "defaultValue": "Standard_D4s_v3",
        "metadata": {
          "description": "Specifies the size of the virtual machine."
        }
      },
      "imagePublisher": {
        "type": "string",
        "defaultValue": "Canonical",
        "metadata": {
          "description": "Specifies the image publisher of the disk image used to create the virtual machine."
        }
      },
      "imageOffer": {
        "type": "string",
        "defaultValue": "UbuntuServer",
        "metadata": {
          "description": "Specifies the offer of the platform image or marketplace image used to create the virtual machine."
        }
      },
      "imageSku": {
        "type": "string",
        "defaultValue": "18.04-LTS",
        "metadata": {
          "description": "Specifies the Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
        }
      },
      "authenticationType": {
        "type": "string",
        "defaultValue": "password",
        "allowedValues": [
          "sshPublicKey",
          "password"
        ],
        "metadata": {
          "description": "Specifies the type of authentication when accessing the Virtual Machine. SSH key is recommended."
        }
      },
      "adminUsername": {
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the administrator account of the virtual machine."
        },
        "value": "GEN-UNIQUE"
      },
      "adminPasswordOrKey": {
        "type": "securestring",
        "metadata": {
          "description": "Specifies the SSH Key or password for the virtual machine. SSH key is recommended."
        },
        "value": "GEN-PASSWORD"
      },
      "diskStorageAccounType": {
        "type": "string",
        "defaultValue": "Premium_LRS",
        "allowedValues": [
          "Standard_LRS",
          "Standard_GRS",
          "Standard_RAGRS",
          "Standard_ZRS",
          "Premium_LRS",
          "Premium_ZRS",
          "Standard_GZRS",
          "Standard_RAGZRS"
        ],
        "metadata": {
          "description": "Defines the storage account type for OS and data disk."
        }
      },
      "numDataDisks": {
        "type": "int",
        "defaultValue": 1,
        "minValue": 0,
        "maxValue": 64,
        "metadata": {
          "description": "Specifies the number of data disks of the virtual machine."
        }
      },
      "osDiskSize": {
        "type": "int",
        "defaultValue": 100,
        "metadata": {
          "description": "The size in GB of the OS disk of the VM."
        }
      },
      "dataDiskSize": {
        "type": "int",
        "defaultValue": 10,
        "metadata": {
          "description": "Specifies the size in GB of the OS disk of the virtual machine."
        }
      },
      "dataDiskCaching": {
        "type": "string",
        "defaultValue": "ReadWrite",
        "metadata": {
          "description": "Specifies the caching requirements for the data disks."
        }
      },
      "_artifactsLocation": {
        "type": "string",
        "defaultValue": "[deployment().properties.templateLink.uri]",
        "metadata": {
          "description": "Specifies the base URI where artifacts required by this template are located including a trailing '/'"
        }
      },
      "_artifactsLocationSasToken": {
        "type": "securestring",
        "defaultValue": "",
        "metadata": {
          "description": "Specifies the sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
        }
      },
      "scriptFileName": {
        "type": "string",
        "defaultValue": "test-key-vault-private-endpoint.sh",
        "metadata": {
          "description": "Specifies the script to download from the URI specified by the scriptFilePath parameter."
        }
      },
      "deployLogAnalytics": {
        "type": "bool",
        "defaultValue": true,
        "metadata": {
          "description": "Specifies whether to deploy a Log Analytics workspace to monitor the health and performance of the virtual machine."
        }
      },
      "workspaceName": {
        "type": "string",
        "metadata": {
          "description": "Specifies the globally unique name of the Log Analytics workspace."
        },
        "value": "GEN-UNIQUE"
      },
      "workspaceSku": {
        "type": "string",
        "allowedValues": [
          "PerGB2018",
          "Free",
          "Standalone",
          "PerNode",
          "Standard",
          "Premium"
        ],
        "defaultValue": "PerGB2018",
        "metadata": {
          "description": "Specifies the SKU of the Log Analytics workspace."
        }
      },
      "keyVaultName": {
        "type": "string",
        "defaultValue": "[concat('vault', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "Specifies the name of the key vault."
        }
      },
      "enabledForDeployment": {
        "type": "bool",
        "defaultValue": true,
        "allowedValues": [
          true,
          false
        ],
        "metadata": {
          "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
        }
      },
      "enabledForDiskEncryption": {
        "type": "bool",
        "defaultValue": true,
        "allowedValues": [
          true,
          false
        ],
        "metadata": {
          "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
        }
      },
      "enabledForTemplateDeployment": {
        "type": "bool",
        "defaultValue": true,
        "allowedValues": [
          true,
          false
        ],
        "metadata": {
          "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
        }
      },
      "enableSoftDelete": {
        "type": "bool",
        "defaultValue": true,
        "allowedValues": [
          true,
          false
        ],
        "metadata": {
          "description": "Specifies whether the 'soft delete' functionality is enabled for this key vault. If it's not set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it cannot be reverted to false."
        }
      },
      "softDeleteRetentionInDays": {
        "type": "int",
        "defaultValue": 90,
        "metadata": {
          "description": "Specifies the softDelete data retention days. It accepts >=7 and <=90."
        }
      },
      "enableRbacAuthorization": {
        "type": "bool",
        "defaultValue": false,
        "allowedValues": [
          true,
          false
        ],
        "metadata": {
          "description": "Controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC."
        }
      },
      "tenantId": {
        "type": "string",
        "defaultValue": "[subscription().tenantId]",
        "metadata": {
          "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
        }
      },
      "keysPermissions": {
        "type": "array",
        "defaultValue": [
          "get",
          "create",
          "delete",
          "list",
          "update",
          "import",
          "backup",
          "restore",
          "recover"
        ],
        "metadata": {
          "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
        }
      },
      "secretsPermissions": {
        "type": "array",
        "defaultValue": [
          "get",
          "list",
          "set",
          "delete",
          "backup",
          "restore",
          "recover"
        ],
        "metadata": {
          "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
        }
      },
      "certificatesPermissions": {
        "type": "array",
        "defaultValue": [
          "get",
          "list",
          "delete",
          "create",
          "import",
          "update",
          "managecontacts",
          "getissuers",
          "listissuers",
          "setissuers",
          "deleteissuers",
          "manageissuers",
          "backup",
          "recover"
        ],
        "metadata": {
          "description": "Specifies the permissions to certificates in the vault. Valid values are: all, get, list, set, delete, managecontacts, getissuers, listissuers, setissuers, deleteissuers, manageissuers, backup, and recover."
        }
      },
      "skuName": {
        "type": "string",
        "defaultValue": "Standard",
        "allowedValues": [
          "Standard",
          "Premium"
        ],
        "metadata": {
          "description": "Specifies whether the key vault is a standard vault or a premium vault."
        }
      },
      "secretsArray": {
        "type": "array",
        "defaultValue": [
          {
            "secretName": "secret1",
            "secretValue": "value1"
          },
          {
            "secretName": "secret2",
            "secretValue": "value2"
          },
          {
            "secretName": "secret3",
            "secretValue": "value3"
          }
        ],
        "metadata": {
          "description": "Specifies all secrets {\"secretName\":\"\",\"secretValue\":\"\"} wrapped in a secure object."
        }
      },
      "keyVaultPrivateEndpointName": {
        "type": "string",
        "defaultValue": "KeyVaultPrivateEndpoint",
        "metadata": {
          "description": "Specifies the name of the private link to key vault."
        }
      },
      "blobStorageAccountPrivateEndpointName": {
        "type": "string",
        "defaultValue": "BlobStorageAccountPrivateEndpoint",
        "metadata": {
          "description": "Specifies the name of the private link to the boot diagnostics storage account."
        }
      }
    },
    "variables": {
      "nicName": "TestVmNic",
      "nsgName": "DefaultSubnetNsg",
      "publicIPAddressName": "TestVmPublicIp",
      "publicIPAddressType": "Dynamic",
      "workspaceId": "Microsoft.OperationalInsights/workspaces/GEN-UNIQUE",
      "subnetId": "Microsoft.Network/virtualNetworks/subnets/UbuntuVnet/DefaultSubnet",
      "publicIpId": "Microsoft.Network/publicIPAddresses/TestVmPublicIp",
      "nicId": "Microsoft.Network/networkInterfaces/TestVmNic",
      "vnetId": "Microsoft.Network/virtualNetworks/UbuntuVnet",
      "nsgId": "Microsoft.Network/networkSecurityGroups/DefaultSubnetNsg",
      "vmId": "Microsoft.Compute/virtualMachines/TestVm",
      "customScriptId": "Microsoft.Compute/virtualMachines/extensions/TestVm/CustomScript",
      "omsAgentForLinuxId": "Microsoft.Compute/virtualMachines/extensions/TestVm/LogAnalytics",
      "scriptFileUri": "[uri(parameters('_artifactsLocation'), concat('scripts/', parameters('scriptFileName'), parameters('_artifactsLocationSasToken')))]",
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "ssh": {
          "publicKeys": [
            {
              "path": "/home/GEN-UNIQUE/.ssh/authorized_keys",
              "keyData": "GEN-PASSWORD"
            }
          ]
        },
        "provisionVMAgent": true
      },
      "keyVaultId": "Microsoft.KeyVault/vaults/[concat('vault', uniqueString(resourceGroup().id))]",
      "blobStorageAccountId": "Microsoft.Storage/storageAccounts/[concat('boot', uniquestring(resourceGroup().id))]",
      "keyVaultPublicDNSZoneForwarder": "[if(equals(toLower(environment().name), 'azureusgovernment'), '.vaultcore.usgovcloudapi.net', '.vaultcore.azure.net')]",
      "blobPublicDNSZoneForwarder": "[concat('.blob.', environment().suffixes.storage)]",
      "keyVaultPrivateDnsZoneName": "privatelink[if(equals(toLower(environment().name), 'azureusgovernment'), '.vaultcore.usgovcloudapi.net', '.vaultcore.azure.net')]",
      "blobPrivateDnsZoneName": "[concat('privatelink', variables('blobPublicDNSZoneForwarder'))]",
      "keyVaultPrivateDnsZoneId": "Microsoft.Network/privateDnsZones/privatelink[if(equals(toLower(environment().name), 'azureusgovernment'), '.vaultcore.usgovcloudapi.net', '.vaultcore.azure.net')]",
      "blobPrivateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('blobPrivateDnsZoneName'))]",
      "keyVaultServiceEndpoint": "[concat(parameters('keyVaultName'), environment().suffixes.keyvaultDns)]",
      "blobServicePrimaryEndpoint": "[concat(parameters('blobStorageAccountName'), variables('blobPublicDNSZoneForwarder'))]",
      "keyVaultPrivateEndpointId": "Microsoft.Network/privateEndpoints/KeyVaultPrivateEndpoint",
      "blobStorageAccountPrivateEndpointId": "Microsoft.Network/privateEndpoints/BlobStorageAccountPrivateEndpoint",
      "keyVaultPrivateEndpointGroupName": "vault",
      "blobStorageAccountPrivateEndpointGroupName": "blob",
      "azureEnvironment": "[environment().name]",
      "keyVaultPrivateDnsZoneGroupName": "KeyVaultPrivateEndpoint/vaultPrivateDnsZoneGroup",
      "blobPrivateDnsZoneGroupName": "BlobStorageAccountPrivateEndpoint/blobPrivateDnsZoneGroup",
      "keyVaultPrivateDnsZoneGroupId": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups/KeyVaultPrivateEndpoint/vaultPrivateDnsZoneGroup"
    },
    "resources": [
      {
        "apiVersion": "2019-09-01",
        "type": "Microsoft.KeyVault/vaults",
        "name": "[concat('vault', uniqueString(resourceGroup().id))]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/TestVm"
        ],
        "properties": {
          "tenantId": "[subscription().tenantId]",
          "sku": {
            "name": "Standard",
            "family": "A"
          },
          "enabledForDeployment": true,
          "enabledForTemplateDeployment": true,
          "enabledForDiskEncryption": true,
          "enableSoftDelete": true,
          "softDeleteRetentionInDays": 90,
          "enableRbacAuthorization": false,
          "accessPolicies": [
            {
              "tenantId": "[subscription().tenantId]",
              "objectId": "[reference(variables('vmId'), '2019-12-01', 'Full').identity.principalId]",
              "permissions": {
                "keys": [
                  "get",
                  "create",
                  "delete",
                  "list",
                  "update",
                  "import",
                  "backup",
                  "restore",
                  "recover"
                ],
                "secrets": [
                  "get",
                  "list",
                  "set",
                  "delete",
                  "backup",
                  "restore",
                  "recover"
                ],
                "certificates": [
                  "get",
                  "list",
                  "delete",
                  "create",
                  "import",
                  "update",
                  "managecontacts",
                  "getissuers",
                  "listissuers",
                  "setissuers",
                  "deleteissuers",
                  "manageissuers",
                  "backup",
                  "recover"
                ]
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2019-09-01",
        "type": "Microsoft.KeyVault/vaults/secrets",
        "name": "[concat(parameters('keyVaultName'), '/', parameters('secretsArray')[copyIndex()].secretName)]",
        "dependsOn": [
          "Microsoft.KeyVault/vaults/[concat('vault', uniqueString(resourceGroup().id))]"
        ],
        "properties": {
          "value": "secretsArray)[copyIndex("
        }
      },
      {
        "apiVersion": "2019-09-01",
        "type": "Microsoft.KeyVault/vaults/secrets",
        "name": "[concat(parameters('keyVaultName'), '/', parameters('secretsArray')[copyIndex()].secretName)]",
        "dependsOn": [
          "Microsoft.KeyVault/vaults/[concat('vault', uniqueString(resourceGroup().id))]"
        ],
        "properties": {
          "value": "secretsArray)[copyIndex("
        }
      },
      {
        "apiVersion": "2019-09-01",
        "type": "Microsoft.KeyVault/vaults/secrets",
        "name": "[concat(parameters('keyVaultName'), '/', parameters('secretsArray')[copyIndex()].secretName)]",
        "dependsOn": [
          "Microsoft.KeyVault/vaults/[concat('vault', uniqueString(resourceGroup().id))]"
        ],
        "properties": {
          "value": "secretsArray)[copyIndex("
        }
      },
      {
        "apiVersion": "2019-06-01",
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[concat('boot', uniquestring(resourceGroup().id))]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard_LRS"
        },
        "kind": "StorageV2"
      },
      {
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "TestVmPublicIp",
        "location": "[resourceGroup().location]",
        "properties": {
          "publicIPAllocationMethod": "Dynamic",
          "dnsSettings": {
            "domainNameLabel": "[concat(toLower(parameters('vmName')), uniquestring(resourceGroup().id))]"
          }
        }
      },
      {
        "apiVersion": "2019-08-01",
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "DefaultSubnetNsg",
        "location": "[resourceGroup().location]",
        "properties": {
          "securityRules": [
            {
              "name": "AllowSshInbound",
              "properties": {
                "priority": 100,
                "access": "Allow",
                "direction": "Inbound",
                "destinationPortRange": "22",
                "protocol": "Tcp",
                "sourceAddressPrefix": "*",
                "sourcePortRange": "*",
                "destinationAddressPrefix": "*"
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2019-11-01",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "UbuntuVnet",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/networkSecurityGroups/DefaultSubnetNsg"
        ],
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "10.0.0.0/16"
            ]
          },
          "subnets": [
            {
              "name": "DefaultSubnet",
              "properties": {
                "addressPrefix": "10.0.0.0/24",
                "networkSecurityGroup": {
                  "id": "Microsoft.Network/networkSecurityGroups/DefaultSubnetNsg"
                },
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "TestVmNic",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/publicIPAddresses/TestVmPublicIp",
          "Microsoft.Network/virtualNetworks/UbuntuVnet"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "publicIPAddress": {
                  "id": "Microsoft.Network/publicIPAddresses/TestVmPublicIp"
                },
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/UbuntuVnet/DefaultSubnet"
                }
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2019-12-01",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "TestVm",
        "location": "[resourceGroup().location]",
        "identity": {
          "type": "SystemAssigned"
        },
        "dependsOn": [
          "Microsoft.Network/privateEndpoints/BlobStorageAccountPrivateEndpoint",
          "Microsoft.Network/networkInterfaces/TestVmNic"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_D4s_v3"
          },
          "osProfile": {
            "computerName": "TestVm",
            "adminUsername": "GEN-UNIQUE",
            "adminPassword": "GEN-PASSWORD",
            "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "Canonical",
              "offer": "UbuntuServer",
              "sku": "18.04-LTS",
              "version": "latest"
            },
            "osDisk": {
              "name": "TestVm_OSDisk",
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "diskSizeGB": 100,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            },
            "copy": [
              {
                "name": "dataDisks",
                "count": 1,
                "input": {
                  "caching": "ReadWrite",
                  "diskSizeGB": 10,
                  "lun": "[copyIndex('dataDisks')]",
                  "name": "[concat(parameters('vmName'),'-DataDisk',copyIndex('dataDisks'))]",
                  "createOption": "Empty",
                  "managedDisk": {
                    "storageAccountType": "Premium_LRS"
                  }
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/TestVmNic"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(variables('blobStorageAccountId')).primaryEndpoints['blob']]"
            }
          }
        }
      },
      {
        "apiVersion": "2019-12-01",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "TestVm/CustomScript",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/TestVm",
          "Microsoft.KeyVault/vaults/[concat('vault', uniqueString(resourceGroup().id))]",
          "Microsoft.Network/privateEndpoints/KeyVaultPrivateEndpoint",
          "Microsoft.Network/privateEndpoints/privateDnsZoneGroups/KeyVaultPrivateEndpoint/vaultPrivateDnsZoneGroup"
        ],
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "skipDos2Unix": false,
            "timestamp": 123456789,
            "fileUris": [
              "[uri(parameters('_artifactsLocation'), concat('scripts/', parameters('scriptFileName'), parameters('_artifactsLocationSasToken')))]"
            ]
          },
          "protectedSettings": {
            "commandToExecute": "[concat('bash ',  parameters('scriptFileName'), ' ', variables('keyVaultServiceEndpoint'), ' ', variables('blobServicePrimaryEndpoint'), ' ', variables('azureEnvironment'))]"
          }
        }
      },
      {
        "condition": true,
        "apiVersion": "2019-12-01",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "TestVm/LogAnalytics",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/TestVm",
          "Microsoft.OperationalInsights/workspaces/GEN-UNIQUE",
          "Microsoft.Compute/virtualMachines/extensions/TestVm/CustomScript"
        ],
        "properties": {
          "publisher": "Microsoft.EnterpriseCloud.Monitoring",
          "type": "OmsAgentForLinux",
          "typeHandlerVersion": "1.12",
          "settings": {
            "workspaceId": "[reference(variables('workspaceId'), '2020-03-01-preview').customerId]",
            "stopOnMultipleConnections": false
          },
          "protectedSettings": {
            "workspaceKey": "[listKeys(variables('workspaceId'),'2020-03-01-preview').primarySharedKey]"
          }
        }
      },
      {
        "condition": true,
        "apiVersion": "2019-12-01",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "TestVm/DependencyAgent",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/TestVm",
          "Microsoft.OperationalInsights/workspaces/GEN-UNIQUE",
          "Microsoft.Compute/virtualMachines/extensions/TestVm/CustomScript",
          "Microsoft.Compute/virtualMachines/extensions/TestVm/LogAnalytics"
        ],
        "properties": {
          "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
          "type": "DependencyAgentLinux",
          "typeHandlerVersion": "9.10",
          "autoUpgradeMinorVersion": true
        }
      },
      {
        "condition": true,
        "apiVersion": "2020-03-01-preview",
        "type": "Microsoft.OperationalInsights/workspaces",
        "name": "GEN-UNIQUE",
        "location": "[resourceGroup().location]",
        "properties": {
          "sku": {
            "name": "PerGB2018"
          }
        },
        "resources": [
          {
            "apiVersion": "2020-03-01-preview",
            "type": "dataSources",
            "name": "Kern",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/GEN-UNIQUE"
            ],
            "kind": "LinuxSyslog",
            "properties": {
              "syslogName": "kern",
              "syslogSeverities": [
                {
                  "severity": "emerg"
                },
                {
                  "severity": "alert"
                },
                {
                  "severity": "crit"
                },
                {
                  "severity": "err"
                },
                {
                  "severity": "warning"
                }
              ]
            }
          },
          {
            "apiVersion": "2020-03-01-preview",
            "type": "dataSources",
            "name": "Syslog",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/GEN-UNIQUE"
            ],
            "kind": "LinuxSyslog",
            "properties": {
              "syslogName": "syslog",
              "syslogSeverities": [
                {
                  "severity": "emerg"
                },
                {
                  "severity": "alert"
                },
                {
                  "severity": "crit"
                },
                {
                  "severity": "err"
                },
                {
                  "severity": "warning"
                }
              ]
            }
          },
          {
            "apiVersion": "2020-03-01-preview",
            "type": "dataSources",
            "name": "User",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/GEN-UNIQUE"
            ],
            "kind": "LinuxSyslog",
            "properties": {
              "syslogName": "user",
              "syslogSeverities": [
                {
                  "severity": "emerg"
                },
                {
                  "severity": "alert"
                },
                {
                  "severity": "crit"
                },
                {
                  "severity": "err"
                },
                {
                  "severity": "warning"
                }
              ]
            }
          },
          {
            "apiVersion": "2020-03-01-preview",
            "type": "dataSources",
            "name": "SampleSyslogCollection1",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/GEN-UNIQUE"
            ],
            "kind": "LinuxSyslogCollection",
            "properties": {
              "state": "Enabled"
            }
          },
          {
            "apiVersion": "2020-03-01-preview",
            "type": "dataSources",
            "name": "DiskPerfCounters",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/GEN-UNIQUE"
            ],
            "kind": "LinuxPerformanceObject",
            "properties": {
              "performanceCounters": [
                {
                  "counterName": "% Used Inodes"
                },
                {
                  "counterName": "Free Megabytes"
                },
                {
                  "counterName": "% Used Space"
                },
                {
                  "counterName": "Disk Transfers/sec"
                },
                {
                  "counterName": "Disk Reads/sec"
                },
                {
                  "counterName": "Disk Writes/sec"
                },
                {
                  "counterName": "Disk Read Bytes/sec"
                },
                {
                  "counterName": "Disk Write Bytes/sec"
                }
              ],
              "objectName": "Logical Disk",
              "instanceName": "*",
              "intervalSeconds": 10
            }
          },
          {
            "apiVersion": "2020-03-01-preview",
            "type": "dataSources",
            "name": "ProcessorPerfCounters",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/GEN-UNIQUE"
            ],
            "kind": "LinuxPerformanceObject",
            "properties": {
              "performanceCounters": [
                {
                  "counterName": "% Processor Time"
                },
                {
                  "counterName": "% User Time"
                },
                {
                  "counterName": "% Privileged Time"
                },
                {
                  "counterName": "% IO Wait Time"
                },
                {
                  "counterName": "% Idle Time"
                },
                {
                  "counterName": "% Interrupt Time"
                }
              ],
              "objectName": "Processor",
              "instanceName": "*",
              "intervalSeconds": 10
            }
          },
          {
            "apiVersion": "2020-03-01-preview",
            "type": "dataSources",
            "name": "ProcessPerfCounters",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/GEN-UNIQUE"
            ],
            "kind": "LinuxPerformanceObject",
            "properties": {
              "performanceCounters": [
                {
                  "counterName": "% User Time"
                },
                {
                  "counterName": "% Privileged Time"
                },
                {
                  "counterName": "Used Memory"
                },
                {
                  "counterName": "Virtual Shared Memory"
                }
              ],
              "objectName": "Process",
              "instanceName": "*",
              "intervalSeconds": 10
            }
          },
          {
            "apiVersion": "2020-03-01-preview",
            "type": "dataSources",
            "name": "SystemPerfCounters",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/GEN-UNIQUE"
            ],
            "kind": "LinuxPerformanceObject",
            "properties": {
              "performanceCounters": [
                {
                  "counterName": "Processes"
                }
              ],
              "objectName": "System",
              "instanceName": "*",
              "intervalSeconds": 10
            }
          },
          {
            "apiVersion": "2020-03-01-preview",
            "type": "dataSources",
            "name": "NetworkPerfCounters",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/GEN-UNIQUE"
            ],
            "kind": "LinuxPerformanceObject",
            "properties": {
              "performanceCounters": [
                {
                  "counterName": "Total Bytes Transmitted"
                },
                {
                  "counterName": "Total Bytes Received"
                },
                {
                  "counterName": "Total Bytes"
                },
                {
                  "counterName": "Total Packets Transmitted"
                },
                {
                  "counterName": "Total Packets Received"
                },
                {
                  "counterName": "Total Rx Errors"
                },
                {
                  "counterName": "Total Tx Errors"
                },
                {
                  "counterName": "Total Collisions"
                }
              ],
              "objectName": "Network",
              "instanceName": "*",
              "intervalSeconds": 10
            }
          },
          {
            "apiVersion": "2020-03-01-preview",
            "type": "dataSources",
            "name": "MemorydataSources",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/GEN-UNIQUE"
            ],
            "kind": "LinuxPerformanceObject",
            "properties": {
              "performanceCounters": [
                {
                  "counterName": "Available MBytes Memory"
                },
                {
                  "counterName": "% Available Memory"
                },
                {
                  "counterName": "Used Memory MBytes"
                },
                {
                  "counterName": "% Used Memory"
                }
              ],
              "objectName": "Memory",
              "instanceName": "*",
              "intervalSeconds": 10
            }
          },
          {
            "apiVersion": "2020-03-01-preview",
            "type": "dataSources",
            "name": "SampleLinuxPerfCollection1",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/GEN-UNIQUE"
            ],
            "kind": "LinuxPerformanceCollection",
            "properties": {
              "state": "Enabled"
            }
          }
        ]
      },
      {
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "2018-09-01",
        "name": "privatelink[if(equals(toLower(environment().name), 'azureusgovernment'), '.vaultcore.usgovcloudapi.net', '.vaultcore.azure.net')]",
        "location": "global",
        "properties": {
          "maxNumberOfRecordSets": 25000,
          "maxNumberOfVirtualNetworkLinks": 1000,
          "maxNumberOfVirtualNetworkLinksWithRegistration": 100
        }
      },
      {
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "2018-09-01",
        "name": "[variables('blobPrivateDnsZoneName')]",
        "location": "global",
        "properties": {
          "maxNumberOfRecordSets": 25000,
          "maxNumberOfVirtualNetworkLinks": 1000,
          "maxNumberOfVirtualNetworkLinksWithRegistration": 100
        }
      },
      {
        "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
        "apiVersion": "2018-09-01",
        "name": "[concat(variables('keyVaultPrivateDnsZoneName'), '/link_to_', toLower(parameters('virtualNetworkName')))]",
        "location": "global",
        "dependsOn": [
          "Microsoft.Network/privateDnsZones/privatelink[if(equals(toLower(environment().name), 'azureusgovernment'), '.vaultcore.usgovcloudapi.net', '.vaultcore.azure.net')]",
          "Microsoft.Network/virtualNetworks/UbuntuVnet"
        ],
        "properties": {
          "registrationEnabled": false,
          "virtualNetwork": {
            "id": "Microsoft.Network/virtualNetworks/UbuntuVnet"
          }
        }
      },
      {
        "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
        "apiVersion": "2018-09-01",
        "name": "[concat(variables('blobPrivateDnsZoneName'), '/link_to_', toLower(parameters('virtualNetworkName')))]",
        "location": "global",
        "dependsOn": [
          "[variables('blobPrivateDnsZoneId')]",
          "[variables('vnetId')]"
        ],
        "properties": {
          "registrationEnabled": false,
          "virtualNetwork": {
            "id": "Microsoft.Network/virtualNetworks/UbuntuVnet"
          }
        }
      },
      {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2020-04-01",
        "name": "KeyVaultPrivateEndpoint",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/UbuntuVnet",
          "Microsoft.KeyVault/vaults/[concat('vault', uniqueString(resourceGroup().id))]"
        ],
        "properties": {
          "privateLinkServiceConnections": [
            {
              "name": "KeyVaultPrivateEndpoint",
              "properties": {
                "privateLinkServiceId": "Microsoft.KeyVault/vaults/[concat('vault', uniqueString(resourceGroup().id))]",
                "groupIds": [
                  "vault"
                ]
              }
            }
          ],
          "subnet": {
            "id": "Microsoft.Network/virtualNetworks/subnets/UbuntuVnet/DefaultSubnet"
          },
          "customDnsConfigs": [
            {
              "fqdn": "[concat('vault', uniqueString(resourceGroup().id))][if(equals(toLower(environment().name), 'azureusgovernment'), '.vaultcore.usgovcloudapi.net', '.vaultcore.azure.net')]"
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2020-04-01",
        "name": "BlobStorageAccountPrivateEndpoint",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/UbuntuVnet",
          "Microsoft.Storage/storageAccounts/[concat('boot', uniquestring(resourceGroup().id))]"
        ],
        "properties": {
          "privateLinkServiceConnections": [
            {
              "name": "BlobStorageAccountPrivateEndpoint",
              "properties": {
                "privateLinkServiceId": "Microsoft.Storage/storageAccounts/[concat('boot', uniquestring(resourceGroup().id))]",
                "groupIds": [
                  "blob"
                ]
              }
            }
          ],
          "subnet": {
            "id": "Microsoft.Network/virtualNetworks/subnets/UbuntuVnet/DefaultSubnet"
          },
          "customDnsConfigs": [
            {
              "fqdn": "[concat(parameters('blobStorageAccountName'), variables('blobPublicDNSZoneForwarder'))]"
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2020-03-01",
        "name": "KeyVaultPrivateEndpoint/vaultPrivateDnsZoneGroup",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.KeyVault/vaults/[concat('vault', uniqueString(resourceGroup().id))]",
          "Microsoft.Network/privateDnsZones/privatelink[if(equals(toLower(environment().name), 'azureusgovernment'), '.vaultcore.usgovcloudapi.net', '.vaultcore.azure.net')]",
          "Microsoft.Network/privateEndpoints/KeyVaultPrivateEndpoint"
        ],
        "properties": {
          "privateDnsZoneConfigs": [
            {
              "name": "dnsConfig",
              "properties": {
                "privateDnsZoneId": "Microsoft.Network/privateDnsZones/privatelink[if(equals(toLower(environment().name), 'azureusgovernment'), '.vaultcore.usgovcloudapi.net', '.vaultcore.azure.net')]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2020-03-01",
        "name": "BlobStorageAccountPrivateEndpoint/blobPrivateDnsZoneGroup",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[variables('blobPrivateDnsZoneId')]",
          "[variables('blobStorageAccountPrivateEndpointId')]"
        ],
        "properties": {
          "privateDnsZoneConfigs": [
            {
              "name": "dnsConfig",
              "properties": {
                "privateDnsZoneId": "[variables('blobPrivateDnsZoneId')]"
              }
            }
          ]
        }
      }
    ],
    "outputs": {
      "keyVaultPrivateEndpoint": {
        "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('keyVaultPrivateEndpointName')), '2020-04-01', 'Full')]",
        "type": "object"
      },
      "blobStorageAccountPrivateEndpoint": {
        "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('blobStorageAccountPrivateEndpointName')), '2020-04-01', 'Full')]",
        "type": "object"
      },
      "keyVault": {
        "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2019-09-01', 'Full')]",
        "type": "object"
      },
      "blobStorageAccount": {
        "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('blobStorageAccountName')), '2019-06-01', 'Full')]",
        "type": "object"
      },
      "adminUsername": {
        "value": "[parameters('adminUsername')]",
        "type": "string"
      },
      "workspaceName": {
        "value": "[parameters('workspaceName')]",
        "type": "string"
      },
      "scriptFileUri": {
        "value": "[variables('scriptFileUri')]",
        "type": "string"
      },
      "environment": {
        "value": "[environment()]",
        "type": "object"
      }
    },
    "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
  }
}