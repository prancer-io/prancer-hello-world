{
  "structure": "filesystem",
  "error": null,
  "reference": "master",
  "contentType": "json",
  "source": "gitConnectorAzureQuickStart",
  "paths": [
    "/application-workloads/safekit/safekit-cluster-farm/nestedtemplates/cluster.json"
  ],
  "timestamp": 1642962893443,
  "queryuser": null,
  "checksum": "99914b932bd37a50b983c5e7c90ae93b",
  "node": {
    "masterSnapshotId": "ARM_TEMPLATE_SNAPSHOT",
    "type": "arm",
    "collection": "armtemplate",
    "paths": [
      "/application-workloads/safekit/safekit-cluster-farm/nestedtemplates/cluster.json"
    ],
    "snapshotId": "ARM_TEMPLATE_SNAPSHOT378",
    "status": "active",
    "validate": true,
    "resourceTypes": [
      "microsoft.network/publicipaddresses",
      "microsoft.network/virtualnetworks",
      "microsoft.network/loadbalancers",
      "microsoft.resources/deployments",
      "microsoft.network/networkinterfaces",
      "microsoft.authorization/roleassignments",
      "microsoft.compute/virtualmachines",
      "microsoft.network/networksecuritygroups",
      "microsoft.storage/storageaccounts"
    ]
  },
  "snapshotId": "ARM_TEMPLATE_SNAPSHOT378",
  "collection": "armtemplate",
  "json": {
    "contentVersion": "1.0.0.0",
    "parameters": {
      "OS": {
        "type": "string",
        "metadata": {
          "description": "Operating System to install"
        }
      },
      "clusterNodes": {
        "type": "int",
        "metadata": {
          "description": "number of VM nodes to create"
        },
        "defaultValue": 2,
        "allowedValues": [
          1,
          2,
          3,
          4
        ]
      },
      "vmSize": {
        "type": "string",
        "metadata": {
          "description": "the VM size for all nodes"
        },
        "defaultValue": "Standard_A2_v2"
      },
      "adminUser": {
        "type": "string",
        "metadata": {
          "description": "User for the Virtual Machines."
        }
      },
      "adminPassword": {
        "type": "securestring",
        "metadata": {
          "description": "Password for the Virtual Machines."
        }
      },
      "moduleUrl": {
        "type": "string",
        "metadata": {
          "description": "url of the application module to install on all nodes (optional)"
        },
        "defaultValue": ""
      },
      "moduleName": {
        "type": "string",
        "metadata": {
          "description": "name of the application module to install on all nodes (optional)"
        },
        "defaultValue": "mirror"
      },
      "VIPDnsLabel": {
        "type": "string",
        "metadata": {
          "description": "Public VIP dns label (optional. If set, an additionnal Standard SKU, unassociated public IP will be created)"
        },
        "defaultValue": ""
      },
      "VMDnsPrefix": {
        "type": "string",
        "metadata": {
          "description": "Public VM IP dns label prefix"
        }
      },
      "Loadbalancer": {
        "type": "string",
        "metadata": {
          "description": "loadbalancer (optional. If set, a loadbalancer will be created, with the VIP as frontend and the VMs in the backend pool."
        },
        "defaultValue": "none",
        "allowedValues": [
          "External",
          "none"
        ]
      },
      "azurePwsh": {
        "type": "string",
        "metadata": {
          "description": "install azure powershell module (optional)"
        },
        "defaultValue": "no",
        "allowedValues": [
          "yes",
          "no"
        ]
      },
      "location": {
        "type": "string",
        "metadata": {
          "description": "resources location"
        }
      },
      "safekitFileUri": {
        "type": "string",
        "metadata": {
          "description": "url of safekit package"
        },
        "defaultValue": ""
      },
      "_artifactsLocation": {
        "type": "string",
        "metadata": {
          "description": "base URL of deployment resources (template,subtemplates,scripts)"
        }
      },
      "_artifactsLocationSasToken": {
        "type": "securestring",
        "metadata": {
          "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
        }
      }
    },
    "variables": {
      "allvms": [
        "VM1",
        "VM2",
        "VM3",
        "VM4"
      ],
      "vms": "[take(variables('allvms'),parameters('clusterNodes'))]",
      "frontEndIPConfigName": "parameters('VIPDnsLabel')LBFE",
      "lbPoolName": "parameters('VIPDnsLabel')BEP",
      "lbProbeName": "parameters('VIPDnsLabel')LBP",
      "lbName": "parameters('VIPDnsLabel')LB",
      "NetworkContributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
      "ostype": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]",
      "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
      "ips": [
        "10.0.0.10",
        "10.0.0.11",
        "10.0.0.12",
        "10.0.0.13"
      ],
      "sktemplate": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
      "skclustertemplate": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/installCluster.json' ,parameters('_artifactsLocationSasToken')))]",
      "createviptemplate": "[concat(uri(parameters('_artifactsLocation'),'nestedtemplates/createvip.json'),parameters('_artifactsLocationSasToken'))]",
      "skmoduletemplate": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/installModule.json' ,parameters('_artifactsLocationSasToken')))]",
      "NSGName": "SafeKit-NSG",
      "storageAccountName": "[concat(uniquestring(resourceGroup().id,parameters('location')), 'stor')]",
      "lbPoolID": "[if(equals(parameters('LoadBalancer'),'none'),'',resourceId('Microsoft.Network/loadBalancers/backendAddressPools',variables('lbName'),variables('lbPoolName')))]",
      "lbaddrpool1": [
        {
          "id": "[if(equals(parameters('LoadBalancer'),'none'),'',resourceId('Microsoft.Network/loadBalancers/backendAddressPools',variables('lbName'),variables('lbPoolName')))]"
        }
      ],
      "lbaddrpool": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]",
      "WindowsStorageProfile": {
        "imageReference": {
          "publisher": "MicrosoftWindowsServer",
          "offer": "WindowsServer",
          "sku": "OS",
          "version": "latest"
        },
        "osDisk": {
          "createOption": "FromImage"
        }
      },
      "CentosStorageProfile": {
        "imageReference": {
          "publisher": "OpenLogic",
          "offer": "CentOS",
          "sku": "7.5",
          "version": "latest"
        },
        "osDisk": {
          "createOption": "fromImage"
        }
      },
      "linuxConfiguration": {
        "disablePasswordAuthentication": "false"
      },
      "addressPrefix": "10.0.0.0/16",
      "virtualNetworkName": "[concat(resourceGroup().name,'VNET')]",
      "subnetName": "Subnet",
      "subnetPrefix": "10.0.0.0/24"
    },
    "resources": [
      {
        "type": "Microsoft.Network/virtualNetworks",
        "apiVersion": "2020-11-01",
        "name": "[variables('virtualNetworkName')]",
        "location": "location",
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "10.0.0.0/16"
            ]
          },
          "subnets": [
            {
              "name": "Subnet",
              "properties": {
                "addressPrefix": "10.0.0.0/24"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "optionalVip",
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[variables('createviptemplate')]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "VIPDnsLabel": {
              "value": ""
            }
          }
        }
      },
      {
        "condition": "[and(not(empty(parameters('VIPDnsLabel'))),not(equals(parameters('Loadbalancer'),'none')))]",
        "type": "Microsoft.Network/loadBalancers",
        "apiVersion": "2020-11-01",
        "name": "parameters('VIPDnsLabel')LB",
        "location": "location",
        "dependsOn": [
          "optionalVip"
        ],
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "parameters('VIPDnsLabel')LBFE",
              "properties": {
                "publicIPAddress": {
                  "id": "Microsoft.Network/publicIPAddresses/pipparameters('VIPDnsLabel')"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "parameters('VIPDnsLabel')BEP"
            }
          ],
          "loadBalancingRules": [
            {
              "name": "LBRule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "Microsoft.Network/loadBalancers/frontendIPConfigurations/parameters('VIPDnsLabel')LB/parameters('VIPDnsLabel')LBFE"
                },
                "backendAddressPool": {
                  "id": "Microsoft.Network/loadBalancers/backendAddressPools/parameters('VIPDnsLabel')LB/parameters('VIPDnsLabel')BEP"
                },
                "protocol": "tcp",
                "frontendPort": 9453,
                "backendPort": 9453,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 5,
                "probe": {
                  "id": "Microsoft.Network/loadBalancers/probes/parameters('VIPDnsLabel')LB/parameters('VIPDnsLabel')LBP"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "parameters('VIPDnsLabel')LBP",
              "properties": {
                "protocol": "http",
                "port": 9010,
                "requestPath": "/var/modules/mirror/ready.txt",
                "intervalInSeconds": 5,
                "numberOfProbes": 2
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2021-02-01",
        "name": "[variables('storageAccountName')]",
        "location": "location",
        "sku": {
          "name": "Standard_LRS"
        },
        "kind": "Storage"
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2020-11-01",
        "name": "SafeKit-NSG",
        "location": "location",
        "properties": {
          "securityRules": [
            {
              "name": "remoteaccess",
              "properties": {
                "description": "Allow Remote Access",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "[if(equals(variables('ostype'),'linux'),'22','3389')]",
                "sourceAddressPrefix": "Internet",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 100,
                "direction": "Inbound"
              }
            },
            {
              "name": "secconsole",
              "properties": {
                "description": "Allow Web Console Security Access",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "9001",
                "sourceAddressPrefix": "Internet",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 110,
                "direction": "Inbound"
              }
            },
            {
              "name": "webconsole",
              "properties": {
                "description": "Allow Web Console Access",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "9453",
                "sourceAddressPrefix": "Internet",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 120,
                "direction": "Inbound"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-11-01",
        "name": "[concat('pip',variables('vms')[copyIndex()])]",
        "location": "location",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('VMDnsPrefix'),variables('vms')[copyIndex()]))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-11-01",
        "name": "[concat('nic',variables('vms')[copyIndex()])]",
        "location": "location",
        "dependsOn": [
          "[variables('lbName')]",
          "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[copyIndex()]))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",
          "[variables('virtualNetworkName')]"
        ],
        "properties": {
          "networkSecurityGroup": {
            "id": "Microsoft.Network/networkSecurityGroups//SafeKit-NSG"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "(ips)[copyIndex()]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip',variables('vms')[copyIndex()]))]"
                },
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),'Subnet')]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(length(variables('lbPoolID')),0),variables('lbaddrpool1'),variables('lbaddrpool0'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-12-01",
        "name": "(vms)[copyIndex()]",
        "location": "location",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/',concat('nic',variables('vms')[copyIndex()]) )]"
        ],
        "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
        "identity": {
          "type": "systemAssigned"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_A2_v2"
          },
          "osProfile": {
            "computerName": "(vms)[copyIndex()]",
            "adminUsername": "[if(empty(parameters('adminUser')),concat('admin',resourceGroup().name),parameters('adminUser'))]",
            "adminPassword": "adminPassword",
            "linuxConfiguration": "[if(equals(variables('ostype'),'linux'),variables('linuxConfiguration'),'')]"
          },
          "storageProfile": "[if(equals(parameters('OS'),'Linux CentOS'),variables('CentosStorageProfile'),variables('windowsStorageProfile'))]",
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic',variables('vms')[copyIndex()]))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id,variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions/','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(variables('vms')[copyIndex()])), '2020-12-01', 'Full').identity.principalId]"
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "[concat('safekitInstall',variables('vms')[copyIndex()])]",
        "dependsOn": [
          "(vms)[copyIndex()]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/safekitdepl.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "vmname": {
              "value": "(vms)[copyIndex()]"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "azurePwsh": {
              "value": "no"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "safekitFileUri": {
              "value": ""
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "safekitClusterConfig",
        "dependsOn": [
          "skCopy"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/installCluster.json' ,parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "vmname": {
              "value": "(vms)[0]"
            },
            "vmList": {
              "value": "[take(variables('allvms'),parameters('clusterNodes'))]"
            },
            "fqdn": {
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[0]))).dnsSettings.fqdn]"
            },
            "privateIps": {
              "value": [
                "10.0.0.10",
                "10.0.0.11",
                "10.0.0.12",
                "10.0.0.13"
              ]
            },
            "VMDnsPrefix": {
              "value": "VMDnsPrefix"
            },
            "lblist": {
              "value": "[if(greater(length(parameters('VIPDnsLabel')),0),reference('optionalVip').outputs.fqdn.value,'')]"
            },
            "capassword": {
              "value": "AdminPassword"
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "safekitModuleConfig",
        "dependsOn": [
          "safekitClusterConfig"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/installModule.json' ,parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "location"
            },
            "ostype": {
              "value": "[if(equals(parameters('OS'), 'Linux CentOS'),'linux','windows')]"
            },
            "vmname": {
              "value": "(vms)[0]"
            },
            "moduleUrl": {
              "value": ""
            },
            "moduleName": {
              "value": "mirror"
            },
            "_artifactsLocation": {
              "value": "_artifactsLocation"
            },
            "_artifactsLocationSasToken": {
              "value": "_artifactsLocationSasToken"
            }
          }
        }
      }
    ],
    "outputs": {
      "adminUser": {
        "type": "string",
        "value": "[variables('adminUserName')]"
      },
      "fqdn": {
        "type": "string",
        "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[0]))).dnsSettings.fqdn]"
      },
      "Credentials Url": {
        "type": "string",
        "value": "[concat('https://',reference(resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[0]))).dnsSettings.fqdn,':9001/adduser.html')]"
      },
      "Credentials Url Login": {
        "type": "string",
        "value": "user: CA_admin, password: the value of AdminPassword"
      },
      "Console Url": {
        "type": "string",
        "value": "[concat('https://',reference(resourceId('Microsoft.Network/publicIPAddresses/',concat('pip',variables('vms')[0]))).dnsSettings.fqdn,':9453/deploy.html')]"
      },
      "Mosaic URL": {
        "type": "string",
        "value": "[concat('https://',reference('optionalVip').outputs.fqdn.value,':9453/cgi-bin/mosaic?mode=mosaic&arg0=',parameters('moduleName'))]"
      }
    },
    "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
  }
}