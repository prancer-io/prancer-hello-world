{
  "structure": "filesystem",
  "error": null,
  "reference": "master",
  "contentType": "json",
  "source": "gitConnectorAzureQuickStart",
  "paths": [
    "/application-workloads/lansa/lansa-vmss-windows-autoscale-sql-database/azuredeploy.json",
    "/application-workloads/lansa/lansa-vmss-windows-autoscale-sql-database/azuredeploy.parameters.json"
  ],
  "timestamp": 1642962890911,
  "queryuser": null,
  "checksum": "99914b932bd37a50b983c5e7c90ae93b",
  "node": {
    "masterSnapshotId": "ARM_TEMPLATE_SNAPSHOT",
    "type": "arm",
    "collection": "armtemplate",
    "paths": [
      "/application-workloads/lansa/lansa-vmss-windows-autoscale-sql-database/azuredeploy.json",
      "/application-workloads/lansa/lansa-vmss-windows-autoscale-sql-database/azuredeploy.parameters.json"
    ],
    "snapshotId": "ARM_TEMPLATE_SNAPSHOT221",
    "status": "active",
    "validate": true,
    "resourceTypes": [
      "microsoft.network/publicipaddresses",
      "microsoft.network/virtualnetworks",
      "microsoft.network/loadbalancers",
      "microsoft.compute/virtualmachinescalesets",
      "microsoft.sql/servers",
      "microsoft.insights/autoscalesettings",
      "microsoft.network/applicationgateways"
    ]
  },
  "snapshotId": "ARM_TEMPLATE_SNAPSHOT221",
  "collection": "armtemplate",
  "json": {
    "contentVersion": "1.0.0.0",
    "parameters": {
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Resource Group Location."
        }
      },
      "msiURL": {
        "type": "string",
        "metadata": {
          "description": "URL of the LANSA MSI which will be installed on each virtual machine."
        },
        "value": "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi"
      },
      "virtualMachineSize": {
        "type": "string",
        "defaultValue": "Standard_B4ms",
        "metadata": {
          "description": "Size of the Virtual Machines in the Virtual Machine Scale Set."
        }
      },
      "dbVirtualMachineSize": {
        "type": "string",
        "defaultValue": "Standard_B2ms",
        "metadata": {
          "description": "Size of the Virtual Machine which manages the database."
        }
      },
      "stackName": {
        "type": "string",
        "metadata": {
          "description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended. Some identifiers use precisely 9 characters from this name and so it can be useful to use exactly 9. The template pads it out or truncates it as necessary to make it 9 characters long where required."
        },
        "minLength": 3,
        "maxLength": 61,
        "value": "GEN-UNIQUE-10"
      },
      "applicationGatewaySkuTier": {
        "type": "string",
        "allowedValues": [
          "Standard",
          "WAF"
        ],
        "defaultValue": "Standard",
        "metadata": {
          "description": "Application Gateway SKU Tier"
        }
      },
      "applicationGatewaySkuName": {
        "type": "string",
        "allowedValues": [
          "Standard_Small",
          "Standard_Medium",
          "Standard_Large",
          "WAF_Medium",
          "WAF_Large",
          "WAF_v2"
        ],
        "defaultValue": "Standard_Medium",
        "metadata": {
          "description": "Application Gateway SKU Name"
        }
      },
      "applicationGatewayCapacity": {
        "type": "int",
        "defaultValue": 2,
        "metadata": {
          "description": "Number of Application Gateway instances"
        }
      },
      "certificateBase64Encoded": {
        "type": "string",
        "metadata": {
          "description": "Base 64 encoded String representing the SSL certificate"
        },
        "value": "GEN-SELFSIGNED-CERT-PFXDATA"
      },
      "certificatePassword": {
        "type": "securestring",
        "metadata": {
          "description": "SSL certificate password"
        },
        "value": "GEN-SELFSIGNED-CERT-PASSWORD"
      },
      "minimumInstanceCount": {
        "type": "int",
        "defaultValue": 1,
        "metadata": {
          "description": "Minimum number of Virtual Machine instances (1 or more)."
        },
        "minValue": 1,
        "maxValue": 100
      },
      "maximumInstanceCount": {
        "type": "int",
        "defaultValue": 100,
        "metadata": {
          "description": "Maximum number of Virtual Machine instances (100 or less)."
        },
        "minValue": 1,
        "maxValue": 100
      },
      "databaseNewOrExisting": {
        "type": "string",
        "defaultValue": "new",
        "allowedValues": [
          "new",
          "existing"
        ],
        "metadata": {
          "description": "Determines whether a new SQL database should be provisioned or to use an existing database. Parameters which are relevant to choosing 'new' are prefixed 'New DB'. Parameters which are relevant to choosing 'existing' are prefixed 'Existing DB'."
        }
      },
      "databaseType": {
        "type": "string",
        "defaultValue": "SQLAZURE",
        "allowedValues": [
          "MSSQLS",
          "SQLAZURE",
          "MYSQL"
        ],
        "metadata": {
          "description": "Existing DB. Refer to LANSA documentation for an explanation of each Database Type and the supported versions of the database servers. DO NOT CHANGE THIS IF CREATING A NEW DATABASE. IT MUST BE SET TO SQLAZURE."
        }
      },
      "databaseServerName": {
        "type": "string",
        "defaultValue": "lansa",
        "metadata": {
          "description": "Existing DB. The name of the existing Database Server to connect to. If the name has /MSSQLSERVER appended, omit it."
        },
        "value": "GEN-UNIQUE-10"
      },
      "databaseName": {
        "type": "string",
        "defaultValue": "lansa",
        "metadata": {
          "description": "The name of the new database to create or name of the existing database to connect to."
        }
      },
      "databaseLogin": {
        "type": "string",
        "metadata": {
          "description": "The admin user of the Azure SQL Database"
        },
        "value": "GEN-UNIQUE-10"
      },
      "databaseLoginPassword": {
        "type": "securestring",
        "metadata": {
          "description": "The password of the admin user of the Azure SQL Database"
        },
        "value": "GEN-PASSWORD"
      },
      "collation": {
        "type": "string",
        "defaultValue": "SQL_Latin1_General_CP1_CI_AS",
        "metadata": {
          "description": "New DB. The new database collation for governing the proper use of characters."
        }
      },
      "edition": {
        "type": "string",
        "defaultValue": "Standard",
        "allowedValues": [
          "Basic",
          "Standard",
          "Premium"
        ],
        "metadata": {
          "description": "New DB. The type of database to create."
        }
      },
      "requestedServiceObjectiveName": {
        "type": "string",
        "defaultValue": "S2",
        "allowedValues": [
          "Basic",
          "S0",
          "S1",
          "S2",
          "S3",
          "S4",
          "S6",
          "S7",
          "S9",
          "S12",
          "P1",
          "P2",
          "P4",
          "P6",
          "P11",
          "P15"
        ],
        "metadata": {
          "description": "New DB. Describes the performance level for Edition"
        }
      },
      "maxSizeBytes": {
        "type": "string",
        "defaultValue": "1073741824",
        "metadata": {
          "description": "New DB. The maximum size, in bytes, for the new database"
        }
      },
      "adminUsername": {
        "type": "string",
        "metadata": {
          "description": "Admin username on all VMs."
        },
        "value": "GEN_UNIQUE-10"
      },
      "adminPassword": {
        "type": "securestring",
        "metadata": {
          "description": "Admin password on all VMs."
        },
        "value": "GEN-PASSWORD"
      },
      "webUsername": {
        "type": "string",
        "metadata": {
          "description": "Web Server username on all VMs. This must be different to the Admin Username."
        },
        "value": "GEN_UNIQUE-10"
      },
      "webPassword": {
        "type": "securestring",
        "metadata": {
          "description": "Web Server password on all VMs."
        },
        "value": "GEN-PASSWORD"
      },
      "webServerMaxConnect": {
        "type": "string",
        "defaultValue": "20",
        "metadata": {
          "description": "The maximum number of LANSA jobs to run on each Web Server. Setting triggerWebConfig will cause this value to be updated."
        }
      },
      "installMSI": {
        "type": "string",
        "defaultValue": "0",
        "metadata": {
          "description": "Install the MSI: Set this to 1 to execute an MSI install. Usually set to 0 when updating the stack"
        }
      },
      "updateMSI": {
        "type": "string",
        "defaultValue": "0",
        "metadata": {
          "description": "Update Stack: Set this to 1 to execute an MSI Upgrade. Obtains the specified MSI and installs it. Ensure the LansaMSI parameter is set correctly. If the LansaMSI parameter is not different a repair will be performed"
        }
      },
      "uninstallMSI": {
        "type": "string",
        "defaultValue": "0",
        "metadata": {
          "description": "Uninstall the MSI: Set this to 1 to uninstall the MSI. The MSI used to uninstall, is the last one that was installed. It is called c:\\lansa\\MyApp.msi"
        }
      },
      "triggerWebConfig": {
        "type": "string",
        "defaultValue": "0",
        "metadata": {
          "description": "Update Stack: Set this to 1 to update the web configuration"
        }
      },
      "imageOffer": {
        "type": "string",
        "defaultValue": "lansa-scalable-license",
        "allowedValues": [
          "lansa-scalable-license",
          "lansa-scalable-license-preview"
        ],
        "metadata": {
          "description": "The offer of the image. Allowed values: lansa-scalable-license, lansa-scalable-license-preview"
        }
      },
      "gitBranch": {
        "type": "string",
        "defaultValue": "support/L4W14200_scalable",
        "metadata": {
          "description": "Git Branch"
        }
      },
      "trace": {
        "type": "string",
        "defaultValue": "N",
        "allowedValues": [
          "Y",
          "N"
        ],
        "metadata": {
          "description": "Switch tracing on. Allowed values Y or N"
        }
      },
      "fixLicense": {
        "type": "string",
        "defaultValue": "0",
        "metadata": {
          "description": "Re-run licensing. It is unlikely that this parameter needs to be used"
        }
      }
    },
    "variables": {
      "isNewDatabase": false,
      "namingInfix": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]",
      "longNamingInfix": "[toLower(parameters('stackName'))]",
      "dblongNamingInfix": "[toLower(concat('db',parameters('stackName')))]",
      "aglongNamingInfix": "[toLower(concat('ag',parameters('stackName')))]",
      "dbvmssName": "[toLower(substring(concat('db',parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]",
      "addressPrefix": "10.0.0.0/16",
      "subnetPrefix": "10.0.0.0/24",
      "virtualNetworkName": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]vnet",
      "publicIPAddressName": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]pip",
      "dbpublicIPAddressName": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]dbpip",
      "subnetName": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]subnet",
      "loadBalancerName": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]lb",
      "lbFrontEndName": "LoadBalancerFrontEnd",
      "lbProbeName": "LoadBalancerProbe",
      "dbloadBalancerName": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]dblb",
      "dblbFrontEndName": "dbLoadBalancerFrontEnd",
      "dblbProbeName": "dbLoadBalancerProbe",
      "publicIPAddressID": "Microsoft.Network/publicIPAddresses/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]pip",
      "dbpublicIPAddressID": "Microsoft.Network/publicIPAddresses/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]dbpip",
      "natPoolName": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]natpool",
      "bePoolName": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]bepool",
      "dbbePoolName": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]dbbepool",
      "natStartPort": 50000,
      "natEndPort": 50119,
      "natBackendPort": 3389,
      "nicName": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]nic",
      "ipConfigName": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]ipconfig",
      "frontEndIPConfigID": "Microsoft.Network/loadBalancers/frontendIPConfigurations/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]lb/LoadBalancerFrontEnd",
      "imagePublisher": "lansa",
      "imageSku": "lansa-scalable-license-14-2",
      "osType": {
        "publisher": "lansa",
        "offer": "lansa-scalable-license",
        "sku": "lansa-scalable-license-14-2",
        "version": "latest"
      },
      "imageReference": {
        "publisher": "lansa",
        "offer": "lansa-scalable-license",
        "sku": "lansa-scalable-license-14-2",
        "version": "latest"
      },
      "sqlserverName": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]sqlserver",
      "gitRepo": "https://raw.githubusercontent.com/robe070/cookbooks/",
      "gitRefreshName": "git-pull.ps1",
      "gitRefreshUri": "https://raw.githubusercontent.com/robe070/cookbooks/support/L4W14200_scalable/scripts/git-pull.ps1",
      "q": "'",
      "agPublicIPAddressName": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-agpip",
      "agPublicIPAddressID": "Microsoft.Network/publicIPAddresses/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-agpip",
      "agSubnetPrefix": "10.0.1.0/24",
      "agSubnetName": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-agsubnet",
      "agSubnetID": "Microsoft.Network/virtualNetworks/subnets/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]vnet/agsubnetName",
      "agName": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-ag",
      "agHttpListenerName": "appGatewayHttpListener",
      "agFrontendIPName": "appGatewayFrontendIP",
      "agFrontendPortName": "appGatewayFrontendPort",
      "agSslCertName": "appGatewaySslCert",
      "agBackendHttpSettingsName": "appGatewayBackendHttpSettings",
      "agBackendAddressPoolName": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-agpool"
    },
    "resources": [
      {
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]vnet",
        "location": "[resourceGroup().location]",
        "apiVersion": "2019-08-01",
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "10.0.0.0/16"
            ]
          },
          "subnets": [
            {
              "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]subnet",
              "properties": {
                "addressPrefix": "10.0.0.0/24"
              }
            },
            {
              "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-agsubnet",
              "properties": {
                "addressPrefix": "10.0.1.0/24"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]pip",
        "location": "[resourceGroup().location]",
        "apiVersion": "2019-08-01",
        "properties": {
          "publicIPAllocationMethod": "Dynamic",
          "dnsSettings": {
            "domainNameLabel": "[toLower(parameters('stackName'))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/loadBalancers",
        "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]lb",
        "location": "[resourceGroup().location]",
        "apiVersion": "2019-08-01",
        "dependsOn": [
          "Microsoft.Network/publicIPAddresses//[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]pip"
        ],
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "LoadBalancerFrontEnd",
              "properties": {
                "publicIPAddress": {
                  "id": "Microsoft.Network/publicIPAddresses/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]pip"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]bepool"
            }
          ],
          "inboundNatPools": [
            {
              "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]natpool",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "Microsoft.Network/loadBalancers/frontendIPConfigurations/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]lb/LoadBalancerFrontEnd"
                },
                "protocol": "Tcp",
                "frontendPortRangeStart": 50000,
                "frontendPortRangeEnd": 50119,
                "backendPort": 3389
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "lbrule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "Microsoft.Network/loadBalancers/frontendIPConfigurations/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]lb/LoadBalancerFrontEnd"
                },
                "backendAddressPool": {
                  "id": "Microsoft.Network/loadBalancers/backendAddressPools/loadbalancerName/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]bepool"
                },
                "probe": {
                  "id": "Microsoft.Network/loadBalancers/probes/loadbalancerName/LoadBalancerProbe"
                },
                "protocol": "Tcp",
                "loadDistribution": "SourceIP",
                "frontendPort": 80,
                "backendPort": 80,
                "idleTimeoutInMinutes": 15
              }
            }
          ],
          "probes": [
            {
              "name": "LoadBalancerProbe",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "requestPath": "cgi-bin/probe"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]dbpip",
        "location": "[resourceGroup().location]",
        "apiVersion": "2019-08-01",
        "properties": {
          "publicIPAllocationMethod": "Dynamic",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat('db',parameters('stackName')))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/loadBalancers",
        "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]dblb",
        "location": "[resourceGroup().location]",
        "apiVersion": "2019-08-01",
        "dependsOn": [
          "Microsoft.Network/publicIPAddresses//[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]dbpip"
        ],
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "dbLoadBalancerFrontEnd",
              "properties": {
                "publicIPAddress": {
                  "id": "Microsoft.Network/publicIPAddresses/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]dbpip"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]dbbepool"
            }
          ],
          "loadBalancingRules": [
            {
              "name": "lbrule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "Microsoft.Network/loadBalancers/frontendIPConfigurations/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]dblb/dbLoadBalancerFrontEnd"
                },
                "backendAddressPool": {
                  "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]dblb/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]dbbepool"
                },
                "probe": {
                  "id": "Microsoft.Network/loadBalancers/probes/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]dblb/dbLoadBalancerProbe"
                },
                "protocol": "Tcp",
                "loadDistribution": "SourceIP",
                "frontendPort": 50000,
                "backendPort": 3389,
                "idleTimeoutInMinutes": 15
              }
            }
          ],
          "probes": [
            {
              "name": "dbLoadBalancerProbe",
              "properties": {
                "protocol": "Tcp",
                "port": 3389,
                "intervalInSeconds": 15,
                "numberOfProbes": 2
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachineScaleSets",
        "name": "[toLower(substring(concat('db',parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]",
        "location": "[resourceGroup().location]",
        "apiVersion": "2019-07-01",
        "dependsOn": [
          "Microsoft.Network/loadBalancers//[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]lb",
          "Microsoft.Network/virtualNetworks//[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]vnet",
          "Microsoft.Sql/servers//[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]sqlserver",
          "Microsoft.Sql/servers/databases//[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]sqlserver/lansa",
          "Microsoft.Network/applicationGateways//[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-ag"
        ],
        "sku": {
          "name": "Standard_B2ms",
          "tier": "Standard",
          "capacity": 1
        },
        "plan": {
          "name": "imageSKU",
          "product": "lansa-scalable-license",
          "publisher": "lansa"
        },
        "properties": {
          "overprovision": false,
          "upgradePolicy": {
            "mode": "Automatic"
          },
          "virtualMachineProfile": {
            "storageProfile": {
              "osDisk": {
                "caching": "ReadOnly",
                "createOption": "FromImage"
              },
              "imageReference": {
                "publisher": "lansa",
                "offer": "lansa-scalable-license",
                "sku": "lansa-scalable-license-14-2",
                "version": "latest"
              }
            },
            "osProfile": {
              "computerNamePrefix": "[toLower(substring(concat('db',parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]",
              "adminUsername": "GEN_UNIQUE-10",
              "adminPassword": "GEN-PASSWORD",
              "windowsConfiguration": {
                "provisionVMAgent": true
              }
            },
            "networkProfile": {
              "networkInterfaceConfigurations": [
                {
                  "name": "db[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]nic",
                  "properties": {
                    "primary": true,
                    "ipConfigurations": [
                      {
                        "name": "db[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]ipconfig",
                        "properties": {
                          "subnet": {
                            "id": "Microsoft.Network/virtualNetworks/subnets/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]vnet/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]subnet"
                          },
                          "loadBalancerBackendAddressPools": [
                            {
                              "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]dblb/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]dbbepool"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "extensionProfile": {
              "extensions": [
                {
                  "name": "FirstInstall",
                  "properties": {
                    "publisher": "Microsoft.Compute",
                    "type": "CustomScriptExtension",
                    "typeHandlerVersion": "1.9",
                    "autoUpgradeMinorVersion": true,
                    "forceUpdateTag": "000UninstallMSI0Nsupport/L4W14200_scalable",
                    "settings": {
                      "fileUris": [
                        "https://raw.githubusercontent.com/robe070/cookbooks/support/L4W14200_scalable/scripts/git-pull.ps1"
                      ]
                    },
                    "protectedSettings": {
                      "commandToExecute": "[concat('powershell -NoProfile -ExecutionPolicy unrestricted -command \"& {pushd;./',variables('gitRefreshName'), ' ', parameters('gitBranch'), ';popd;', 'pushd;c:\\lansa\\scripts\\azure-custom-script.ps1 ', '-server_name ',variables('Q'), if(variables('isNewDatabase'), reference(variables('sqlserverName')).fullyQualifiedDomainName, parameters('databaseServerName')), variables('Q'), ' -DBUT ', variables('Q'), parameters('databaseType'), variables('Q'), ' -dbname ', variables('Q'), parameters('databaseName'), variables('Q'), ' -dbuser ', variables('Q'), parameters('databaseLogin'), variables('Q'), ' -dbpassword ', variables('Q'),  parameters('databaseLoginPassword'), variables('Q'), ' -webuser ', variables('Q'),  parameters('webUsername'), variables('Q'), ' -webpassword ', variables('Q'),  parameters('webPassword'), variables('Q'), ' -MSIuri ', variables('Q'),  parameters('msiURL'), variables('Q'),  ' -maxconnections ', variables('Q'),  parameters('webServerMaxConnect'), variables('Q'), ' -trace ', variables('Q'),  parameters('trace'), variables('Q'), ' -installMSI ', variables('Q'),  parameters('installMSI'), variables('Q'), ' -updateMSI ', variables('Q'),  parameters('updateMSI'), variables('Q'),' -triggerWebConfig ', variables('Q'),  parameters('triggerWebConfig'), variables('Q'),' -UninstallMSI ', variables('Q'),  parameters('UninstallMSI'), variables('Q'), ' -fixLicense ', variables('Q'),  parameters('fixLicense'), variables('Q'), ';if ($LASTEXITCODE -ne 0) {Write-Error (\"MSI Install failed\");exit $LASTEXITCODE}; exit 0;popd;}\"')]"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachineScaleSets",
        "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]",
        "location": "[resourceGroup().location]",
        "apiVersion": "2019-07-01",
        "dependsOn": [
          "Microsoft.Network/loadBalancers//[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]lb",
          "Microsoft.Network/virtualNetworks//[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]vnet",
          "Microsoft.Sql/servers//[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]sqlserver",
          "Microsoft.Sql/servers/databases//[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]sqlserver/lansa",
          "Microsoft.Compute/virtualMachineScaleSets//[toLower(substring(concat('db',parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]"
        ],
        "sku": {
          "name": "Standard_B4ms",
          "tier": "Standard",
          "capacity": 1
        },
        "plan": {
          "name": "imageSKU",
          "product": "lansa-scalable-license",
          "publisher": "lansa"
        },
        "properties": {
          "overprovision": false,
          "upgradePolicy": {
            "mode": "Automatic"
          },
          "virtualMachineProfile": {
            "storageProfile": {
              "osDisk": {
                "caching": "ReadOnly",
                "createOption": "FromImage"
              },
              "imageReference": {
                "publisher": "lansa",
                "offer": "lansa-scalable-license",
                "sku": "lansa-scalable-license-14-2",
                "version": "latest"
              }
            },
            "osProfile": {
              "computerNamePrefix": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]",
              "adminUsername": "GEN_UNIQUE-10",
              "adminPassword": "GEN-PASSWORD",
              "windowsConfiguration": {
                "provisionVMAgent": true
              }
            },
            "networkProfile": {
              "networkInterfaceConfigurations": [
                {
                  "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]nic",
                  "properties": {
                    "primary": true,
                    "ipConfigurations": [
                      {
                        "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]ipconfig",
                        "properties": {
                          "subnet": {
                            "id": "Microsoft.Network/virtualNetworks/subnets/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]vnet/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]subnet"
                          },
                          "loadBalancerBackendAddressPools": [
                            {
                              "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]lb/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]bepool"
                            }
                          ],
                          "loadBalancerInboundNatPools": [
                            {
                              "id": "Microsoft.Network/loadBalancers/inboundNatPools/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]lb/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]natpool"
                            }
                          ],
                          "applicationGatewayBackendAddressPools": [
                            {
                              "id": "Microsoft.Network/applicationGateways/backendAddressPools/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-ag/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-agpool"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "extensionProfile": {
              "extensions": [
                {
                  "name": "MainInstall",
                  "properties": {
                    "publisher": "Microsoft.Compute",
                    "type": "CustomScriptExtension",
                    "typeHandlerVersion": "1.9",
                    "autoUpgradeMinorVersion": true,
                    "forceUpdateTag": "000UninstallMSI0Nsupport/L4W14200_scalable",
                    "settings": {
                      "fileUris": [
                        "https://raw.githubusercontent.com/robe070/cookbooks/support/L4W14200_scalable/scripts/git-pull.ps1"
                      ]
                    },
                    "protectedSettings": {
                      "commandToExecute": "[concat('powershell -NoProfile -ExecutionPolicy unrestricted -command \"& {pushd;./',variables('gitRefreshName'), ' ', parameters('gitBranch'), ';popd;', 'pushd;c:\\lansa\\scripts\\azure-custom-script.ps1 ', '-SUDB \"0\" -server_name ', variables('Q'),  if(variables('isNewDatabase'), reference(variables('sqlserverName')).fullyQualifiedDomainName, parameters('databaseServerName')), variables('Q'), ' -DBUT ', variables('Q'), parameters('databaseType'), variables('Q'),  ' -dbname ', variables('Q'),  parameters('databaseName'), variables('Q'), ' -dbuser ', variables('Q'),  parameters('databaseLogin'), variables('Q'), ' -dbpassword ', variables('Q'),  parameters('databaseLoginPassword'), variables('Q'), ' -webuser ', variables('Q'),  parameters('webUsername'), variables('Q'), ' -webpassword ', variables('Q'),  parameters('webPassword'), variables('Q'), ' -MSIuri ', variables('Q'),  parameters('msiURL'), variables('Q'),  ' -maxconnections ', variables('Q'),  parameters('webServerMaxConnect'), variables('Q'), ' -trace ', variables('Q'),  parameters('trace'), variables('Q'), ' -installMSI ', variables('Q'),  parameters('installMSI'), variables('Q'), ' -updateMSI ', variables('Q'),  parameters('updateMSI'), variables('Q'),' -triggerWebConfig ', variables('Q'),  parameters('triggerWebConfig'), variables('Q'), ' -UninstallMSI ', variables('Q'),  parameters('UninstallMSI'), variables('Q'), ' -fixLicense ', variables('Q'),  parameters('fixLicense'), variables('Q'),  ';if ($LASTEXITCODE -ne 0) {Write-Error (\"MSI Install failed\");exit $LASTEXITCODE}; exit 0;popd;}\"')]"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      {
        "type": "Microsoft.Insights/autoscaleSettings",
        "apiVersion": "2015-04-01",
        "name": "autoscalehost",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[ResourceId('Microsoft.Compute/virtualMachineScaleSets', variables('namingInfix'))]"
        ],
        "properties": {
          "name": "autoscalehost",
          "targetResourceUri": "[ResourceId('Microsoft.Compute/virtualMachineScaleSets', variables('namingInfix'))]",
          "enabled": true,
          "profiles": [
            {
              "name": "Profile1",
              "capacity": {
                "minimum": 1,
                "maximum": 100,
                "default": 1
              },
              "rules": [
                {
                  "metricTrigger": {
                    "metricName": "Percentage CPU",
                    "metricResourceUri": "[ResourceId('Microsoft.Compute/virtualMachineScaleSets', variables('namingInfix'))]",
                    "timeGrain": "PT1M",
                    "statistic": "Average",
                    "timeWindow": "PT5M",
                    "timeAggregation": "Average",
                    "operator": "GreaterThan",
                    "threshold": 60.0
                  },
                  "scaleAction": {
                    "direction": "Increase",
                    "type": "PercentChangeCount",
                    "value": "10",
                    "cooldown": "PT20M"
                  }
                },
                {
                  "metricTrigger": {
                    "metricName": "Percentage CPU",
                    "metricResourceUri": "[ResourceId('Microsoft.Compute/virtualMachineScaleSets', variables('namingInfix'))]",
                    "timeGrain": "PT1M",
                    "statistic": "Average",
                    "timeWindow": "PT5M",
                    "timeAggregation": "Average",
                    "operator": "LessThan",
                    "threshold": 30.0
                  },
                  "scaleAction": {
                    "direction": "Decrease",
                    "type": "ChangeCount",
                    "value": "1",
                    "cooldown": "PT20M"
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "type": "Microsoft.Insights/autoscaleSettings",
        "apiVersion": "2015-04-01",
        "name": "[toLower(substring(concat('db',parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachineScaleSets/[toLower(substring(concat('db',parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]"
        ],
        "properties": {
          "name": "[toLower(substring(concat('db',parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]",
          "targetResourceUri": "Microsoft.Compute/virtualMachineScaleSets/[toLower(substring(concat('db',parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]",
          "enabled": true,
          "profiles": [
            {
              "name": "Single Fixed Instance",
              "capacity": {
                "minimum": "1",
                "maximum": "1",
                "default": "1"
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2019-08-01",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-agpip",
        "location": "[resourceGroup().location]",
        "properties": {
          "publicIPAllocationMethod": "Dynamic",
          "dnsSettings": {
            "domainNameLabel": "[toLower(concat('ag',parameters('stackName')))]"
          }
        }
      },
      {
        "apiVersion": "2019-04-01",
        "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-ag",
        "type": "Microsoft.Network/applicationGateways",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks//[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]vnet",
          "Microsoft.Network/publicIPAddresses//[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-agpip"
        ],
        "properties": {
          "sku": {
            "tier": "Standard",
            "name": "Standard_Medium",
            "capacity": 2
          },
          "sslCertificates": [
            {
              "name": "appGatewaySslCert",
              "properties": {
                "data": "GEN-SELFSIGNED-CERT-PFXDATA",
                "password": "GEN-SELFSIGNED-CERT-PASSWORD"
              }
            }
          ],
          "gatewayIPConfigurations": [
            {
              "name": "appGatewayIpConfig",
              "properties": {
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]vnet/agsubnetName"
                }
              }
            }
          ],
          "frontendIPConfigurations": [
            {
              "name": "appGatewayFrontendIP",
              "properties": {
                "PublicIPAddress": {
                  "id": "Microsoft.Network/publicIPAddresses/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-agpip"
                }
              }
            }
          ],
          "frontendPorts": [
            {
              "name": "appGatewayFrontendPort",
              "properties": {
                "Port": 443
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-agpool"
            }
          ],
          "backendHttpSettingsCollection": [
            {
              "name": "appGatewayBackendHttpSettings",
              "properties": {
                "Port": 80,
                "Protocol": "Http",
                "CookieBasedAffinity": "Enabled",
                "RequestTimeout": 120
              }
            }
          ],
          "httpListeners": [
            {
              "name": "appGatewayHttpListener",
              "properties": {
                "FrontendIPConfiguration": {
                  "Id": "Microsoft.Network/applicationgateways/frontendIPConfigurations/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-ag/appGatewayFrontendIP"
                },
                "FrontendPort": {
                  "Id": "Microsoft.Network/applicationgateways/frontendPorts/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-ag/appGatewayFrontendPort"
                },
                "Protocol": "Https",
                "SslCertificate": {
                  "Id": "Microsoft.Network/applicationgateways/sslCertificates/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-ag/appGatewaySslCert"
                }
              }
            }
          ],
          "requestRoutingRules": [
            {
              "Name": "rule1",
              "properties": {
                "RuleType": "Basic",
                "httpListener": {
                  "id": "Microsoft.Network/applicationgateways/httpListeners/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-ag/appGatewayHttpListener"
                },
                "backendAddressPool": {
                  "id": "Microsoft.Network/applicationgateways/backendAddressPools/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-ag/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-agpool"
                },
                "backendHttpSettings": {
                  "id": "Microsoft.Network/applicationgateways/backendHttpSettingsCollection/[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]-ag/appGatewayBackendHttpSettings"
                }
              }
            }
          ]
        }
      },
      {
        "condition": false,
        "name": "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]sqlserver",
        "type": "Microsoft.Sql/servers",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/loadBalancers//[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]lb",
          "Microsoft.Network/virtualNetworks//[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]vnet"
        ],
        "tags": {
          "displayName": "SqlServer"
        },
        "apiVersion": "2018-06-01-preview",
        "properties": {
          "administratorLogin": "GEN-UNIQUE-10",
          "administratorLoginPassword": "GEN-PASSWORD",
          "version": "12.0"
        },
        "resources": [
          {
            "condition": false,
            "name": "lansa",
            "type": "databases",
            "location": "[resourceGroup().location]",
            "tags": {
              "displayName": "Database"
            },
            "apiVersion": "2018-06-01-preview",
            "dependsOn": [
              "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]sqlserver"
            ],
            "properties": {
              "edition": "Standard",
              "collation": "SQL_Latin1_General_CP1_CI_AS",
              "maxSizeBytes": "1073741824",
              "requestedServiceObjectiveName": "S2"
            }
          },
          {
            "condition": false,
            "type": "firewallRules",
            "apiVersion": "2018-06-01-preview",
            "dependsOn": [
              "[toLower(substring(concat(parameters('stackName'), uniqueString(resourceGroup().id)), 0, 9))]sqlserver"
            ],
            "location": "[resourceGroup().location]",
            "name": "AllowAllIps",
            "properties": {
              "endIpAddress": "0.0.0.0",
              "startIpAddress": "0.0.0.0"
            }
          }
        ]
      }
    ],
    "outputs": {
      "dbServerName": {
        "type": "string",
        "value": "[if(variables('isNewDatabase'), reference(variables('sqlserverName')).fullyQualifiedDomainName, parameters('databaseServerName'))]"
      },
      "dbName": {
        "type": "string",
        "value": "[parameters('databaseName')]"
      },
      "lbFqdn": {
        "type": "string",
        "value": "[concat('https://', reference(variables('agPublicIPAddressName')).dnsSettings.fqdn)]"
      },
      "dbrdpAddress": {
        "type": "string",
        "value": "[concat(reference(variables('dbpublicIPAddressName')).dnsSettings.fqdn, ':50000')]"
      },
      "rdpAddress": {
        "type": "string",
        "value": "[concat(reference(variables('publicIPAddressName')).dnsSettings.fqdn, ':50000')]"
      }
    },
    "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
  }
}