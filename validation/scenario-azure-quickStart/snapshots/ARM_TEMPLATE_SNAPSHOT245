{
  "structure": "filesystem",
  "error": null,
  "reference": "master",
  "contentType": "json",
  "source": "gitConnectorAzureQuickStart",
  "paths": [
    "/application-workloads/mahara/mahara-autoscale-cache/azuredeploy.json",
    "/application-workloads/mahara/mahara-autoscale-cache/azuredeploy.parameters.json"
  ],
  "timestamp": 1642962891248,
  "queryuser": null,
  "checksum": "99914b932bd37a50b983c5e7c90ae93b",
  "node": {
    "masterSnapshotId": "ARM_TEMPLATE_SNAPSHOT",
    "type": "arm",
    "collection": "armtemplate",
    "paths": [
      "/application-workloads/mahara/mahara-autoscale-cache/azuredeploy.json",
      "/application-workloads/mahara/mahara-autoscale-cache/azuredeploy.parameters.json"
    ],
    "snapshotId": "ARM_TEMPLATE_SNAPSHOT245",
    "status": "active",
    "validate": true,
    "resourceTypes": [
      "microsoft.resources/deployments"
    ]
  },
  "snapshotId": "ARM_TEMPLATE_SNAPSHOT245",
  "collection": "armtemplate",
  "json": {
    "contentVersion": "1.0.0.0",
    "parameters": {
      "_artifactsLocation": {
        "type": "string",
        "metadata": {
          "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
        },
        "defaultValue": "[deployment().properties.templateLink.uri]"
      },
      "_artifactsLocationSasToken": {
        "type": "securestring",
        "metadata": {
          "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
        },
        "defaultValue": ""
      },
      "applyScriptsSwitch": {
        "defaultValue": true,
        "metadata": {
          "description": "Switch to process or bypass all scripts/extensions"
        },
        "type": "bool"
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for all resources"
        }
      },
      "azureBackupSwitch": {
        "defaultValue": false,
        "metadata": {
          "description": "Switch to configure AzureBackup and enlist VM's"
        },
        "type": "bool"
      },
      "vnetGwDeploySwitch": {
        "defaultValue": false,
        "metadata": {
          "description": "Switch to deploy a virtual network gateway or not"
        },
        "type": "bool"
      },
      "htmlLocalCopySwitch": {
        "defaultValue": true,
        "metadata": {
          "description": "Switch to create a local copy of /mahara/html or not"
        },
        "type": "bool"
      },
      "httpsTermination": {
        "allowedValues": [
          "VMSS",
          "None"
        ],
        "defaultValue": "VMSS",
        "metadata": {
          "description": "Indicates where https termination occurs. 'VMSS' is for https termination at the VMSS instance VMs (using nginx https proxy). 'None' is for testing only with no https. 'None' may not be used with a separately configured https termination layer. If you want to use the 'None' option with your separately configured https termination layer, you'll need to update your Mahara config.php manually for $cfg->wwwroot and $cfg->sslproxy."
        },
        "type": "string"
      },
      "siteURL": {
        "defaultValue": "www.example.org",
        "metadata": {
          "description": "URL for Mahara site"
        },
        "type": "string"
      },
      "maharaVersion": {
        "allowedValues": [
          "17.10_STABLE",
          "17.04_STABLE"
        ],
        "defaultValue": "17.10_STABLE",
        "metadata": {
          "description": "The Mahara version you want to install."
        },
        "type": "string"
      },
      "sshPublicKey": {
        "metadata": {
          "description": "ssh public key"
        },
        "type": "string",
        "value": "GEN-SSH-PUB-KEY"
      },
      "sshUsername": {
        "metadata": {
          "description": "ssh user name"
        },
        "type": "string",
        "value": "GEN-UNIQUE-8"
      },
      "controllerVmSku": {
        "defaultValue": "Standard_D2s_v3",
        "metadata": {
          "description": "VM size for the controller VM"
        },
        "type": "string"
      },
      "webServerType": {
        "defaultValue": "apache",
        "allowedValues": [
          "apache",
          "nginx"
        ],
        "metadata": {
          "description": "Web server type"
        },
        "type": "string"
      },
      "autoscaleVmSku": {
        "defaultValue": "Standard_D2s_v3",
        "metadata": {
          "description": "VM size for autoscaled web VMs"
        },
        "type": "string"
      },
      "autoscaleVmCount": {
        "defaultValue": 10,
        "metadata": {
          "description": "Maximum number of autoscaled web VMs"
        },
        "type": "int"
      },
      "dbServerType": {
        "defaultValue": "mysql",
        "allowedValues": [
          "postgres",
          "mysql"
        ],
        "metadata": {
          "description": "Database type"
        },
        "type": "string"
      },
      "dbLogin": {
        "metadata": {
          "description": "Database admin username"
        },
        "type": "string",
        "value": "GEN-UNIQUE-8"
      },
      "dbLoginPassword": {
        "metadata": {
          "description": "Database admin password"
        },
        "type": "securestring"
      },
      "maharaAdminPass": {
        "metadata": {
          "description": "Mahara admin password"
        },
        "type": "securestring"
      },
      "maharaDbPass": {
        "metadata": {
          "description": "Mahara database password"
        },
        "type": "securestring"
      },
      "mysqlPgresVcores": {
        "allowedValues": [
          1,
          2,
          4,
          8,
          16,
          32
        ],
        "defaultValue": 2,
        "metadata": {
          "description": "MySql/Postgresql vCores. For Basic tier, only 1 & 2 are allowed. For GeneralPurpose tier, 2, 4, 8, 16, 32 are allowed. For MemoryOptimized, 2, 4, 8, 16 are allowed."
        },
        "type": "int"
      },
      "mysqlPgresStgSizeGB": {
        "defaultValue": 125,
        "minValue": 5,
        "maxValue": 1024,
        "metadata": {
          "description": "MySql/Postgresql storage size in GB. Minimum 5GB, increase by 1GB, up to 1TB (1024 GB)"
        },
        "type": "int"
      },
      "mysqlPgresSkuTier": {
        "allowedValues": [
          "Basic",
          "GeneralPurpose",
          "MemoryOptimized"
        ],
        "defaultValue": "GeneralPurpose",
        "metadata": {
          "description": "MySql/Postgresql sku tier"
        },
        "type": "string"
      },
      "mysqlPgresSkuHwFamily": {
        "allowedValues": [
          "Gen4",
          "Gen5"
        ],
        "defaultValue": "Gen5",
        "metadata": {
          "description": "MySql/Postgresql sku hardware family"
        },
        "type": "string"
      },
      "mysqlVersion": {
        "allowedValues": [
          "5.6",
          "5.7"
        ],
        "defaultValue": "5.7",
        "metadata": {
          "description": "Mysql version"
        },
        "type": "string"
      },
      "postgresVersion": {
        "allowedValues": [
          "9.5",
          "9.6"
        ],
        "defaultValue": "9.6",
        "metadata": {
          "description": "Postgresql version"
        },
        "type": "string"
      },
      "sslEnforcement": {
        "allowedValues": [
          "Disabled",
          "Enabled"
        ],
        "defaultValue": "Disabled",
        "metadata": {
          "description": "MySql/Postgresql SSL connection"
        },
        "type": "string"
      },
      "fileServerType": {
        "defaultValue": "nfs",
        "allowedValues": [
          "gluster",
          "nfs"
        ],
        "metadata": {
          "description": "File server type: GlusterFS, NFS--not yet highly available. Gluster uses premium managed disks therefore premium skus are required."
        },
        "type": "string"
      },
      "fileServerDiskSize": {
        "defaultValue": 127,
        "metadata": {
          "description": "Size per disk for gluster nodes or nfs server"
        },
        "type": "int"
      },
      "fileServerDiskCount": {
        "defaultValue": 4,
        "minValue": 2,
        "maxValue": 8,
        "metadata": {
          "description": "Number of disks in raid0 per gluster node or nfs server"
        },
        "type": "int"
      },
      "glusterVmSku": {
        "defaultValue": "Standard_D2s_v3",
        "metadata": {
          "description": "VM size for the gluster nodes"
        },
        "type": "string"
      },
      "keyVaultResourceId": {
        "defaultValue": "",
        "metadata": {
          "description": "Azure Resource Manager resource ID of the Key Vault in case you stored your SSL cert in an Azure Key Vault (Note that this Key Vault must have been pre-created on the same Azure region where this template is being deployed). Leave this blank if you didn't. Resource ID example: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/xxx/providers/Microsoft.KeyVault/vaults/yyy. This value can be obtained from keyvault.sh output if you used the script to store your SSL cert in your Key Vault."
        },
        "type": "string"
      },
      "sslCertKeyVaultURL": {
        "defaultValue": "",
        "metadata": {
          "description": "Azure Key Vault URL for your stored SSL cert. This value can be obtained from keyvault.sh output if you used the script to store your SSL cert in your Key Vault. This parameter is ignored if the keyVaultResourceId parameter is blank."
        },
        "type": "string"
      },
      "sslCertThumbprint": {
        "defaultValue": "",
        "metadata": {
          "description": "Thumbprint of your stored SSL cert. This value can be obtained from keyvault.sh output if you used the script to store your SSL cert in your Key Vault. This parameter is ignored if the keyVaultResourceId parameter is blank."
        },
        "type": "string"
      },
      "caCertKeyVaultURL": {
        "defaultValue": "",
        "metadata": {
          "description": "Azure Key Vault URL for your stored CA (Certificate Authority) cert. This value can be obtained from keyvault.sh output if you used the script to store your CA cert in your Key Vault. This parameter is ignored if the keyVaultResourceId parameter is blank."
        },
        "type": "string"
      },
      "caCertThumbprint": {
        "defaultValue": "",
        "metadata": {
          "description": "Thumbprint of your stored CA cert. This value can be obtained from keyvault.sh output if you used the script to store your CA cert in your Key Vault. This parameter is ignored if the keyVaultResourceId parameter is blank."
        },
        "type": "string"
      },
      "storageAccountType": {
        "defaultValue": "Standard_LRS",
        "allowedValues": [
          "Standard_LRS",
          "Standard_GRS",
          "Standard_ZRS"
        ],
        "metadata": {
          "description": "Storage Account type"
        },
        "type": "string"
      },
      "searchType": {
        "defaultValue": "none",
        "allowedValues": [
          "none",
          "elastic"
        ],
        "metadata": {
          "description": "options of mahara global search"
        },
        "type": "string"
      },
      "elasticVmSku": {
        "defaultValue": "Standard_D2s_v3",
        "metadata": {
          "description": "VM size for the elastic search nodes"
        },
        "type": "string"
      },
      "vNetAddressSpace": {
        "defaultValue": "172.31.0.0",
        "metadata": {
          "description": "Address range for the Mahara virtual network - presumed /16 - further subneting during vnet creation"
        },
        "type": "string"
      },
      "gatewaySubnet": {
        "allowedValues": [
          "GatewaySubnet",
          "MaharaGatewaySubnet",
          "MyMaharaGatewaySubnet"
        ],
        "defaultValue": "GatewaySubnet",
        "metadata": {
          "description": "name for Virtual network gateway subnet"
        },
        "type": "string"
      },
      "gatewayType": {
        "allowedValues": [
          "Vpn",
          "ER"
        ],
        "defaultValue": "Vpn",
        "metadata": {
          "description": "Virtual network gateway type"
        },
        "type": "string"
      },
      "vpnType": {
        "allowedValues": [
          "RouteBased",
          "PolicyBased"
        ],
        "defaultValue": "RouteBased",
        "metadata": {
          "description": "Virtual network gateway vpn type"
        },
        "type": "string"
      }
    },
    "resources": [
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "dependsOn": [
          "Microsoft.Resources/deployments/networkTemplate"
        ],
        "name": "dbTemplate",
        "properties": {
          "mode": "Incremental",
          "parameters": {
            "maharaCommon": {
              "value": {
                "location": "[resourceGroup().location]",
                "baseTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('nested/'))]",
                "scriptLocation": "[uri(parameters('_artifactsLocation'), concat('scripts/'))]",
                "artifactsSasToken": "",
                "applyScriptsSwitch": true,
                "autoscaleVmCount": 10,
                "autoscaleVmSku": "Standard_D2s_v3",
                "azureBackupSwitch": false,
                "commonFunctionsScriptUri": "[uri(parameters('_artifactsLocation'),concat('scripts/helper_functions.sh',parameters('_artifactsLocationSasToken')))]",
                "controllerVmSku": "Standard_D2s_v3",
                "dbLogin": "GEN-UNIQUE-8",
                "dbServerType": "mysql",
                "dbUsername": "GEN-UNIQUE-8@mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmSku": "Standard_D2s_v3",
                "dbDNS": "mysql-resourcePrefix.mysql.database.azure.com",
                "elasticAvailabilitySetName": "elastic-avset-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticClusterName": "es-cluster-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName1": "elastic-vm-nic-01-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName2": "elastic-vm-nic-02-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName3": "elastic-vm-nic-03-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticScriptFilename": "install_elastic.sh",
                "elasticVm1IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.20')]",
                "elasticVm2IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.21')]",
                "elasticVm3IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.22')]",
                "elasticVmName": "elastic-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName1": "elastic-vm-01-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName2": "elastic-vm-02-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName3": "elastic-vm-03-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extBeName": "lb-backend-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extFeName": "lb-frontend-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extNatPool": "lb-natpool-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extProbe": "lb-probe-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "fileServerDiskCount": 4,
                "fileServerDiskSize": 127,
                "fileServerType": "nfs",
                "gatewayName": "vnet-gateway-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gatewayPublicIPName": "vnet-gw-ip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gatewaySubnet": "GatewaySubnet",
                "gatewaySubnetPrefix": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)))]",
                "gatewaySubnetRange": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)), '.0/24')]",
                "gatewayType": "Vpn",
                "gfsNameRoot": "gluster-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gfxAvailabilitySetName": "gluster-avset-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "glusterScriptFilename": "install_gluster.sh",
                "glusterVmCount": 2,
                "glusterVmSku": "Standard_D2s_v3",
                "htmlLocalCopySwitch": true,
                "httpsTermination": "VMSS",
                "ctlrNicName": "controller-vm-nic-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrNsgName": "controller-nsg-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrPipName": "controller-pubip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrVmName": "controller-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrVmSecrets": "[take(variables('ctlrVmSecretsArray'), if(empty(parameters('keyVaultResourceId')), 0, 1))]",
                "lbName": "lb-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "lbPipName": "lb-pubip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "maharaDbName": "mahara",
                "maharaDbUser": "mahara",
                "maharaDbUserAzure": "mahara@mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "maharaInstallScriptFilename": "install_mahara.sh",
                "maharaVersion": "17.10_STABLE",
                "mysqlPgresSkuHwFamily": "Gen5",
                "mysqlPgresSkuName": "[concat(if(equals(parameters('mysqlPgresSkuTier'),'Basic'),'B', if(equals(parameters('mysqlPgresSkuTier'),'GeneralPurpose'),'GP', 'MO')), '_', parameters('mysqlPgresSkuHwFamily'), '_', string(parameters('mysqlPgresVcores')))]",
                "mysqlPgresSkuTier": "GeneralPurpose",
                "mysqlPgresStgSizeGB": 125,
                "mysqlPgresVcores": 2,
                "mysqlVersion": "5.7",
                "osType": {
                  "offer": "UbuntuServer",
                  "publisher": "Canonical",
                  "sku": "18.04-LTS",
                  "version": "latest"
                },
                "policyName": "policy-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "postgresVersion": "9.6",
                "resourcesPrefix": "[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "searchType": "none",
                "serverName": "mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "siteURL": "www.example.org",
                "sshPublicKey": "GEN-SSH-PUB-KEY",
                "sshUsername": "GEN-UNIQUE-8",
                "sslEnforcement": "Disabled",
                "storageAccountName": "[tolower(concat('abs',variables('resourceprefix')))]",
                "storageAccountType": "Standard_LRS",
                "subnetElastic": "elastic-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetElasticPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)))]",
                "subnetElasticRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.0/24')]",
                "subnetSan": "san-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetSanPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),1)))]",
                "subnetSanRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),1)), '.0/24')]",
                "subnetWeb": "web-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetWebPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)))]",
                "subnetWebRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)), '.0/24')]",
                "thumbprintSslCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('sslCertThumbprint'))), 'None', parameters('sslCertThumbprint'))]",
                "thumbprintCaCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('caCertThumbprint'))), 'None', parameters('caCertThumbprint'))]",
                "vNetAddressSpace": "172.31.0.0",
                "vaultName": "vault-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vmssName": "vmss-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vmssdStorageAccounttName": "[concat('vmss',uniqueString(resourceGroup().id))]",
                "vnetGwDeploySwitch": false,
                "vnetName": "vnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vpnType": "RouteBased",
                "webServerSetupScriptFilename": "setup_webserver.sh",
                "webServerType": "apache"
              }
            },
            "lbPubIp": {
              "value": "[reference('networkTemplate').outputs.lbPubIp.value]"
            },
            "ctlrPubIp": {
              "value": "[reference('networkTemplate').outputs.ctlrPubIp.value]"
            },
            "dbLoginPassword": {
              "value": "dbLoginPassword"
            }
          },
          "templateLink": {
            "uri": "(maharaCommon).baseTemplateUrlmysql.json parameters('_artifactsLocationSasToken')"
          }
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "recoveryTemplate",
        "properties": {
          "mode": "Incremental",
          "parameters": {
            "maharaCommon": {
              "value": {
                "location": "[resourceGroup().location]",
                "baseTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('nested/'))]",
                "scriptLocation": "[uri(parameters('_artifactsLocation'), concat('scripts/'))]",
                "artifactsSasToken": "",
                "applyScriptsSwitch": true,
                "autoscaleVmCount": 10,
                "autoscaleVmSku": "Standard_D2s_v3",
                "azureBackupSwitch": false,
                "commonFunctionsScriptUri": "[uri(parameters('_artifactsLocation'),concat('scripts/helper_functions.sh',parameters('_artifactsLocationSasToken')))]",
                "controllerVmSku": "Standard_D2s_v3",
                "dbLogin": "GEN-UNIQUE-8",
                "dbServerType": "mysql",
                "dbUsername": "GEN-UNIQUE-8@mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmSku": "Standard_D2s_v3",
                "dbDNS": "mysql-resourcePrefix.mysql.database.azure.com",
                "elasticAvailabilitySetName": "elastic-avset-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticClusterName": "es-cluster-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName1": "elastic-vm-nic-01-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName2": "elastic-vm-nic-02-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName3": "elastic-vm-nic-03-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticScriptFilename": "install_elastic.sh",
                "elasticVm1IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.20')]",
                "elasticVm2IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.21')]",
                "elasticVm3IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.22')]",
                "elasticVmName": "elastic-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName1": "elastic-vm-01-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName2": "elastic-vm-02-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName3": "elastic-vm-03-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extBeName": "lb-backend-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extFeName": "lb-frontend-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extNatPool": "lb-natpool-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extProbe": "lb-probe-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "fileServerDiskCount": 4,
                "fileServerDiskSize": 127,
                "fileServerType": "nfs",
                "gatewayName": "vnet-gateway-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gatewayPublicIPName": "vnet-gw-ip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gatewaySubnet": "GatewaySubnet",
                "gatewaySubnetPrefix": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)))]",
                "gatewaySubnetRange": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)), '.0/24')]",
                "gatewayType": "Vpn",
                "gfsNameRoot": "gluster-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gfxAvailabilitySetName": "gluster-avset-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "glusterScriptFilename": "install_gluster.sh",
                "glusterVmCount": 2,
                "glusterVmSku": "Standard_D2s_v3",
                "htmlLocalCopySwitch": true,
                "httpsTermination": "VMSS",
                "ctlrNicName": "controller-vm-nic-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrNsgName": "controller-nsg-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrPipName": "controller-pubip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrVmName": "controller-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrVmSecrets": "[take(variables('ctlrVmSecretsArray'), if(empty(parameters('keyVaultResourceId')), 0, 1))]",
                "lbName": "lb-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "lbPipName": "lb-pubip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "maharaDbName": "mahara",
                "maharaDbUser": "mahara",
                "maharaDbUserAzure": "mahara@mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "maharaInstallScriptFilename": "install_mahara.sh",
                "maharaVersion": "17.10_STABLE",
                "mysqlPgresSkuHwFamily": "Gen5",
                "mysqlPgresSkuName": "[concat(if(equals(parameters('mysqlPgresSkuTier'),'Basic'),'B', if(equals(parameters('mysqlPgresSkuTier'),'GeneralPurpose'),'GP', 'MO')), '_', parameters('mysqlPgresSkuHwFamily'), '_', string(parameters('mysqlPgresVcores')))]",
                "mysqlPgresSkuTier": "GeneralPurpose",
                "mysqlPgresStgSizeGB": 125,
                "mysqlPgresVcores": 2,
                "mysqlVersion": "5.7",
                "osType": {
                  "offer": "UbuntuServer",
                  "publisher": "Canonical",
                  "sku": "18.04-LTS",
                  "version": "latest"
                },
                "policyName": "policy-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "postgresVersion": "9.6",
                "resourcesPrefix": "[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "searchType": "none",
                "serverName": "mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "siteURL": "www.example.org",
                "sshPublicKey": "GEN-SSH-PUB-KEY",
                "sshUsername": "GEN-UNIQUE-8",
                "sslEnforcement": "Disabled",
                "storageAccountName": "[tolower(concat('abs',variables('resourceprefix')))]",
                "storageAccountType": "Standard_LRS",
                "subnetElastic": "elastic-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetElasticPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)))]",
                "subnetElasticRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.0/24')]",
                "subnetSan": "san-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetSanPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),1)))]",
                "subnetSanRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),1)), '.0/24')]",
                "subnetWeb": "web-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetWebPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)))]",
                "subnetWebRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)), '.0/24')]",
                "thumbprintSslCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('sslCertThumbprint'))), 'None', parameters('sslCertThumbprint'))]",
                "thumbprintCaCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('caCertThumbprint'))), 'None', parameters('caCertThumbprint'))]",
                "vNetAddressSpace": "172.31.0.0",
                "vaultName": "vault-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vmssName": "vmss-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vmssdStorageAccounttName": "[concat('vmss',uniqueString(resourceGroup().id))]",
                "vnetGwDeploySwitch": false,
                "vnetName": "vnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vpnType": "RouteBased",
                "webServerSetupScriptFilename": "setup_webserver.sh",
                "webServerType": "apache"
              }
            }
          },
          "templateLink": {
            "uri": "(maharaCommon).baseTemplateUrlrecoveryservices.jsonparameters('_artifactsLocationSasToken')"
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "networkTemplate",
        "properties": {
          "mode": "Incremental",
          "parameters": {
            "maharaCommon": {
              "value": {
                "location": "[resourceGroup().location]",
                "baseTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('nested/'))]",
                "scriptLocation": "[uri(parameters('_artifactsLocation'), concat('scripts/'))]",
                "artifactsSasToken": "",
                "applyScriptsSwitch": true,
                "autoscaleVmCount": 10,
                "autoscaleVmSku": "Standard_D2s_v3",
                "azureBackupSwitch": false,
                "commonFunctionsScriptUri": "[uri(parameters('_artifactsLocation'),concat('scripts/helper_functions.sh',parameters('_artifactsLocationSasToken')))]",
                "controllerVmSku": "Standard_D2s_v3",
                "dbLogin": "GEN-UNIQUE-8",
                "dbServerType": "mysql",
                "dbUsername": "GEN-UNIQUE-8@mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmSku": "Standard_D2s_v3",
                "dbDNS": "mysql-resourcePrefix.mysql.database.azure.com",
                "elasticAvailabilitySetName": "elastic-avset-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticClusterName": "es-cluster-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName1": "elastic-vm-nic-01-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName2": "elastic-vm-nic-02-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName3": "elastic-vm-nic-03-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticScriptFilename": "install_elastic.sh",
                "elasticVm1IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.20')]",
                "elasticVm2IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.21')]",
                "elasticVm3IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.22')]",
                "elasticVmName": "elastic-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName1": "elastic-vm-01-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName2": "elastic-vm-02-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName3": "elastic-vm-03-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extBeName": "lb-backend-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extFeName": "lb-frontend-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extNatPool": "lb-natpool-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extProbe": "lb-probe-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "fileServerDiskCount": 4,
                "fileServerDiskSize": 127,
                "fileServerType": "nfs",
                "gatewayName": "vnet-gateway-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gatewayPublicIPName": "vnet-gw-ip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gatewaySubnet": "GatewaySubnet",
                "gatewaySubnetPrefix": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)))]",
                "gatewaySubnetRange": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)), '.0/24')]",
                "gatewayType": "Vpn",
                "gfsNameRoot": "gluster-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gfxAvailabilitySetName": "gluster-avset-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "glusterScriptFilename": "install_gluster.sh",
                "glusterVmCount": 2,
                "glusterVmSku": "Standard_D2s_v3",
                "htmlLocalCopySwitch": true,
                "httpsTermination": "VMSS",
                "ctlrNicName": "controller-vm-nic-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrNsgName": "controller-nsg-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrPipName": "controller-pubip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrVmName": "controller-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrVmSecrets": "[take(variables('ctlrVmSecretsArray'), if(empty(parameters('keyVaultResourceId')), 0, 1))]",
                "lbName": "lb-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "lbPipName": "lb-pubip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "maharaDbName": "mahara",
                "maharaDbUser": "mahara",
                "maharaDbUserAzure": "mahara@mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "maharaInstallScriptFilename": "install_mahara.sh",
                "maharaVersion": "17.10_STABLE",
                "mysqlPgresSkuHwFamily": "Gen5",
                "mysqlPgresSkuName": "[concat(if(equals(parameters('mysqlPgresSkuTier'),'Basic'),'B', if(equals(parameters('mysqlPgresSkuTier'),'GeneralPurpose'),'GP', 'MO')), '_', parameters('mysqlPgresSkuHwFamily'), '_', string(parameters('mysqlPgresVcores')))]",
                "mysqlPgresSkuTier": "GeneralPurpose",
                "mysqlPgresStgSizeGB": 125,
                "mysqlPgresVcores": 2,
                "mysqlVersion": "5.7",
                "osType": {
                  "offer": "UbuntuServer",
                  "publisher": "Canonical",
                  "sku": "18.04-LTS",
                  "version": "latest"
                },
                "policyName": "policy-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "postgresVersion": "9.6",
                "resourcesPrefix": "[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "searchType": "none",
                "serverName": "mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "siteURL": "www.example.org",
                "sshPublicKey": "GEN-SSH-PUB-KEY",
                "sshUsername": "GEN-UNIQUE-8",
                "sslEnforcement": "Disabled",
                "storageAccountName": "[tolower(concat('abs',variables('resourceprefix')))]",
                "storageAccountType": "Standard_LRS",
                "subnetElastic": "elastic-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetElasticPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)))]",
                "subnetElasticRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.0/24')]",
                "subnetSan": "san-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetSanPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),1)))]",
                "subnetSanRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),1)), '.0/24')]",
                "subnetWeb": "web-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetWebPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)))]",
                "subnetWebRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)), '.0/24')]",
                "thumbprintSslCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('sslCertThumbprint'))), 'None', parameters('sslCertThumbprint'))]",
                "thumbprintCaCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('caCertThumbprint'))), 'None', parameters('caCertThumbprint'))]",
                "vNetAddressSpace": "172.31.0.0",
                "vaultName": "vault-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vmssName": "vmss-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vmssdStorageAccounttName": "[concat('vmss',uniqueString(resourceGroup().id))]",
                "vnetGwDeploySwitch": false,
                "vnetName": "vnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vpnType": "RouteBased",
                "webServerSetupScriptFilename": "setup_webserver.sh",
                "webServerType": "apache"
              }
            }
          },
          "templateLink": {
            "uri": "(maharaCommon).baseTemplateUrlnetwork.jsonparameters('_artifactsLocationSasToken')"
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "dependsOn": [
          "Microsoft.Resources/deployments/networkTemplate",
          "Microsoft.Resources/deployments/recoveryTemplate"
        ],
        "name": "searchTemplate",
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "(maharaCommon).baseTemplateUrlnone-search.json parameters('_artifactsLocationSasToken')"
          }
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "dependsOn": [
          "Microsoft.Resources/deployments/networkTemplate",
          "Microsoft.Resources/deployments/recoveryTemplate"
        ],
        "name": "glusterTemplate",
        "properties": {
          "mode": "Incremental",
          "parameters": {
            "maharaCommon": {
              "value": {
                "location": "[resourceGroup().location]",
                "baseTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('nested/'))]",
                "scriptLocation": "[uri(parameters('_artifactsLocation'), concat('scripts/'))]",
                "artifactsSasToken": "",
                "applyScriptsSwitch": true,
                "autoscaleVmCount": 10,
                "autoscaleVmSku": "Standard_D2s_v3",
                "azureBackupSwitch": false,
                "commonFunctionsScriptUri": "[uri(parameters('_artifactsLocation'),concat('scripts/helper_functions.sh',parameters('_artifactsLocationSasToken')))]",
                "controllerVmSku": "Standard_D2s_v3",
                "dbLogin": "GEN-UNIQUE-8",
                "dbServerType": "mysql",
                "dbUsername": "GEN-UNIQUE-8@mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmSku": "Standard_D2s_v3",
                "dbDNS": "mysql-resourcePrefix.mysql.database.azure.com",
                "elasticAvailabilitySetName": "elastic-avset-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticClusterName": "es-cluster-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName1": "elastic-vm-nic-01-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName2": "elastic-vm-nic-02-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName3": "elastic-vm-nic-03-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticScriptFilename": "install_elastic.sh",
                "elasticVm1IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.20')]",
                "elasticVm2IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.21')]",
                "elasticVm3IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.22')]",
                "elasticVmName": "elastic-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName1": "elastic-vm-01-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName2": "elastic-vm-02-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName3": "elastic-vm-03-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extBeName": "lb-backend-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extFeName": "lb-frontend-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extNatPool": "lb-natpool-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extProbe": "lb-probe-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "fileServerDiskCount": 4,
                "fileServerDiskSize": 127,
                "fileServerType": "nfs",
                "gatewayName": "vnet-gateway-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gatewayPublicIPName": "vnet-gw-ip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gatewaySubnet": "GatewaySubnet",
                "gatewaySubnetPrefix": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)))]",
                "gatewaySubnetRange": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)), '.0/24')]",
                "gatewayType": "Vpn",
                "gfsNameRoot": "gluster-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gfxAvailabilitySetName": "gluster-avset-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "glusterScriptFilename": "install_gluster.sh",
                "glusterVmCount": 2,
                "glusterVmSku": "Standard_D2s_v3",
                "htmlLocalCopySwitch": true,
                "httpsTermination": "VMSS",
                "ctlrNicName": "controller-vm-nic-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrNsgName": "controller-nsg-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrPipName": "controller-pubip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrVmName": "controller-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrVmSecrets": "[take(variables('ctlrVmSecretsArray'), if(empty(parameters('keyVaultResourceId')), 0, 1))]",
                "lbName": "lb-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "lbPipName": "lb-pubip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "maharaDbName": "mahara",
                "maharaDbUser": "mahara",
                "maharaDbUserAzure": "mahara@mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "maharaInstallScriptFilename": "install_mahara.sh",
                "maharaVersion": "17.10_STABLE",
                "mysqlPgresSkuHwFamily": "Gen5",
                "mysqlPgresSkuName": "[concat(if(equals(parameters('mysqlPgresSkuTier'),'Basic'),'B', if(equals(parameters('mysqlPgresSkuTier'),'GeneralPurpose'),'GP', 'MO')), '_', parameters('mysqlPgresSkuHwFamily'), '_', string(parameters('mysqlPgresVcores')))]",
                "mysqlPgresSkuTier": "GeneralPurpose",
                "mysqlPgresStgSizeGB": 125,
                "mysqlPgresVcores": 2,
                "mysqlVersion": "5.7",
                "osType": {
                  "offer": "UbuntuServer",
                  "publisher": "Canonical",
                  "sku": "18.04-LTS",
                  "version": "latest"
                },
                "policyName": "policy-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "postgresVersion": "9.6",
                "resourcesPrefix": "[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "searchType": "none",
                "serverName": "mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "siteURL": "www.example.org",
                "sshPublicKey": "GEN-SSH-PUB-KEY",
                "sshUsername": "GEN-UNIQUE-8",
                "sslEnforcement": "Disabled",
                "storageAccountName": "[tolower(concat('abs',variables('resourceprefix')))]",
                "storageAccountType": "Standard_LRS",
                "subnetElastic": "elastic-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetElasticPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)))]",
                "subnetElasticRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.0/24')]",
                "subnetSan": "san-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetSanPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),1)))]",
                "subnetSanRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),1)), '.0/24')]",
                "subnetWeb": "web-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetWebPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)))]",
                "subnetWebRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)), '.0/24')]",
                "thumbprintSslCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('sslCertThumbprint'))), 'None', parameters('sslCertThumbprint'))]",
                "thumbprintCaCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('caCertThumbprint'))), 'None', parameters('caCertThumbprint'))]",
                "vNetAddressSpace": "172.31.0.0",
                "vaultName": "vault-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vmssName": "vmss-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vmssdStorageAccounttName": "[concat('vmss',uniqueString(resourceGroup().id))]",
                "vnetGwDeploySwitch": false,
                "vnetName": "vnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vpnType": "RouteBased",
                "webServerSetupScriptFilename": "setup_webserver.sh",
                "webServerType": "apache"
              }
            }
          },
          "templateLink": {
            "uri": "(maharaCommon).baseTemplateUrlgluster.jsonparameters('_artifactsLocationSasToken')"
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "dependsOn": [
          "Microsoft.Resources/deployments/glusterTemplate",
          "Microsoft.Resources/deployments/recoveryTemplate",
          "Microsoft.Resources/deployments/networkTemplate",
          "Microsoft.Resources/deployments/dbTemplate",
          "Microsoft.Resources/deployments/searchTemplate",
          "Microsoft.Resources/deployments/storageAccountTemplate"
        ],
        "name": "controllerTemplate",
        "properties": {
          "mode": "Incremental",
          "parameters": {
            "maharaCommon": {
              "value": {
                "location": "[resourceGroup().location]",
                "baseTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('nested/'))]",
                "scriptLocation": "[uri(parameters('_artifactsLocation'), concat('scripts/'))]",
                "artifactsSasToken": "",
                "applyScriptsSwitch": true,
                "autoscaleVmCount": 10,
                "autoscaleVmSku": "Standard_D2s_v3",
                "azureBackupSwitch": false,
                "commonFunctionsScriptUri": "[uri(parameters('_artifactsLocation'),concat('scripts/helper_functions.sh',parameters('_artifactsLocationSasToken')))]",
                "controllerVmSku": "Standard_D2s_v3",
                "dbLogin": "GEN-UNIQUE-8",
                "dbServerType": "mysql",
                "dbUsername": "GEN-UNIQUE-8@mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmSku": "Standard_D2s_v3",
                "dbDNS": "mysql-resourcePrefix.mysql.database.azure.com",
                "elasticAvailabilitySetName": "elastic-avset-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticClusterName": "es-cluster-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName1": "elastic-vm-nic-01-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName2": "elastic-vm-nic-02-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName3": "elastic-vm-nic-03-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticScriptFilename": "install_elastic.sh",
                "elasticVm1IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.20')]",
                "elasticVm2IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.21')]",
                "elasticVm3IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.22')]",
                "elasticVmName": "elastic-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName1": "elastic-vm-01-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName2": "elastic-vm-02-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName3": "elastic-vm-03-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extBeName": "lb-backend-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extFeName": "lb-frontend-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extNatPool": "lb-natpool-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extProbe": "lb-probe-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "fileServerDiskCount": 4,
                "fileServerDiskSize": 127,
                "fileServerType": "nfs",
                "gatewayName": "vnet-gateway-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gatewayPublicIPName": "vnet-gw-ip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gatewaySubnet": "GatewaySubnet",
                "gatewaySubnetPrefix": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)))]",
                "gatewaySubnetRange": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)), '.0/24')]",
                "gatewayType": "Vpn",
                "gfsNameRoot": "gluster-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gfxAvailabilitySetName": "gluster-avset-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "glusterScriptFilename": "install_gluster.sh",
                "glusterVmCount": 2,
                "glusterVmSku": "Standard_D2s_v3",
                "htmlLocalCopySwitch": true,
                "httpsTermination": "VMSS",
                "ctlrNicName": "controller-vm-nic-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrNsgName": "controller-nsg-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrPipName": "controller-pubip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrVmName": "controller-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrVmSecrets": "[take(variables('ctlrVmSecretsArray'), if(empty(parameters('keyVaultResourceId')), 0, 1))]",
                "lbName": "lb-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "lbPipName": "lb-pubip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "maharaDbName": "mahara",
                "maharaDbUser": "mahara",
                "maharaDbUserAzure": "mahara@mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "maharaInstallScriptFilename": "install_mahara.sh",
                "maharaVersion": "17.10_STABLE",
                "mysqlPgresSkuHwFamily": "Gen5",
                "mysqlPgresSkuName": "[concat(if(equals(parameters('mysqlPgresSkuTier'),'Basic'),'B', if(equals(parameters('mysqlPgresSkuTier'),'GeneralPurpose'),'GP', 'MO')), '_', parameters('mysqlPgresSkuHwFamily'), '_', string(parameters('mysqlPgresVcores')))]",
                "mysqlPgresSkuTier": "GeneralPurpose",
                "mysqlPgresStgSizeGB": 125,
                "mysqlPgresVcores": 2,
                "mysqlVersion": "5.7",
                "osType": {
                  "offer": "UbuntuServer",
                  "publisher": "Canonical",
                  "sku": "18.04-LTS",
                  "version": "latest"
                },
                "policyName": "policy-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "postgresVersion": "9.6",
                "resourcesPrefix": "[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "searchType": "none",
                "serverName": "mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "siteURL": "www.example.org",
                "sshPublicKey": "GEN-SSH-PUB-KEY",
                "sshUsername": "GEN-UNIQUE-8",
                "sslEnforcement": "Disabled",
                "storageAccountName": "[tolower(concat('abs',variables('resourceprefix')))]",
                "storageAccountType": "Standard_LRS",
                "subnetElastic": "elastic-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetElasticPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)))]",
                "subnetElasticRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.0/24')]",
                "subnetSan": "san-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetSanPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),1)))]",
                "subnetSanRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),1)), '.0/24')]",
                "subnetWeb": "web-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetWebPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)))]",
                "subnetWebRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)), '.0/24')]",
                "thumbprintSslCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('sslCertThumbprint'))), 'None', parameters('sslCertThumbprint'))]",
                "thumbprintCaCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('caCertThumbprint'))), 'None', parameters('caCertThumbprint'))]",
                "vNetAddressSpace": "172.31.0.0",
                "vaultName": "vault-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vmssName": "vmss-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vmssdStorageAccounttName": "[concat('vmss',uniqueString(resourceGroup().id))]",
                "vnetGwDeploySwitch": false,
                "vnetName": "vnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vpnType": "RouteBased",
                "webServerSetupScriptFilename": "setup_webserver.sh",
                "webServerType": "apache"
              }
            },
            "ctlrPubIpId": {
              "value": "[reference('networkTemplate').outputs.ctlrPubIpId.value]"
            },
            "siteFQDN": {
              "value": "[reference('networkTemplate').outputs.siteFQDN.value]"
            },
            "dbLoginPassword": {
              "value": "dbLoginPassword"
            },
            "maharaDbPass": {
              "value": "maharaDbPass"
            },
            "maharaAdminPass": {
              "value": "maharaAdminPass"
            }
          },
          "templateLink": {
            "uri": "(maharaCommon).baseTemplateUrlcontroller.jsonparameters('_artifactsLocationSasToken')"
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "dependsOn": [
          "Microsoft.Resources/deployments/controllerTemplate",
          "Microsoft.Resources/deployments/networkTemplate",
          "Microsoft.Resources/deployments/dbTemplate"
        ],
        "name": "scaleSetTemplate",
        "properties": {
          "mode": "Incremental",
          "parameters": {
            "maharaCommon": {
              "value": {
                "location": "[resourceGroup().location]",
                "baseTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('nested/'))]",
                "scriptLocation": "[uri(parameters('_artifactsLocation'), concat('scripts/'))]",
                "artifactsSasToken": "",
                "applyScriptsSwitch": true,
                "autoscaleVmCount": 10,
                "autoscaleVmSku": "Standard_D2s_v3",
                "azureBackupSwitch": false,
                "commonFunctionsScriptUri": "[uri(parameters('_artifactsLocation'),concat('scripts/helper_functions.sh',parameters('_artifactsLocationSasToken')))]",
                "controllerVmSku": "Standard_D2s_v3",
                "dbLogin": "GEN-UNIQUE-8",
                "dbServerType": "mysql",
                "dbUsername": "GEN-UNIQUE-8@mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmSku": "Standard_D2s_v3",
                "dbDNS": "mysql-resourcePrefix.mysql.database.azure.com",
                "elasticAvailabilitySetName": "elastic-avset-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticClusterName": "es-cluster-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName1": "elastic-vm-nic-01-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName2": "elastic-vm-nic-02-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName3": "elastic-vm-nic-03-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticScriptFilename": "install_elastic.sh",
                "elasticVm1IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.20')]",
                "elasticVm2IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.21')]",
                "elasticVm3IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.22')]",
                "elasticVmName": "elastic-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName1": "elastic-vm-01-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName2": "elastic-vm-02-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName3": "elastic-vm-03-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extBeName": "lb-backend-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extFeName": "lb-frontend-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extNatPool": "lb-natpool-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extProbe": "lb-probe-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "fileServerDiskCount": 4,
                "fileServerDiskSize": 127,
                "fileServerType": "nfs",
                "gatewayName": "vnet-gateway-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gatewayPublicIPName": "vnet-gw-ip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gatewaySubnet": "GatewaySubnet",
                "gatewaySubnetPrefix": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)))]",
                "gatewaySubnetRange": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)), '.0/24')]",
                "gatewayType": "Vpn",
                "gfsNameRoot": "gluster-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gfxAvailabilitySetName": "gluster-avset-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "glusterScriptFilename": "install_gluster.sh",
                "glusterVmCount": 2,
                "glusterVmSku": "Standard_D2s_v3",
                "htmlLocalCopySwitch": true,
                "httpsTermination": "VMSS",
                "ctlrNicName": "controller-vm-nic-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrNsgName": "controller-nsg-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrPipName": "controller-pubip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrVmName": "controller-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrVmSecrets": "[take(variables('ctlrVmSecretsArray'), if(empty(parameters('keyVaultResourceId')), 0, 1))]",
                "lbName": "lb-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "lbPipName": "lb-pubip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "maharaDbName": "mahara",
                "maharaDbUser": "mahara",
                "maharaDbUserAzure": "mahara@mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "maharaInstallScriptFilename": "install_mahara.sh",
                "maharaVersion": "17.10_STABLE",
                "mysqlPgresSkuHwFamily": "Gen5",
                "mysqlPgresSkuName": "[concat(if(equals(parameters('mysqlPgresSkuTier'),'Basic'),'B', if(equals(parameters('mysqlPgresSkuTier'),'GeneralPurpose'),'GP', 'MO')), '_', parameters('mysqlPgresSkuHwFamily'), '_', string(parameters('mysqlPgresVcores')))]",
                "mysqlPgresSkuTier": "GeneralPurpose",
                "mysqlPgresStgSizeGB": 125,
                "mysqlPgresVcores": 2,
                "mysqlVersion": "5.7",
                "osType": {
                  "offer": "UbuntuServer",
                  "publisher": "Canonical",
                  "sku": "18.04-LTS",
                  "version": "latest"
                },
                "policyName": "policy-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "postgresVersion": "9.6",
                "resourcesPrefix": "[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "searchType": "none",
                "serverName": "mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "siteURL": "www.example.org",
                "sshPublicKey": "GEN-SSH-PUB-KEY",
                "sshUsername": "GEN-UNIQUE-8",
                "sslEnforcement": "Disabled",
                "storageAccountName": "[tolower(concat('abs',variables('resourceprefix')))]",
                "storageAccountType": "Standard_LRS",
                "subnetElastic": "elastic-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetElasticPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)))]",
                "subnetElasticRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.0/24')]",
                "subnetSan": "san-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetSanPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),1)))]",
                "subnetSanRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),1)), '.0/24')]",
                "subnetWeb": "web-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetWebPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)))]",
                "subnetWebRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)), '.0/24')]",
                "thumbprintSslCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('sslCertThumbprint'))), 'None', parameters('sslCertThumbprint'))]",
                "thumbprintCaCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('caCertThumbprint'))), 'None', parameters('caCertThumbprint'))]",
                "vNetAddressSpace": "172.31.0.0",
                "vaultName": "vault-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vmssName": "vmss-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vmssdStorageAccounttName": "[concat('vmss',uniqueString(resourceGroup().id))]",
                "vnetGwDeploySwitch": false,
                "vnetName": "vnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vpnType": "RouteBased",
                "webServerSetupScriptFilename": "setup_webserver.sh",
                "webServerType": "apache"
              }
            },
            "siteFQDN": {
              "value": "[reference('networkTemplate').outputs.siteFQDN.value]"
            }
          },
          "templateLink": {
            "uri": "(maharaCommon).baseTemplateUrlwebvmss.jsonparameters('_artifactsLocationSasToken')"
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-10-01",
        "name": "storageAccountTemplate",
        "properties": {
          "mode": "Incremental",
          "parameters": {
            "maharaCommon": {
              "value": {
                "location": "[resourceGroup().location]",
                "baseTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('nested/'))]",
                "scriptLocation": "[uri(parameters('_artifactsLocation'), concat('scripts/'))]",
                "artifactsSasToken": "",
                "applyScriptsSwitch": true,
                "autoscaleVmCount": 10,
                "autoscaleVmSku": "Standard_D2s_v3",
                "azureBackupSwitch": false,
                "commonFunctionsScriptUri": "[uri(parameters('_artifactsLocation'),concat('scripts/helper_functions.sh',parameters('_artifactsLocationSasToken')))]",
                "controllerVmSku": "Standard_D2s_v3",
                "dbLogin": "GEN-UNIQUE-8",
                "dbServerType": "mysql",
                "dbUsername": "GEN-UNIQUE-8@mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmSku": "Standard_D2s_v3",
                "dbDNS": "mysql-resourcePrefix.mysql.database.azure.com",
                "elasticAvailabilitySetName": "elastic-avset-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticClusterName": "es-cluster-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName1": "elastic-vm-nic-01-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName2": "elastic-vm-nic-02-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticNicName3": "elastic-vm-nic-03-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticScriptFilename": "install_elastic.sh",
                "elasticVm1IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.20')]",
                "elasticVm2IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.21')]",
                "elasticVm3IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.22')]",
                "elasticVmName": "elastic-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName1": "elastic-vm-01-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName2": "elastic-vm-02-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "elasticVmName3": "elastic-vm-03-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extBeName": "lb-backend-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extFeName": "lb-frontend-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extNatPool": "lb-natpool-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "extProbe": "lb-probe-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "fileServerDiskCount": 4,
                "fileServerDiskSize": 127,
                "fileServerType": "nfs",
                "gatewayName": "vnet-gateway-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gatewayPublicIPName": "vnet-gw-ip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gatewaySubnet": "GatewaySubnet",
                "gatewaySubnetPrefix": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)))]",
                "gatewaySubnetRange": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)), '.0/24')]",
                "gatewayType": "Vpn",
                "gfsNameRoot": "gluster-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "gfxAvailabilitySetName": "gluster-avset-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "glusterScriptFilename": "install_gluster.sh",
                "glusterVmCount": 2,
                "glusterVmSku": "Standard_D2s_v3",
                "htmlLocalCopySwitch": true,
                "httpsTermination": "VMSS",
                "ctlrNicName": "controller-vm-nic-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrNsgName": "controller-nsg-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrPipName": "controller-pubip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrVmName": "controller-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "ctlrVmSecrets": "[take(variables('ctlrVmSecretsArray'), if(empty(parameters('keyVaultResourceId')), 0, 1))]",
                "lbName": "lb-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "lbPipName": "lb-pubip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "maharaDbName": "mahara",
                "maharaDbUser": "mahara",
                "maharaDbUserAzure": "mahara@mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "maharaInstallScriptFilename": "install_mahara.sh",
                "maharaVersion": "17.10_STABLE",
                "mysqlPgresSkuHwFamily": "Gen5",
                "mysqlPgresSkuName": "[concat(if(equals(parameters('mysqlPgresSkuTier'),'Basic'),'B', if(equals(parameters('mysqlPgresSkuTier'),'GeneralPurpose'),'GP', 'MO')), '_', parameters('mysqlPgresSkuHwFamily'), '_', string(parameters('mysqlPgresVcores')))]",
                "mysqlPgresSkuTier": "GeneralPurpose",
                "mysqlPgresStgSizeGB": 125,
                "mysqlPgresVcores": 2,
                "mysqlVersion": "5.7",
                "osType": {
                  "offer": "UbuntuServer",
                  "publisher": "Canonical",
                  "sku": "18.04-LTS",
                  "version": "latest"
                },
                "policyName": "policy-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "postgresVersion": "9.6",
                "resourcesPrefix": "[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "searchType": "none",
                "serverName": "mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "siteURL": "www.example.org",
                "sshPublicKey": "GEN-SSH-PUB-KEY",
                "sshUsername": "GEN-UNIQUE-8",
                "sslEnforcement": "Disabled",
                "storageAccountName": "[tolower(concat('abs',variables('resourceprefix')))]",
                "storageAccountType": "Standard_LRS",
                "subnetElastic": "elastic-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetElasticPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)))]",
                "subnetElasticRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.0/24')]",
                "subnetSan": "san-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetSanPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),1)))]",
                "subnetSanRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),1)), '.0/24')]",
                "subnetWeb": "web-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "subnetWebPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)))]",
                "subnetWebRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)), '.0/24')]",
                "thumbprintSslCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('sslCertThumbprint'))), 'None', parameters('sslCertThumbprint'))]",
                "thumbprintCaCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('caCertThumbprint'))), 'None', parameters('caCertThumbprint'))]",
                "vNetAddressSpace": "172.31.0.0",
                "vaultName": "vault-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vmssName": "vmss-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vmssdStorageAccounttName": "[concat('vmss',uniqueString(resourceGroup().id))]",
                "vnetGwDeploySwitch": false,
                "vnetName": "vnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
                "vpnType": "RouteBased",
                "webServerSetupScriptFilename": "setup_webserver.sh",
                "webServerType": "apache"
              }
            }
          },
          "templateLink": {
            "uri": "(maharaCommon).baseTemplateUrlstorageAccount.jsonparameters('_artifactsLocationSasToken')"
          }
        }
      }
    ],
    "outputs": {
      "siteURL": {
        "type": "string",
        "value": "[if(equals(variables('maharaCommon').siteURL,'www.example.org'),reference('networkTemplate').outputs.siteFQDN.value,'www.example.org')]"
      },
      "controllerInstanceIP": {
        "type": "string",
        "value": "[reference('controllerTemplate').outputs.controllerIP.value]"
      },
      "databaseDNS": {
        "type": "string",
        "value": "[variables('maharaCommon').dbDNS]"
      },
      "databaseAdminUsername": {
        "type": "string",
        "value": "[variables('maharaCommon').dbUsername]"
      },
      "firstFrontendVmIP": {
        "type": "string",
        "value": "[reference('scaleSetTemplate').outputs.webvm1IP.value]"
      },
      "maharaDbUsername": {
        "type": "string",
        "value": "[variables('maharaCommon').maharaDbUserAzure]"
      },
      "sshUsername": {
        "type": "string",
        "value": "[variables('maharaCommon').sshUsername]"
      },
      "loadBalancerDNS": {
        "type": "string",
        "value": "[reference('networkTemplate').outputs.siteFQDN.value]"
      }
    },
    "variables": {
      "maharaCommon": {
        "location": "[resourceGroup().location]",
        "baseTemplateUrl": "[uri(parameters('_artifactsLocation'), concat('nested/'))]",
        "scriptLocation": "[uri(parameters('_artifactsLocation'), concat('scripts/'))]",
        "artifactsSasToken": "",
        "applyScriptsSwitch": true,
        "autoscaleVmCount": 10,
        "autoscaleVmSku": "Standard_D2s_v3",
        "azureBackupSwitch": false,
        "commonFunctionsScriptUri": "[uri(parameters('_artifactsLocation'),concat('scripts/helper_functions.sh',parameters('_artifactsLocationSasToken')))]",
        "controllerVmSku": "Standard_D2s_v3",
        "dbLogin": "GEN-UNIQUE-8",
        "dbServerType": "mysql",
        "dbUsername": "GEN-UNIQUE-8@mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "elasticVmSku": "Standard_D2s_v3",
        "dbDNS": "mysql-resourcePrefix.mysql.database.azure.com",
        "elasticAvailabilitySetName": "elastic-avset-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "elasticClusterName": "es-cluster-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "elasticNicName1": "elastic-vm-nic-01-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "elasticNicName2": "elastic-vm-nic-02-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "elasticNicName3": "elastic-vm-nic-03-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "elasticScriptFilename": "install_elastic.sh",
        "elasticVm1IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.20')]",
        "elasticVm2IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.21')]",
        "elasticVm3IP": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.22')]",
        "elasticVmName": "elastic-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "elasticVmName1": "elastic-vm-01-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "elasticVmName2": "elastic-vm-02-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "elasticVmName3": "elastic-vm-03-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "extBeName": "lb-backend-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "extFeName": "lb-frontend-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "extNatPool": "lb-natpool-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "extProbe": "lb-probe-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "fileServerDiskCount": 4,
        "fileServerDiskSize": 127,
        "fileServerType": "nfs",
        "gatewayName": "vnet-gateway-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "gatewayPublicIPName": "vnet-gw-ip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "gatewaySubnet": "GatewaySubnet",
        "gatewaySubnetPrefix": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)))]",
        "gatewaySubnetRange": "[concat(variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),2)), '.0/24')]",
        "gatewayType": "Vpn",
        "gfsNameRoot": "gluster-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "gfxAvailabilitySetName": "gluster-avset-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "glusterScriptFilename": "install_gluster.sh",
        "glusterVmCount": 2,
        "glusterVmSku": "Standard_D2s_v3",
        "htmlLocalCopySwitch": true,
        "httpsTermination": "VMSS",
        "ctlrNicName": "controller-vm-nic-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "ctlrNsgName": "controller-nsg-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "ctlrPipName": "controller-pubip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "ctlrVmName": "controller-vm-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "ctlrVmSecrets": "[take(variables('ctlrVmSecretsArray'), if(empty(parameters('keyVaultResourceId')), 0, 1))]",
        "lbName": "lb-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "lbPipName": "lb-pubip-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "maharaDbName": "mahara",
        "maharaDbUser": "mahara",
        "maharaDbUserAzure": "mahara@mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "maharaInstallScriptFilename": "install_mahara.sh",
        "maharaVersion": "17.10_STABLE",
        "mysqlPgresSkuHwFamily": "Gen5",
        "mysqlPgresSkuName": "[concat(if(equals(parameters('mysqlPgresSkuTier'),'Basic'),'B', if(equals(parameters('mysqlPgresSkuTier'),'GeneralPurpose'),'GP', 'MO')), '_', parameters('mysqlPgresSkuHwFamily'), '_', string(parameters('mysqlPgresVcores')))]",
        "mysqlPgresSkuTier": "GeneralPurpose",
        "mysqlPgresStgSizeGB": 125,
        "mysqlPgresVcores": 2,
        "mysqlVersion": "5.7",
        "osType": {
          "offer": "UbuntuServer",
          "publisher": "Canonical",
          "sku": "18.04-LTS",
          "version": "latest"
        },
        "policyName": "policy-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "postgresVersion": "9.6",
        "resourcesPrefix": "[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "searchType": "none",
        "serverName": "mysql-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "siteURL": "www.example.org",
        "sshPublicKey": "GEN-SSH-PUB-KEY",
        "sshUsername": "GEN-UNIQUE-8",
        "sslEnforcement": "Disabled",
        "storageAccountName": "[tolower(concat('abs',variables('resourceprefix')))]",
        "storageAccountType": "Standard_LRS",
        "subnetElastic": "elastic-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "subnetElasticPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)))]",
        "subnetElasticRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),4)), '.0/24')]",
        "subnetSan": "san-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "subnetSanPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),1)))]",
        "subnetSanRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),1)), '.0/24')]",
        "subnetWeb": "web-subnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "subnetWebPrefix": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)))]",
        "subnetWebRange": "[concat( variables('octets')[0], '.', variables('octets')[1], '.', string(add(int(variables('octets')[2]),0)), '.0/24')]",
        "thumbprintSslCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('sslCertThumbprint'))), 'None', parameters('sslCertThumbprint'))]",
        "thumbprintCaCert": "[if(or(empty(parameters('keyVaultResourceId')), empty(parameters('caCertThumbprint'))), 'None', parameters('caCertThumbprint'))]",
        "vNetAddressSpace": "172.31.0.0",
        "vaultName": "vault-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "vmssName": "vmss-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "vmssdStorageAccounttName": "[concat('vmss',uniqueString(resourceGroup().id))]",
        "vnetGwDeploySwitch": false,
        "vnetName": "vnet-[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]",
        "vpnType": "RouteBased",
        "webServerSetupScriptFilename": "setup_webserver.sh",
        "webServerType": "apache"
      },
      "certUrlArray": [
        {
          "certificateUrl": ""
        },
        {
          "certificateUrl": ""
        }
      ],
      "ctlrVmSecretsArray": [
        {
          "sourceVault": {
            "id": ""
          },
          "vaultCertificates": "[take(variables('certUrlArray'), if(empty(parameters('caCertKeyVaultURL')), 1, 2))]"
        }
      ],
      "octets": "[split(parameters('vNetAddressSpace'), '.')]",
      "resourceprefix": "[substring(uniqueString(resourceGroup().id, deployment().name), 3, 6)]"
    },
    "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
  }
}