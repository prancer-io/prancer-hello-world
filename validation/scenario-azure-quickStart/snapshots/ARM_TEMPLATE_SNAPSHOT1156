{
  "structure": "filesystem",
  "error": null,
  "reference": "master",
  "contentType": "json",
  "source": "gitConnectorAzureQuickStart",
  "paths": [
    "/quickstarts/microsoft.compute/vmss-linux-customimage-autoscale/azuredeploy.json",
    "/quickstarts/microsoft.compute/vmss-linux-customimage-autoscale/azuredeploy.parameters.json"
  ],
  "timestamp": 1642962904881,
  "queryuser": null,
  "checksum": "99914b932bd37a50b983c5e7c90ae93b",
  "node": {
    "masterSnapshotId": "ARM_TEMPLATE_SNAPSHOT",
    "type": "arm",
    "collection": "armtemplate",
    "paths": [
      "/quickstarts/microsoft.compute/vmss-linux-customimage-autoscale/azuredeploy.json",
      "/quickstarts/microsoft.compute/vmss-linux-customimage-autoscale/azuredeploy.parameters.json"
    ],
    "snapshotId": "ARM_TEMPLATE_SNAPSHOT1156",
    "status": "active",
    "validate": true,
    "resourceTypes": [
      "microsoft.network/publicipaddresses",
      "microsoft.network/virtualnetworks",
      "microsoft.network/loadbalancers",
      "microsoft.compute/virtualmachinescalesets",
      "microsoft.insights/autoscalesettings",
      "microsoft.compute/images"
    ]
  },
  "snapshotId": "ARM_TEMPLATE_SNAPSHOT1156",
  "collection": "armtemplate",
  "json": {
    "contentVersion": "1.0.0.0",
    "parameters": {
      "vmSku": {
        "type": "string",
        "defaultValue": "Standard_D2s_v3",
        "metadata": {
          "description": "Size of VMs in the VM Scale Set."
        }
      },
      "vmssName": {
        "type": "string",
        "metadata": {
          "description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
        },
        "minLength": 3,
        "maxLength": 61,
        "value": "GEN-UNIQUE"
      },
      "capacity": {
        "type": "int",
        "metadata": {
          "description": "Number of VM instances (20 or less)."
        },
        "defaultValue": 2,
        "minValue": 1,
        "maxValue": 20,
        "value": 2
      },
      "adminUsername": {
        "type": "string",
        "metadata": {
          "description": "Admin username on all VMs."
        },
        "value": "GEN-UNIQUE"
      },
      "adminPassword": {
        "type": "securestring",
        "metadata": {
          "description": "Admin password on all VMs. It must be at least 12 characters in length."
        },
        "minLength": 12,
        "value": "GEN-PASSWORD"
      },
      "sourceImageVhdUri": {
        "type": "string",
        "metadata": {
          "description": "The source of the blob containing the custom image, must be in the same region of the deployment."
        },
        "value": "GEN-GENERALIZED-UBUNTUVHD-URI"
      },
      "_artifactsLocation": {
        "type": "string",
        "metadata": {
          "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
        },
        "defaultValue": "[deployment().properties.templateLink.uri]"
      },
      "_artifactsLocationSasToken": {
        "type": "securestring",
        "metadata": {
          "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
        },
        "defaultValue": ""
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for all resources."
        }
      }
    },
    "variables": {
      "vmssuniqueName": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]",
      "addressPrefix": "10.0.0.0/16",
      "subnetPrefix": "10.0.0.0/24",
      "virtualNetworkName": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]vnet",
      "subnetName": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]subnet",
      "lbName": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lb",
      "bepoolName": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lbbepool",
      "fepoolName": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lbfepool",
      "bepoolID": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lb/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lbbepool",
      "feIpConfigName": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lbfepoolIpConfig",
      "feIpConfigId": "Microsoft.Network/loadBalancers/frontendIPConfigurations/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lb/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lbfepoolIpConfig",
      "pipName": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]pip",
      "nicName": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]nic",
      "natPoolName": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lbnatpool",
      "ipConfigName": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]ipconfig",
      "httpProbeName": "httpProbe",
      "httpsProbeName": "httpsProbe",
      "imageName": "myCustomImage"
    },
    "resources": [
      {
        "type": "Microsoft.Compute/images",
        "apiVersion": "2020-06-01",
        "name": "myCustomImage",
        "location": "[resourceGroup().location]",
        "properties": {
          "hyperVGeneration": "V1",
          "storageProfile": {
            "osDisk": {
              "osType": "Linux",
              "osState": "Generalized",
              "blobUri": "GEN-GENERALIZED-UBUNTUVHD-URI",
              "storageAccountType": "Standard_LRS"
            }
          }
        }
      },
      {
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]vnet",
        "location": "[resourceGroup().location]",
        "apiVersion": "2020-06-01",
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "10.0.0.0/16"
            ]
          },
          "subnets": [
            {
              "name": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]subnet",
              "properties": {
                "addressPrefix": "10.0.0.0/24"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]pip",
        "location": "[resourceGroup().location]",
        "apiVersion": "2020-06-01",
        "properties": {
          "publicIPAllocationMethod": "Dynamic",
          "dnsSettings": {
            "domainNameLabel": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]"
          }
        }
      },
      {
        "type": "Microsoft.Network/loadBalancers",
        "name": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lb",
        "location": "[resourceGroup().location]",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "Microsoft.Network/publicIPAddresses//[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]pip"
        ],
        "tags": {
          "displayName": "Load Balancer"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lbfepoolIpConfig",
              "properties": {
                "publicIPAddress": {
                  "id": "Microsoft.Network/publicIPAddresses/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]pip"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lbbepool"
            }
          ],
          "inboundNatPools": [
            {
              "name": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lbnatpool",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "Microsoft.Network/loadBalancers/frontendIPConfigurations/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lb/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lbfepoolIpConfig"
                },
                "protocol": "Tcp",
                "frontendPortRangeStart": 10022,
                "frontendPortRangeEnd": 11022,
                "backendPort": 22
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "HTTPRule",
              "properties": {
                "loadDistribution": "Default",
                "frontendIPConfiguration": {
                  "id": "Microsoft.Network/loadBalancers/frontendIPConfigurations/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lb/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lbfepoolIpConfig"
                },
                "backendAddressPool": {
                  "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lb/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lbbepool"
                },
                "protocol": "Tcp",
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 5,
                "probe": {
                  "id": "Microsoft.Network/loadBalancers/probes/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lb/httpsProbe"
                }
              }
            },
            {
              "name": "HTTPSRule",
              "properties": {
                "loadDistribution": "Default",
                "frontendIPConfiguration": {
                  "id": "Microsoft.Network/loadBalancers/frontendIPConfigurations/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lb/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lbfepoolIpConfig"
                },
                "backendAddressPool": {
                  "id": "bepoolId"
                },
                "protocol": "Tcp",
                "frontendPort": 443,
                "backendPort": 443,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 5,
                "probe": {
                  "id": "Microsoft.Network/loadBalancers/probes/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lb/httpsProbe"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "httpProbe",
              "properties": {
                "protocol": "Tcp",
                "port": 80,
                "intervalInSeconds": 5,
                "numberOfProbes": 2
              }
            },
            {
              "name": "httpsProbe",
              "properties": {
                "protocol": "Tcp",
                "port": 443,
                "intervalInSeconds": 5,
                "numberOfProbes": 2
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachineScaleSets",
        "name": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]",
        "location": "[resourceGroup().location]",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]vnet",
          "Microsoft.Compute/images/myCustomImage"
        ],
        "sku": {
          "name": "Standard_D2s_v3",
          "tier": "Standard",
          "capacity": 2
        },
        "properties": {
          "upgradePolicy": {
            "mode": "Manual"
          },
          "virtualMachineProfile": {
            "storageProfile": {
              "imageReference": {
                "id": "Microsoft.Compute/images/myCustomImage"
              }
            },
            "osProfile": {
              "computerNamePrefix": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]",
              "adminUsername": "GEN-UNIQUE",
              "adminPassword": "GEN-PASSWORD"
            },
            "networkProfile": {
              "networkInterfaceConfigurations": [
                {
                  "name": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]nic",
                  "properties": {
                    "primary": true,
                    "ipConfigurations": [
                      {
                        "name": "[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]ipconfig",
                        "properties": {
                          "subnet": {
                            "id": "Microsoft.Network/virtualNetworks/subnets/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]vnet/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]subnet"
                          },
                          "loadBalancerBackendAddressPools": [
                            {
                              "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lb/bePoolName"
                            }
                          ],
                          "loadBalancerInboundNatPools": [
                            {
                              "id": "Microsoft.Network/loadBalancers/inboundNatPools/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lb/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]lbnatpool"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "extensionProfile": {
              "extensions": [
                {
                  "name": "updatescriptextension",
                  "properties": {
                    "publisher": "Microsoft.Azure.Extensions",
                    "type": "CustomScript",
                    "typeHandlerVersion": "2.0",
                    "autoUpgradeMinorVersion": true,
                    "settings": {
                      "fileUris": [
                        "[uri(parameters('_artifactsLocation'), concat('scripts/updateapp.sh', parameters('_artifactsLocationSasToken')))]",
                        "[uri(parameters('_artifactsLocation'), concat('app/package.tar.gz', parameters('_artifactsLocationSasToken')))]"
                      ],
                      "commandToExecute": "[format('sudo bash {0} \"{1}\" {2} {3}', 'updateapp.sh', 'package.tar.gz', '/nodeserver', 'mainsite.service')]"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      {
        "type": "Microsoft.Insights/autoscaleSettings",
        "apiVersion": "2015-04-01",
        "name": "autoscalesettings",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachineScaleSets/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]"
        ],
        "properties": {
          "name": "autoscalesettings",
          "targetResourceUri": "Microsoft.Compute/virtualMachineScaleSets/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]",
          "enabled": true,
          "profiles": [
            {
              "name": "Profile1",
              "capacity": {
                "minimum": "2",
                "maximum": "20",
                "default": 2
              },
              "rules": [
                {
                  "metricTrigger": {
                    "metricName": "Percentage CPU",
                    "metricResourceUri": "Microsoft.Compute/virtualMachineScaleSets/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]",
                    "timeGrain": "PT1M",
                    "statistic": "Average",
                    "timeWindow": "PT5M",
                    "timeAggregation": "Average",
                    "operator": "GreaterThan",
                    "threshold": 40.0
                  },
                  "scaleAction": {
                    "direction": "Increase",
                    "type": "ChangeCount",
                    "value": "1",
                    "cooldown": "PT1M"
                  }
                },
                {
                  "metricTrigger": {
                    "metricName": "Percentage CPU",
                    "metricResourceUri": "Microsoft.Compute/virtualMachineScaleSets/[toLower(take(concat(take(parameters('vmssName'),6), uniqueString(resourceGroup().id)), 9))]",
                    "timeGrain": "PT1M",
                    "statistic": "Average",
                    "timeWindow": "PT5M",
                    "timeAggregation": "Average",
                    "operator": "LessThan",
                    "threshold": 30.0
                  },
                  "scaleAction": {
                    "direction": "Decrease",
                    "type": "ChangeCount",
                    "value": "1",
                    "cooldown": "PT5M"
                  }
                }
              ]
            }
          ]
        }
      }
    ],
    "outputs": {
      "fqdn": {
        "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('pipName')),'2020-06-01').dnsSettings.fqdn]",
        "type": "string"
      }
    },
    "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
  }
}