{
  "structure": "filesystem",
  "error": null,
  "reference": "master",
  "contentType": "json",
  "source": "gitConnectorAzureQuickStart",
  "paths": [
    "/quickstarts/microsoft.network/azure-firewall-dns-proxy/azuredeploy.json",
    "/quickstarts/microsoft.network/azure-firewall-dns-proxy/azuredeploy.parameters.json"
  ],
  "timestamp": 1642962908509,
  "queryuser": null,
  "checksum": "99914b932bd37a50b983c5e7c90ae93b",
  "node": {
    "masterSnapshotId": "ARM_TEMPLATE_SNAPSHOT",
    "type": "arm",
    "collection": "armtemplate",
    "paths": [
      "/quickstarts/microsoft.network/azure-firewall-dns-proxy/azuredeploy.json",
      "/quickstarts/microsoft.network/azure-firewall-dns-proxy/azuredeploy.parameters.json"
    ],
    "snapshotId": "ARM_TEMPLATE_SNAPSHOT1503",
    "status": "active",
    "validate": true,
    "resourceTypes": [
      "microsoft.network/publicipaddresses",
      "microsoft.compute/virtualmachines/extensions",
      "microsoft.network/bastionhosts",
      "microsoft.network/privateendpoints",
      "microsoft.compute/availabilitysets",
      "microsoft.network/routetables",
      "microsoft.network/azurefirewalls",
      "microsoft.network/virtualnetworks",
      "microsoft.authorization/roleassignments",
      "microsoft.network/firewallpolicies/rulecollectiongroups",
      "microsoft.operationalinsights/workspaces",
      "microsoft.network/privatednszones",
      "microsoft.network/networkinterfaces",
      "microsoft.compute/virtualmachines",
      "microsoft.storage/storageaccounts",
      "microsoft.network/virtualnetworkgateways",
      "microsoft.network/virtualnetworks/virtualnetworkpeerings",
      "microsoft.network/networksecuritygroups",
      "microsoft.network/firewallpolicies"
    ]
  },
  "snapshotId": "ARM_TEMPLATE_SNAPSHOT1503",
  "collection": "armtemplate",
  "json": {
    "contentVersion": "1.0.0.0",
    "parameters": {
      "adlsStorageAccountName": {
        "type": "string",
        "defaultValue": "[concat('adls', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "Specifies the globally unique DNS Name for the ADLS Gen 2 storage account."
        }
      },
      "blobStorageAccountName": {
        "type": "string",
        "defaultValue": "[concat('blob', uniquestring(resourceGroup().id))]",
        "metadata": {
          "description": "Specifies the globally unique name for the storage account used to store the test file system and the boot diagnostics logs of the virtual machines."
        }
      },
      "adlsStorageAccountNetworkAclsDefaultAction": {
        "type": "string",
        "defaultValue": "Deny",
        "allowedValues": [
          "Allow",
          "Deny"
        ],
        "metadata": {
          "description": "Specifies the default action of allow or deny when no other rules match for the ADLS storage account."
        }
      },
      "blobStorageAccountNetworkAclsDefaultAction": {
        "type": "string",
        "defaultValue": "Deny",
        "allowedValues": [
          "Allow",
          "Deny"
        ],
        "metadata": {
          "description": "Allow or disallow public access to all blobs or containers in the Blob storage account. The default interpretation is true for this property."
        }
      },
      "adlsStorageAccountAllowBlobPublicAccess": {
        "type": "bool",
        "defaultValue": true,
        "metadata": {
          "description": "Allow or disallow public access to all blobs or containers in the ADLS storage account. The default interpretation is true for this property."
        }
      },
      "blobStorageAccountAllowBlobPublicAccess": {
        "type": "bool",
        "defaultValue": true,
        "metadata": {
          "description": "Allow or disallow public access to all blobs or containers in the Blob storage account. The default interpretation is true for this property."
        }
      },
      "deployCustomDnsForwarder": {
        "type": "bool",
        "defaultValue": false,
        "metadata": {
          "description": "Specify whether deploy a custom DNS forwarder in the Hub Virtual Network. Default value is false."
        }
      },
      "dnsAvailabilitySetName": {
        "type": "string",
        "defaultValue": "[concat('availabilityset', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "Name of the Availability Set used by the DNS virtual machine."
        }
      },
      "dnsVmName": {
        "type": "string",
        "defaultValue": "DnsVm",
        "metadata": {
          "description": "Specifies the name of the DNS virtual machine."
        }
      },
      "devVmName": {
        "type": "string",
        "defaultValue": "DevVm",
        "metadata": {
          "description": "Specifies the name of the virtual machine in the Development Virtual Network."
        }
      },
      "prodVmName": {
        "type": "string",
        "defaultValue": "ProdVm",
        "metadata": {
          "description": "Specifies the name of the virtual machine in the Production Virtual Network."
        }
      },
      "vmSize": {
        "type": "string",
        "defaultValue": "Standard_D4s_v3",
        "metadata": {
          "description": "Specifies the size of the virtual machine."
        }
      },
      "imagePublisher": {
        "type": "string",
        "defaultValue": "Canonical",
        "metadata": {
          "description": "Specifies the image publisher of the disk image used to create the virtual machine."
        }
      },
      "imageOffer": {
        "type": "string",
        "defaultValue": "UbuntuServer",
        "metadata": {
          "description": "Specifies the offer of the platform image or marketplace image used to create the virtual machine."
        }
      },
      "imageSku": {
        "type": "string",
        "defaultValue": "18.04-LTS",
        "allowedValues": [
          "12.04.5-LTS",
          "14.04.5-LTS",
          "16.04.0-LTS",
          "18.04-LTS"
        ],
        "metadata": {
          "description": "Specifies the Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
        }
      },
      "authenticationType": {
        "type": "string",
        "defaultValue": "password",
        "allowedValues": [
          "sshPublicKey",
          "password"
        ],
        "metadata": {
          "description": "Specifies the type of authentication when accessing the Virtual Machine. SSH key is recommended."
        }
      },
      "adminUsername": {
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the administrator account of the virtual machine."
        },
        "value": "GEN-UNIQUE"
      },
      "adminPasswordOrKey": {
        "type": "securestring",
        "metadata": {
          "description": "Specifies the SSH Key or password for the virtual machine. SSH key is recommended."
        },
        "value": "GEN-PASSWORD"
      },
      "diskStorageAccounType": {
        "type": "string",
        "defaultValue": "Premium_LRS",
        "allowedValues": [
          "Premium_LRS",
          "Premium_ZRS",
          "StandardSSD_LRS",
          "StandardSSD_ZRS",
          "Standard_LRS"
        ],
        "metadata": {
          "description": "Defines the storage account type for OS and data disk."
        }
      },
      "numDataDisks": {
        "type": "int",
        "defaultValue": 1,
        "minValue": 0,
        "maxValue": 64,
        "metadata": {
          "description": "Specifies the number of data disks of the virtual machine."
        }
      },
      "osDiskSize": {
        "type": "int",
        "defaultValue": 100,
        "metadata": {
          "description": "The size in GB of the OS disk of the VM."
        }
      },
      "dataDiskSize": {
        "type": "int",
        "defaultValue": 10,
        "metadata": {
          "description": "Specifies the size in GB of the OS disk of the virtual machine."
        }
      },
      "dataDiskCaching": {
        "type": "string",
        "defaultValue": "ReadWrite",
        "metadata": {
          "description": "Specifies the caching requirements for the data disks."
        }
      },
      "_artifactsLocation": {
        "type": "string",
        "defaultValue": "[deployment().properties.templateLink.uri]",
        "metadata": {
          "description": "Specifies the base URI where artifacts required by this template are located including a trailing '/'"
        }
      },
      "_artifactsLocationSasToken": {
        "type": "securestring",
        "defaultValue": "",
        "metadata": {
          "description": "Specifies the sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
        }
      },
      "adlsStorageAccountAdlsPrivateEndpointName": {
        "type": "string",
        "defaultValue": "AdlsStorageAccountAdlsPrivateEndpoint",
        "metadata": {
          "description": "Specifies the name of the adls private endpoint to the adls storage account."
        }
      },
      "adlsStorageAccountBlobPrivateEndpointName": {
        "type": "string",
        "defaultValue": "AdlsStorageAccountBlobPrivateEndpoint",
        "metadata": {
          "description": "Specifies the name of the blob private endpoint to the adls storage account."
        }
      },
      "blobStorageAccountBlobPrivateEndpointName": {
        "type": "string",
        "defaultValue": "BlobStorageAccountBlobPrivateEndpoint",
        "metadata": {
          "description": "Specifies the name of the blob private endpoint to the boot diagnostics storage account."
        }
      },
      "privateDnsZoneName": {
        "type": "string",
        "defaultValue": "contoso.corp",
        "metadata": {
          "description": "Private DNS Zone name."
        }
      },
      "workspaceName": {
        "type": "string",
        "defaultValue": "[concat('loganalytics', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "the name of the Log Analytics workspace."
        }
      },
      "workspaceSku": {
        "type": "string",
        "defaultValue": "PerGB2018",
        "allowedValues": [
          "Free",
          "Standard",
          "Premium",
          "PerNode",
          "PerGB2018",
          "Standalone",
          "CapacityReservation"
        ],
        "metadata": {
          "description": "The sku of the Log Analytics workspace."
        }
      },
      "firewallName": {
        "type": "string",
        "defaultValue": "HubFirewall",
        "metadata": {
          "description": "The name of the Azure Firewall."
        }
      },
      "firewallAvailabilityZones": {
        "type": "array",
        "defaultValue": [],
        "metadata": {
          "description": "Zone numbers e.g. 1,2,3."
        }
      },
      "numberOfFirewallPublicIPAddresses": {
        "type": "int",
        "defaultValue": 1,
        "minValue": 1,
        "maxValue": 100,
        "metadata": {
          "description": "Number of public IP addresses for the Azure Firewall"
        }
      },
      "createDnatRuleCollection": {
        "type": "bool",
        "defaultValue": true,
        "metadata": {
          "description": "Specifies whether create DNAT rule collection in the Azure Firewall policy or not."
        }
      },
      "deployVpnGateway": {
        "type": "bool",
        "defaultValue": false,
        "metadata": {
          "description": "Specifies whether deploy a VPN Gateway in the Hub or not."
        }
      },
      "gatewaySku": {
        "type": "string",
        "defaultValue": "Standard",
        "allowedValues": [
          "Basic",
          "HighPerformance",
          "Standard",
          "UltraPerformance",
          "VpnGw1",
          "VpnGw2",
          "VpnGw3",
          "VpnGw4",
          "VpnGw5",
          "VpnGw1AZ",
          "VpnGw2AZ",
          "VpnGw3AZ",
          "VpnGw4AZ",
          "VpnGw5AZ",
          "ErGw1AZ",
          "ErGw2AZ",
          "ErGw3AZ"
        ],
        "metadata": {
          "description": "The SKU of the Gateway, if deployed"
        }
      },
      "gatewayType": {
        "type": "string",
        "defaultValue": "Vpn",
        "allowedValues": [
          "Vpn",
          "ExpressRoute"
        ],
        "metadata": {
          "description": "The type of this virtual network gateway. - Vpn or ExpressRoute"
        }
      },
      "vpnType": {
        "type": "string",
        "defaultValue": "RouteBased",
        "allowedValues": [
          "PolicyBased",
          "RouteBased"
        ],
        "metadata": {
          "description": "The type of this virtual network gateway. - PolicyBased or RouteBased"
        }
      },
      "enableBgp": {
        "type": "bool",
        "defaultValue": false,
        "metadata": {
          "description": "Whether BGP is enabled for this virtual network gateway or not."
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for all resources."
        }
      },
      "hubVnetName": {
        "type": "string",
        "defaultValue": "HubVnet"
      },
      "hubVnetAddressPrefix": {
        "type": "string",
        "defaultValue": "192.168.0.0/16"
      },
      "hubVnetFirewallSubnetName": {
        "type": "string",
        "defaultValue": "AzureFirewallSubnet",
        "metadata": {
          "description": "The name of the Firewall subnet."
        }
      },
      "hubVnetFirewallSubnetPrefix": {
        "type": "string",
        "defaultValue": "192.168.0.0/26",
        "metadata": {
          "description": "The address prefix of the Firewall subnet."
        }
      },
      "hubVnetCommonSubnetName": {
        "type": "string",
        "defaultValue": "CommonSubnet",
        "metadata": {
          "description": "The name of the Management subnet."
        }
      },
      "hubVnetCommonSubnetPrefix": {
        "type": "string",
        "defaultValue": "192.168.1.0/24",
        "metadata": {
          "description": "The address prefix of the Management subnet."
        }
      },
      "hubVnetGatewaySubnetName": {
        "type": "string",
        "defaultValue": "GatewaySubnet",
        "metadata": {
          "description": "The name of the Development Virtual Network."
        }
      },
      "hubVnetGatewaySubnetPrefix": {
        "type": "string",
        "defaultValue": "192.168.15.224/27",
        "metadata": {
          "description": "The address prefix of the Gateway subnet."
        }
      },
      "gatewayName": {
        "type": "string",
        "defaultValue": "HubVpnGateway",
        "metadata": {
          "description": "The name of gateway."
        }
      },
      "devVnetName": {
        "type": "string",
        "defaultValue": "DevelopmentVNet",
        "metadata": {
          "description": "The name of the Development Virtual Network."
        }
      },
      "devVnetAddressPrefix": {
        "type": "string",
        "defaultValue": "10.0.0.0/16",
        "metadata": {
          "description": "The address prefix of the Development Virtual Network."
        }
      },
      "prodVnetName": {
        "type": "string",
        "defaultValue": "ProductionVNet",
        "metadata": {
          "description": "The name of the Production Virtual Network."
        }
      },
      "prodVnetAddressPrefix": {
        "type": "string",
        "defaultValue": "10.1.0.0/16",
        "metadata": {
          "description": "The address prefix of the Production Virtual Network."
        }
      },
      "devVnetDefaultSubnetName": {
        "type": "string",
        "defaultValue": "DefaultSubnet",
        "metadata": {
          "description": "The name of the Workload subnet."
        }
      },
      "devVNetDefaultSubnetPrefix": {
        "type": "string",
        "defaultValue": "10.0.0.0/24",
        "metadata": {
          "description": "The address prefix of the Workload subnet in the Development Virtual Network."
        }
      },
      "prodVnetDefaultSubnetName": {
        "type": "string",
        "defaultValue": "DefaultSubnet",
        "metadata": {
          "description": "The name of the Workload subnet."
        }
      },
      "prodVNetDefaultSubnetPrefix": {
        "type": "string",
        "defaultValue": "10.1.0.0/24",
        "metadata": {
          "description": "The address prefix of the Workload subnet in the Production Virtual Network."
        }
      },
      "hubVnetBastionSubnetPrefix": {
        "type": "string",
        "defaultValue": "192.168.4.0/24",
        "metadata": {
          "description": "Specifies the Bastion subnet IP prefix. This prefix must be within vnet IP prefix address space."
        }
      },
      "bastionHostName": {
        "type": "string",
        "defaultValue": "[concat('bastion', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "Specifies the name of the Azure Bastion resource."
        }
      },
      "firewallPolicyName": {
        "type": "string",
        "defaultValue": "[concat(parameters('firewallName'), 'Policy')]",
        "metadata": {
          "description": "The name of the Firewall Policy uased by the Azure Firewall"
        }
      }
    },
    "variables": {
      "bastionPublicIpAddressName": "[concat('bastion', uniqueString(resourceGroup().id))]PublicIp",
      "bastionPublicIpAddressId": "Microsoft.Network/publicIPAddresses/[concat('bastion', uniqueString(resourceGroup().id))]PublicIp",
      "bastionSubnetName": "AzureBastionSubnet",
      "bastionSubnetId": "Microsoft.Network/virtualNetworks/subnets/HubVnet/AzureBastionSubnet",
      "gatewayPublicIpName": "HubVpnGatewayPublicIp",
      "hubVnetGatewaySubnetId": "Microsoft.Network/virtualNetworks/subnets/HubVnet/GatewaySubnet",
      "hubVnetCommonSubnetId": "Microsoft.Network/virtualNetworks/subnets/HubVnet/CommonSubnet",
      "hubVnetFirewallSubnetId": "Microsoft.Network/virtualNetworks/subnets/HubVnet/AzureFirewallSubnet",
      "devVnetDefaultSubnetId": "Microsoft.Network/virtualNetworks/subnets/DevelopmentVNet/DefaultSubnet",
      "prodVnetDefaultSubnetId": "Microsoft.Network/virtualNetworks/subnets/ProductionVNet/DefaultSubnet",
      "hubVnetId": "Microsoft.Network/virtualNetworks/HubVnet",
      "devVnetId": "Microsoft.Network/virtualNetworks/DevelopmentVNet",
      "prodVnetId": "Microsoft.Network/virtualNetworks/ProductionVNet",
      "gatewayId": "Microsoft.Network/virtualNetworkGateways/HubVpnGateway",
      "dnsVmNicName": "DnsVmNic",
      "devVmNicName": "DevVmNic",
      "prodVmNicName": "ProdVmNic",
      "dnsVmNicId": "Microsoft.Network/networkInterfaces/DnsVmNic",
      "devVmNicId": "Microsoft.Network/networkInterfaces/DevVmNic",
      "prodVmNicId": "Microsoft.Network/networkInterfaces/ProdVmNic",
      "dnsVmId": "Microsoft.Compute/virtualMachines/DnsVm",
      "devVmId": "Microsoft.Compute/virtualMachines/DevVm",
      "prodVmId": "Microsoft.Compute/virtualMachines/ProdVm",
      "gatewayPublicIpId": "Microsoft.Network/publicIPAddresses/HubVpnGatewayPublicIp",
      "hubVnetCommonSubnetNsgName": "HubVnetCommonSubnetNsg",
      "hubVnetBastionSubnetNsgName": "HubVnetAzureBastionSubnetNsg",
      "devVnetDefaultSubnetNsgName": "DevelopmentVNetDefaultSubnetNsg",
      "prodVnetDefaultSubnetNsgName": "ProductionVNetDefaultSubnetNsg",
      "hubVnetCommonSubnetNsgId": "Microsoft.Network/networkSecurityGroups/HubVnetCommonSubnetNsg",
      "hubVnetBastionSubnetNsgId": "Microsoft.Network/networkSecurityGroups/HubVnetAzureBastionSubnetNsg",
      "devVnetDefaultSubnetNsgId": "Microsoft.Network/networkSecurityGroups/DevelopmentVNetDefaultSubnetNsg",
      "prodVnetDefaultSubnetNsgId": "Microsoft.Network/networkSecurityGroups/ProductionVNetDefaultSubnetNsg",
      "devVnetDefaultSubnetRouteTableName": "DevelopmentVNetDefaultSubnetRouteTable",
      "prodVnetDefaultSubnetRouteTableName": "ProductionVNetDefaultSubnetRouteTable",
      "devVnetDefaultSubnetRouteTableId": "Microsoft.Network/routeTables/DevelopmentVNetDefaultSubnetRouteTable",
      "prodVnetDefaultSubnetRouteTableId": "Microsoft.Network/routeTables/ProductionVNetDefaultSubnetRouteTable",
      "firewallPublicIPNamePrefix": "HubFirewallPublicIP",
      "azureFirewallPublicIpId": "Microsoft.Network/publicIPAddresses/HubFirewallPublicIP",
      "azureFirewallSubnetJSON": "[json(format('{{\"id\": \"{0}\"}}', variables('hubVnetFirewallSubnetId')))]",
      "firewallId": "Microsoft.Network/azureFirewalls/HubFirewall",
      "privateDnsZoneId": "Microsoft.Network/privateDnsZones/contoso.corp",
      "workspaceId": "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]",
      "firewallPolicyId": "Microsoft.Network/firewallPolicies/[concat(parameters('firewallName'), 'Policy')]",
      "firewallPolicyDefaultNetworkRuleCollectionGroupName": "HubFirewallPolicy",
      "firewallPolicyDefaultDnatRuleCollectionGroupName": "HubFirewallPolicy",
      "firewallPolicyDefaultNetworkRuleCollectionGroupId": "Microsoft.Network/firewallPolicies/ruleCollectionGroups/[concat(parameters('firewallName'), 'Policy')]/DefaultNetworkRuleCollectionGroup",
      "devContributorRoleAssignmentGuid": "[guid(concat('devcontributor', resourceGroup().id, parameters('devVmName')))]",
      "prodContributorRoleAssignmentGuid": "[guid(concat('prodcontributor', resourceGroup().id, parameters('prodVmName')))]",
      "devContributorRoleAssignmentId": "Microsoft.Authorization/roleAssignments/[guid(concat('devcontributor', resourceGroup().id, parameters('devVmName')))]",
      "prodContributorRoleAssignmentId": "Microsoft.Authorization/roleAssignments/[guid(concat('prodcontributor', resourceGroup().id, parameters('prodVmName')))]",
      "devStorageBlobDataContributorRoleAssignmentGuid": "[guid(concat('devStorageBlobDataContributor', resourceGroup().id, parameters('devVmName')))]",
      "prodStorageBlobDataContributorRoleAssignmentGuid": "[guid(concat('prodStorageBlobDataContributor', resourceGroup().id, parameters('prodVmName')))]",
      "devStorageBlobDataContributorRoleAssignmentId": "Microsoft.Authorization/roleAssignments/[guid(concat('devStorageBlobDataContributor', resourceGroup().id, parameters('devVmName')))]",
      "prodStorageBlobDataContributorRoleAssignmentId": "Microsoft.Authorization/roleAssignments/[guid(concat('prodStorageBlobDataContributor', resourceGroup().id, parameters('prodVmName')))]",
      "contributorRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "storageBlobDataContributorRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
      "dnsCustomScriptId": "Microsoft.Compute/virtualMachines/extensions/DnsVm/CustomScript",
      "devCustomScriptId": "Microsoft.Compute/virtualMachines/extensions/DevVm/CustomScript",
      "prodCustomScriptId": "Microsoft.Compute/virtualMachines/extensions/ProdVm/CustomScript",
      "dnsOmsAgentForLinuxId": "Microsoft.Compute/virtualMachines/extensions/DnsVm/LogAnalytics",
      "devOmsAgentForLinuxId": "Microsoft.Compute/virtualMachines/extensions/DevVm/LogAnalytics",
      "prodOmsAgentForLinuxId": "Microsoft.Compute/virtualMachines/extensions/ProdVm/LogAnalytics",
      "dnsAvailabilitySetId": "Microsoft.Compute/availabilitySets/[concat('availabilityset', uniqueString(resourceGroup().id))]",
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "ssh": {
          "publicKeys": [
            {
              "path": "/home/GEN-UNIQUE/.ssh/authorized_keys",
              "keyData": "GEN-PASSWORD"
            }
          ]
        },
        "provisionVMAgent": true
      },
      "adlsStorageAccountId": "Microsoft.Storage/storageAccounts/[concat('adls', uniqueString(resourceGroup().id))]",
      "blobStorageAccountId": "Microsoft.Storage/storageAccounts/[concat('blob', uniquestring(resourceGroup().id))]",
      "adlsPublicDNSZoneForwarder": "[concat('.dfs.', environment().suffixes.storage)]",
      "blobPublicDNSZoneForwarder": "[concat('.blob.', environment().suffixes.storage)]",
      "adlsPrivateDnsZoneName": "[concat('privatelink', variables('adlsPublicDNSZoneForwarder'))]",
      "blobPrivateDnsZoneName": "[concat('privatelink', variables('blobPublicDNSZoneForwarder'))]",
      "adlsPrivateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('adlsPrivateDnsZoneName'))]",
      "blobPrivateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('blobPrivateDnsZoneName'))]",
      "adlsServicePrimaryEndpoint": "[concat(parameters('adlsStorageAccountName'), variables('adlsPublicDNSZoneForwarder'))]",
      "blobServicePrimaryEndpoint": "[concat(parameters('blobStorageAccountName'), variables('blobPublicDNSZoneForwarder'))]",
      "adlsStorageAccountAdlsPrivateEndpointId": "Microsoft.Network/privateEndpoints/AdlsStorageAccountAdlsPrivateEndpoint",
      "adlsStorageAccountBlobPrivateEndpointId": "Microsoft.Network/privateEndpoints/AdlsStorageAccountBlobPrivateEndpoint",
      "blobStorageAccountBlobPrivateEndpointId": "Microsoft.Network/privateEndpoints/BlobStorageAccountBlobPrivateEndpoint",
      "adlsGroupName": "dfs",
      "blobGroupName": "blob",
      "dnsVmScriptFileName": "configure-custom-dns-forwarder.sh",
      "testVmScriptFileName": "test-dns-and-private-endpoints.sh",
      "dnsVmScriptFileUri": "[uri(parameters('_artifactsLocation'), concat('scripts/', variables('dnsVmScriptFileName'), parameters('_artifactsLocationSasToken')))]",
      "testVmScriptFileUri": "[uri(parameters('_artifactsLocation'), concat('scripts/', variables('testVmScriptFileName'), parameters('_artifactsLocationSasToken')))]"
    },
    "resources": [
      {
        "apiVersion": "2021-01-01",
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[concat('adls', uniqueString(resourceGroup().id))]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard_RAGRS"
        },
        "kind": "StorageV2",
        "properties": {
          "networkAcls": {
            "defaultAction": "Deny",
            "bypass": "AzureServices"
          },
          "allowBlobPublicAccess": true
        }
      },
      {
        "apiVersion": "2021-01-01",
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[concat('blob', uniquestring(resourceGroup().id))]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard_LRS"
        },
        "kind": "StorageV2",
        "properties": {
          "networkAcls": {
            "defaultAction": "Deny",
            "bypass": "AzureServices"
          },
          "allowBlobPublicAccess": true
        }
      },
      {
        "comments": "Network Security Group for the Subnets of the Hub Virtual Network",
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2020-07-01",
        "name": "HubVnetCommonSubnetNsg",
        "location": "[resourceGroup().location]",
        "resources": [
          {
            "type": "providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "Microsoft.Insights/default",
            "location": "[resourceGroup().location]",
            "dependsOn": [
              "Microsoft.Network/networkSecurityGroups/HubVnetCommonSubnetNsg",
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "properties": {
              "workspaceId": "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]",
              "logs": [
                {
                  "category": "NetworkSecurityGroupEvent",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": false,
                    "days": 0
                  }
                },
                {
                  "category": "NetworkSecurityGroupRuleCounter",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": false,
                    "days": 0
                  }
                }
              ]
            }
          }
        ]
      },
      {
        "comments": "Network Security Group for the Subnets of the Development Virtual Network",
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2020-07-01",
        "name": "DevelopmentVNetDefaultSubnetNsg",
        "location": "[resourceGroup().location]",
        "resources": [
          {
            "type": "providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "Microsoft.Insights/default",
            "location": "[resourceGroup().location]",
            "dependsOn": [
              "Microsoft.Network/networkSecurityGroups/DevelopmentVNetDefaultSubnetNsg",
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "properties": {
              "workspaceId": "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]",
              "logs": [
                {
                  "category": "NetworkSecurityGroupEvent",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": false,
                    "days": 0
                  }
                },
                {
                  "category": "NetworkSecurityGroupRuleCounter",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": false,
                    "days": 0
                  }
                }
              ]
            }
          }
        ]
      },
      {
        "comments": "Network Security Group for the Subnets of the Production Virtual Network",
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2020-07-01",
        "name": "ProductionVNetDefaultSubnetNsg",
        "location": "[resourceGroup().location]",
        "resources": [
          {
            "type": "providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "Microsoft.Insights/default",
            "location": "[resourceGroup().location]",
            "dependsOn": [
              "Microsoft.Network/networkSecurityGroups/ProductionVNetDefaultSubnetNsg",
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "properties": {
              "workspaceId": "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]",
              "logs": [
                {
                  "category": "NetworkSecurityGroupEvent",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": false,
                    "days": 0
                  }
                },
                {
                  "category": "NetworkSecurityGroupRuleCounter",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": false,
                    "days": 0
                  }
                }
              ]
            }
          }
        ]
      },
      {
        "comments": "Network Security Group for Azure Bastion",
        "apiVersion": "2020-07-01",
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "HubVnetAzureBastionSubnetNsg",
        "location": "[resourceGroup().location]",
        "properties": {
          "securityRules": [
            {
              "name": "AllowHttpsInBound",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "Internet",
                "destinationPortRange": "443",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 100,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowGatewayManagerInBound",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "GatewayManager",
                "destinationPortRange": "443",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 110,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowLoadBalancerInBound",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "AzureLoadBalancer",
                "destinationPortRange": "443",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 120,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowBastionHostCommunicationInBound",
              "properties": {
                "protocol": "*",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationPortRanges": [
                  "8080",
                  "5701"
                ],
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 130,
                "direction": "Inbound"
              }
            },
            {
              "name": "DenyAllInBound",
              "properties": {
                "protocol": "*",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationPortRange": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 1000,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowSshRdpOutBound",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationPortRanges": [
                  "22",
                  "3389"
                ],
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 100,
                "direction": "Outbound"
              }
            },
            {
              "name": "AllowAzureCloudCommunicationOutBound",
              "properties": {
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationPortRange": "443",
                "destinationAddressPrefix": "AzureCloud",
                "access": "Allow",
                "priority": 110,
                "direction": "Outbound"
              }
            },
            {
              "name": "AllowBastionHostCommunicationOutBound",
              "properties": {
                "protocol": "*",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationPortRanges": [
                  "8080",
                  "5701"
                ],
                "destinationAddressPrefix": "VirtualNetwork",
                "access": "Allow",
                "priority": 120,
                "direction": "Outbound"
              }
            },
            {
              "name": "AllowGetSessionInformationOutBound",
              "properties": {
                "protocol": "*",
                "sourcePortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "Internet",
                "destinationPortRanges": [
                  "80",
                  "443"
                ],
                "access": "Allow",
                "priority": 130,
                "direction": "Outbound"
              }
            },
            {
              "name": "DenyAllOutBound",
              "properties": {
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 1000,
                "direction": "Outbound"
              }
            }
          ]
        },
        "resources": [
          {
            "type": "providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "Microsoft.Insights/default",
            "location": "[resourceGroup().location]",
            "dependsOn": [
              "Microsoft.Network/networkSecurityGroups/HubVnetAzureBastionSubnetNsg",
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "properties": {
              "workspaceId": "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]",
              "logs": [
                {
                  "category": "NetworkSecurityGroupEvent",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": false,
                    "days": 0
                  }
                },
                {
                  "category": "NetworkSecurityGroupRuleCounter",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": false,
                    "days": 0
                  }
                }
              ]
            }
          }
        ]
      },
      {
        "comments": "Azure Bastion Public IP Address",
        "apiVersion": "2020-05-01",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('bastionPublicIpAddressName')]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "publicIPAllocationMethod": "Static"
        }
      },
      {
        "comments": "Azure Bastion Host",
        "apiVersion": "2020-05-01",
        "type": "Microsoft.Network/bastionHosts",
        "name": "[concat('bastion', uniqueString(resourceGroup().id))]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/publicIPAddresses/[concat('bastion', uniqueString(resourceGroup().id))]PublicIp",
          "Microsoft.Network/virtualNetworks/HubVnet"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "IpConfiguration",
              "properties": {
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/HubVnet/AzureBastionSubnet"
                },
                "publicIPAddress": {
                  "id": "Microsoft.Network/publicIPAddresses/[concat('bastion', uniqueString(resourceGroup().id))]PublicIp"
                }
              }
            }
          ]
        }
      },
      {
        "comments": "Hub Virtual Network",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "HubVnet",
        "apiVersion": "2020-04-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/networkSecurityGroups/HubVnetCommonSubnetNsg",
          "Microsoft.Network/networkSecurityGroups/HubVnetAzureBastionSubnetNsg"
        ],
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "192.168.0.0/16"
            ]
          },
          "subnets": [
            {
              "name": "CommonSubnet",
              "properties": {
                "addressPrefix": "192.168.1.0/24",
                "networkSecurityGroup": {
                  "id": "Microsoft.Network/networkSecurityGroups/HubVnetCommonSubnetNsg"
                },
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              }
            },
            {
              "name": "AzureBastionSubnet",
              "properties": {
                "addressPrefix": "192.168.4.0/24",
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled",
                "networkSecurityGroup": {
                  "id": "Microsoft.Network/networkSecurityGroups/HubVnetAzureBastionSubnetNsg"
                }
              }
            },
            {
              "name": "GatewaySubnet",
              "properties": {
                "addressPrefix": "192.168.15.224/27"
              }
            },
            {
              "name": "AzureFirewallSubnet",
              "properties": {
                "addressPrefix": "192.168.0.0/26"
              }
            }
          ],
          "enableDdosProtection": false,
          "enableVmProtection": false
        }
      },
      {
        "comments": "Development Virtual Network",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "DevelopmentVNet",
        "apiVersion": "2020-04-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/azureFirewalls/HubFirewall",
          "Microsoft.Network/networkSecurityGroups/DevelopmentVNetDefaultSubnetNsg",
          "Microsoft.Network/routeTables/DevelopmentVNetDefaultSubnetRouteTable"
        ],
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "10.0.0.0/16"
            ]
          },
          "dhcpOptions": {
            "dnsServers": [
              "[reference(variables('firewallId')).ipConfigurations[0].properties.privateIPAddress]"
            ]
          },
          "subnets": [
            {
              "name": "DefaultSubnet",
              "properties": {
                "addressPrefix": "10.0.0.0/24",
                "routeTable": {
                  "id": "Microsoft.Network/routeTables/DevelopmentVNetDefaultSubnetRouteTable"
                },
                "networkSecurityGroup": {
                  "id": "Microsoft.Network/networkSecurityGroups/DevelopmentVNetDefaultSubnetNsg"
                }
              }
            }
          ],
          "enableDdosProtection": false,
          "enableVmProtection": false
        }
      },
      {
        "comments": "Production Virtual Network",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "ProductionVNet",
        "apiVersion": "2020-04-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/azureFirewalls/HubFirewall",
          "Microsoft.Network/networkSecurityGroups/ProductionVNetDefaultSubnetNsg",
          "Microsoft.Network/routeTables/ProductionVNetDefaultSubnetRouteTable"
        ],
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "10.1.0.0/16"
            ]
          },
          "dhcpOptions": {
            "dnsServers": [
              "[reference(variables('firewallId')).ipConfigurations[0].properties.privateIPAddress]"
            ]
          },
          "subnets": [
            {
              "name": "DefaultSubnet",
              "properties": {
                "addressPrefix": "10.1.0.0/24",
                "routeTable": {
                  "id": "Microsoft.Network/routeTables/ProductionVNetDefaultSubnetRouteTable"
                },
                "networkSecurityGroup": {
                  "id": "Microsoft.Network/networkSecurityGroups/ProductionVNetDefaultSubnetNsg"
                }
              }
            }
          ],
          "enableDdosProtection": false,
          "enableVmProtection": false
        }
      },
      {
        "comments": "Virtual network peering from the Hub Virtual Network to the Development Virtual Network",
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
        "name": "HubVnet/HubVnetToDevelopmentVNetPeering",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/HubVnet",
          "Microsoft.Network/virtualNetworks/DevelopmentVNet",
          "Microsoft.Network/virtualNetworkGateways/HubVpnGateway"
        ],
        "properties": {
          "allowVirtualNetworkAccess": true,
          "allowForwardedTraffic": true,
          "allowGatewayTransit": false,
          "useRemoteGateways": false,
          "remoteVirtualNetwork": {
            "id": "Microsoft.Network/virtualNetworks/DevelopmentVNet"
          }
        }
      },
      {
        "comments": "Virtual network peering from the Hub Virtual Network to the Production Virtual Network",
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
        "name": "HubVnet/HubVnetToProductionVNetPeering",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/HubVnet",
          "Microsoft.Network/virtualNetworks/ProductionVNet",
          "Microsoft.Network/virtualNetworkGateways/HubVpnGateway"
        ],
        "properties": {
          "allowVirtualNetworkAccess": true,
          "allowForwardedTraffic": true,
          "allowGatewayTransit": false,
          "useRemoteGateways": false,
          "remoteVirtualNetwork": {
            "id": "Microsoft.Network/virtualNetworks/ProductionVNet"
          }
        }
      },
      {
        "comments": "Virtual network peering from the Development Virtual Network to the Hub Virtual Network",
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
        "name": "DevelopmentVNet/DevelopmentVNetToHubVnetPeering",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/HubVnet",
          "Microsoft.Network/virtualNetworks/DevelopmentVNet",
          "Microsoft.Network/virtualNetworkGateways/HubVpnGateway"
        ],
        "properties": {
          "allowVirtualNetworkAccess": true,
          "allowForwardedTraffic": true,
          "allowGatewayTransit": false,
          "useRemoteGateways": false,
          "remoteVirtualNetwork": {
            "id": "Microsoft.Network/virtualNetworks/HubVnet"
          }
        }
      },
      {
        "comments": "Virtual Network Peering from the Production Virtual Network to the Hub Virtual Network",
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
        "name": "ProductionVNet/ProductionVNetToHubVnetPeering",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/HubVnet",
          "Microsoft.Network/virtualNetworks/ProductionVNet",
          "Microsoft.Network/virtualNetworkGateways/HubVpnGateway"
        ],
        "properties": {
          "allowVirtualNetworkAccess": true,
          "allowForwardedTraffic": true,
          "allowGatewayTransit": false,
          "useRemoteGateways": false,
          "remoteVirtualNetwork": {
            "id": "Microsoft.Network/virtualNetworks/HubVnet"
          }
        }
      },
      {
        "comments": "Virtual Network Gateway Public IP Address",
        "condition": false,
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-04-01",
        "name": "HubVpnGatewayPublicIp",
        "location": "[resourceGroup().location]",
        "properties": {
          "publicIPAllocationMethod": "Dynamic"
        }
      },
      {
        "comments": "Virtual Network Gateway",
        "condition": false,
        "type": "Microsoft.Network/virtualNetworkGateways",
        "apiVersion": "2020-04-01",
        "name": "HubVpnGateway",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/publicIPAddresses/HubVpnGatewayPublicIp",
          "Microsoft.Network/virtualNetworks/HubVnet"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/HubVnet/GatewaySubnet"
                },
                "publicIPAddress": {
                  "id": "Microsoft.Network/publicIPAddresses/HubVpnGatewayPublicIp"
                }
              },
              "name": "vnetGatewayConfig"
            }
          ],
          "sku": {
            "name": "Standard",
            "tier": "Standard"
          },
          "gatewayType": "Vpn",
          "vpnType": "RouteBased",
          "enableBgp": false
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Compute/availabilitySets",
        "comments": "Thi is the availability set for creating a HA cluster, run the template multiple times to get multiple DNS servers",
        "name": "[concat('availabilityset', uniqueString(resourceGroup().id))]",
        "apiVersion": "2019-12-01",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Aligned"
        },
        "properties": {
          "platformFaultDomainCount": 2,
          "platformUpdateDomainCount": 2
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Network/networkInterfaces",
        "name": "DnsVmNic",
        "apiVersion": "2020-07-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/HubVnet"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "vmIpConfig",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/HubVnet/CommonSubnet"
                },
                "privateIPAddressVersion": "IPv4"
              }
            }
          ]
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Compute/virtualMachines",
        "name": "DnsVm",
        "apiVersion": "2020-06-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/availabilitySets/[concat('availabilityset', uniqueString(resourceGroup().id))]",
          "Microsoft.Network/privateEndpoints/BlobStorageAccountBlobPrivateEndpoint",
          "Microsoft.Network/networkInterfaces/DnsVmNic"
        ],
        "properties": {
          "availabilitySet": {
            "id": "Microsoft.Compute/availabilitySets/[concat('availabilityset', uniqueString(resourceGroup().id))]"
          },
          "hardwareProfile": {
            "vmSize": "Standard_D4s_v3"
          },
          "osProfile": {
            "computerName": "DnsVm",
            "adminUsername": "GEN-UNIQUE",
            "adminPassword": "GEN-PASSWORD",
            "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "Canonical",
              "offer": "UbuntuServer",
              "sku": "18.04-LTS",
              "version": "latest"
            },
            "osDisk": {
              "name": "DnsVm_OSDisk",
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "diskSizeGB": 100,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            },
            "copy": [
              {
                "name": "dataDisks",
                "count": 1,
                "input": {
                  "caching": "ReadWrite",
                  "diskSizeGB": 10,
                  "lun": "[copyIndex('dataDisks')]",
                  "name": "[concat(parameters('dnsVmName'),'-DataDisk',copyIndex('dataDisks'))]",
                  "createOption": "Empty",
                  "managedDisk": {
                    "storageAccountType": "Premium_LRS"
                  }
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/DnsVmNic"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(variables('blobStorageAccountId')).primaryEndpoints['blob']]"
            }
          }
        }
      },
      {
        "condition": false,
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "DnsVm/CustomScript",
        "apiVersion": "2020-06-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/DnsVm"
        ],
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": [
              "[uri(parameters('_artifactsLocation'), concat('scripts/', variables('dnsVmScriptFileName'), parameters('_artifactsLocationSasToken')))]"
            ],
            "commandToExecute": "./configure-custom-dns-forwarder.sh"
          }
        }
      },
      {
        "condition": false,
        "apiVersion": "2020-06-01",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "DnsVm/LogAnalytics",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/DnsVm",
          "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]",
          "Microsoft.Compute/virtualMachines/extensions/DnsVm/CustomScript"
        ],
        "properties": {
          "publisher": "Microsoft.EnterpriseCloud.Monitoring",
          "type": "OmsAgentForLinux",
          "typeHandlerVersion": "1.12",
          "settings": {
            "workspaceId": "[reference(variables('workspaceId'), '2020-03-01-preview').customerId]",
            "stopOnMultipleConnections": false
          },
          "protectedSettings": {
            "workspaceKey": "[listKeys(variables('workspaceId'),'2020-03-01-preview').primarySharedKey]"
          }
        }
      },
      {
        "condition": false,
        "apiVersion": "2020-06-01",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "DnsVm/DependencyAgent",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/DnsVm",
          "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]",
          "Microsoft.Compute/virtualMachines/extensions/DnsVm/CustomScript",
          "Microsoft.Compute/virtualMachines/extensions/DnsVm/LogAnalytics"
        ],
        "properties": {
          "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
          "type": "DependencyAgentLinux",
          "typeHandlerVersion": "9.10",
          "autoUpgradeMinorVersion": true
        }
      },
      {
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "DevVmNic",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/DevelopmentVNet"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/DevelopmentVNet/DefaultSubnet"
                }
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2020-04-01-preview",
        "type": "Microsoft.Authorization/roleAssignments",
        "name": "[guid(concat('devcontributor', resourceGroup().id, parameters('devVmName')))]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/DevVm"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
          "principalId": "[reference(variables('devVmId'), '2020-06-01', 'Full').identity.principalId]",
          "scope": "[resourceGroup().id]"
        }
      },
      {
        "apiVersion": "2020-04-01-preview",
        "type": "Microsoft.Authorization/roleAssignments",
        "name": "[guid(concat('devStorageBlobDataContributor', resourceGroup().id, parameters('devVmName')))]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/DevVm"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
          "principalId": "[reference(variables('devVmId'), '2020-06-01', 'Full').identity.principalId]",
          "scope": "[resourceGroup().id]"
        }
      },
      {
        "apiVersion": "2020-06-01",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "DevVm",
        "location": "[resourceGroup().location]",
        "identity": {
          "type": "SystemAssigned"
        },
        "dependsOn": [
          "Microsoft.Network/privateEndpoints/AdlsStorageAccountAdlsPrivateEndpoint",
          "Microsoft.Network/privateEndpoints/AdlsStorageAccountBlobPrivateEndpoint",
          "Microsoft.Network/privateEndpoints/BlobStorageAccountBlobPrivateEndpoint",
          "Microsoft.Network/networkInterfaces/DevVmNic"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_D4s_v3"
          },
          "osProfile": {
            "computerName": "DevVm",
            "adminUsername": "GEN-UNIQUE",
            "adminPassword": "GEN-PASSWORD",
            "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "Canonical",
              "offer": "UbuntuServer",
              "sku": "18.04-LTS",
              "version": "latest"
            },
            "osDisk": {
              "name": "DevVm_OSDisk",
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "diskSizeGB": 100,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            },
            "copy": [
              {
                "name": "dataDisks",
                "count": 1,
                "input": {
                  "caching": "ReadWrite",
                  "diskSizeGB": 10,
                  "lun": "[copyIndex('dataDisks')]",
                  "name": "[concat(parameters('devVmName'),'-DataDisk',copyIndex('dataDisks'))]",
                  "createOption": "Empty",
                  "managedDisk": {
                    "storageAccountType": "Premium_LRS"
                  }
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/DevVmNic"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(variables('blobStorageAccountId')).primaryEndpoints['blob']]"
            }
          }
        }
      },
      {
        "apiVersion": "2020-06-01",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "DevVm/CustomScript",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/DevVm",
          "Microsoft.Authorization/roleAssignments/[guid(concat('devcontributor', resourceGroup().id, parameters('devVmName')))]",
          "Microsoft.Authorization/roleAssignments/[guid(concat('devStorageBlobDataContributor', resourceGroup().id, parameters('devVmName')))]",
          "Microsoft.Network/firewallPolicies/ruleCollectionGroups/[concat(parameters('firewallName'), 'Policy')]/DefaultNetworkRuleCollectionGroup"
        ],
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.1",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "skipDos2Unix": false,
            "timestamp": 123456789,
            "fileUris": [
              "[uri(parameters('_artifactsLocation'), concat('scripts/', variables('testVmScriptFileName'), parameters('_artifactsLocationSasToken')))]"
            ]
          },
          "protectedSettings": {
            "commandToExecute": "[concat('bash ',  variables('testVmScriptFileName'), ' ', parameters('privateDnsZoneName'), ' ', parameters('devVmName'), ' ', parameters('prodVmName'), ' ', variables('adlsServicePrimaryEndpoint'), ' ', variables('blobServicePrimaryEndpoint'))]"
          }
        }
      },
      {
        "apiVersion": "2020-06-01",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "DevVm/LogAnalytics",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/DevVm",
          "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]",
          "Microsoft.Compute/virtualMachines/extensions/DevVm/CustomScript"
        ],
        "properties": {
          "publisher": "Microsoft.EnterpriseCloud.Monitoring",
          "type": "OmsAgentForLinux",
          "typeHandlerVersion": "1.12",
          "settings": {
            "workspaceId": "[reference(variables('workspaceId'), '2020-03-01-preview').customerId]",
            "stopOnMultipleConnections": false
          },
          "protectedSettings": {
            "workspaceKey": "[listKeys(variables('workspaceId'),'2020-03-01-preview').primarySharedKey]"
          }
        }
      },
      {
        "apiVersion": "2020-06-01",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "DevVm/DependencyAgent",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/DevVm",
          "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]",
          "Microsoft.Compute/virtualMachines/extensions/DevVm/CustomScript",
          "Microsoft.Compute/virtualMachines/extensions/DevVm/LogAnalytics"
        ],
        "properties": {
          "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
          "type": "DependencyAgentLinux",
          "typeHandlerVersion": "9.10",
          "autoUpgradeMinorVersion": true
        }
      },
      {
        "apiVersion": "2020-04-01",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "ProdVmNic",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/ProductionVNet"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "Microsoft.Network/virtualNetworks/subnets/ProductionVNet/DefaultSubnet"
                }
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2020-04-01-preview",
        "type": "Microsoft.Authorization/roleAssignments",
        "name": "[guid(concat('prodcontributor', resourceGroup().id, parameters('prodVmName')))]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/ProdVm"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
          "principalId": "[reference(variables('prodVmId'), '2020-06-01', 'Full').identity.principalId]",
          "scope": "[resourceGroup().id]"
        }
      },
      {
        "apiVersion": "2020-04-01-preview",
        "type": "Microsoft.Authorization/roleAssignments",
        "name": "[guid(concat('prodStorageBlobDataContributor', resourceGroup().id, parameters('prodVmName')))]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/ProdVm"
        ],
        "properties": {
          "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
          "principalId": "[reference(variables('prodVmId'), '2020-06-01', 'Full').identity.principalId]",
          "scope": "[resourceGroup().id]"
        }
      },
      {
        "apiVersion": "2020-06-01",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "ProdVm",
        "location": "[resourceGroup().location]",
        "identity": {
          "type": "SystemAssigned"
        },
        "dependsOn": [
          "Microsoft.Network/privateEndpoints/AdlsStorageAccountAdlsPrivateEndpoint",
          "Microsoft.Network/privateEndpoints/AdlsStorageAccountBlobPrivateEndpoint",
          "Microsoft.Network/privateEndpoints/BlobStorageAccountBlobPrivateEndpoint",
          "Microsoft.Network/networkInterfaces/ProdVmNic"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "Standard_D4s_v3"
          },
          "osProfile": {
            "computerName": "ProdVm",
            "adminUsername": "GEN-UNIQUE",
            "adminPassword": "GEN-PASSWORD",
            "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "Canonical",
              "offer": "UbuntuServer",
              "sku": "18.04-LTS",
              "version": "latest"
            },
            "osDisk": {
              "name": "ProdVm_OSDisk",
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "diskSizeGB": 100,
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            },
            "copy": [
              {
                "name": "dataDisks",
                "count": 1,
                "input": {
                  "caching": "ReadWrite",
                  "diskSizeGB": 10,
                  "lun": "[copyIndex('dataDisks')]",
                  "name": "[concat(parameters('prodVmName'),'-DataDisk',copyIndex('dataDisks'))]",
                  "createOption": "Empty",
                  "managedDisk": {
                    "storageAccountType": "Premium_LRS"
                  }
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/ProdVmNic"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(variables('blobStorageAccountId')).primaryEndpoints['blob']]"
            }
          }
        }
      },
      {
        "apiVersion": "2020-06-01",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "ProdVm/CustomScript",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/ProdVm",
          "Microsoft.Authorization/roleAssignments/[guid(concat('prodcontributor', resourceGroup().id, parameters('prodVmName')))]",
          "Microsoft.Authorization/roleAssignments/[guid(concat('prodStorageBlobDataContributor', resourceGroup().id, parameters('prodVmName')))]",
          "Microsoft.Network/firewallPolicies/ruleCollectionGroups/[concat(parameters('firewallName'), 'Policy')]/DefaultNetworkRuleCollectionGroup"
        ],
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.1",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "skipDos2Unix": false,
            "timestamp": 123456789,
            "fileUris": [
              "[uri(parameters('_artifactsLocation'), concat('scripts/', variables('testVmScriptFileName'), parameters('_artifactsLocationSasToken')))]"
            ]
          },
          "protectedSettings": {
            "commandToExecute": "[concat('bash ',  variables('testVmScriptFileName'), ' ', parameters('privateDnsZoneName'), ' ', parameters('devVmName'), ' ', parameters('prodVmName'), ' ', variables('adlsServicePrimaryEndpoint'), ' ', variables('blobServicePrimaryEndpoint'))]"
          }
        }
      },
      {
        "apiVersion": "2020-06-01",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "ProdVm/LogAnalytics",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/ProdVm",
          "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]",
          "Microsoft.Compute/virtualMachines/extensions/ProdVm/CustomScript"
        ],
        "properties": {
          "publisher": "Microsoft.EnterpriseCloud.Monitoring",
          "type": "OmsAgentForLinux",
          "typeHandlerVersion": "1.12",
          "settings": {
            "workspaceId": "[reference(variables('workspaceId'), '2020-03-01-preview').customerId]",
            "stopOnMultipleConnections": false
          },
          "protectedSettings": {
            "workspaceKey": "[listKeys(variables('workspaceId'),'2020-03-01-preview').primarySharedKey]"
          }
        }
      },
      {
        "apiVersion": "2020-06-01",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "ProdVm/DependencyAgent",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Compute/virtualMachines/ProdVm",
          "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]",
          "Microsoft.Compute/virtualMachines/extensions/ProdVm/CustomScript",
          "Microsoft.Compute/virtualMachines/extensions/ProdVm/LogAnalytics"
        ],
        "properties": {
          "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
          "type": "DependencyAgentLinux",
          "typeHandlerVersion": "9.10",
          "autoUpgradeMinorVersion": true
        }
      },
      {
        "comments": "Azure Firewall Public IP Addresses",
        "name": "[if(equals(parameters('numberOfFirewallPublicIPAddresses'), 1), variables('firewallPublicIPNamePrefix'), concat(variables('firewallPublicIPNamePrefix'), add(copyIndex(), 1)))]",
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-04-01",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard"
        },
        "copy": {
          "name": "publicIpCopy",
          "count": 1
        },
        "properties": {
          "publicIPAllocationMethod": "Static",
          "publicIPAddressVersion": "IPv4"
        }
      },
      {
        "comments": "Azure Firewall Policy",
        "apiVersion": "2020-07-01",
        "type": "Microsoft.Network/firewallPolicies",
        "name": "[concat(parameters('firewallName'), 'Policy')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/networkInterfaces/DnsVmNic"
        ],
        "properties": {
          "dnsSettings": {
            "enableProxy": true,
            "servers": "[if(parameters('deployCustomDnsForwarder'), createArray(reference(variables('dnsVmNicId')).ipConfigurations[0].properties.privateIPAddress), createArray())]"
          },
          "threatIntelMode": "Alert"
        }
      },
      {
        "comments": "Azure Firewall",
        "apiVersion": "2020-07-01",
        "type": "Microsoft.Network/azureFirewalls",
        "name": "HubFirewall",
        "location": "[resourceGroup().location]",
        "zones": "[if(equals(length(parameters('firewallAvailabilityZones')), 0), json('null'), parameters('firewallAvailabilityZones'))]",
        "dependsOn": [
          "Microsoft.Network/firewallPolicies/[concat(parameters('firewallName'), 'Policy')]",
          "Microsoft.Network/virtualNetworks/HubVnet",
          "publicIpCopy"
        ],
        "properties": {
          "copy": [
            {
              "name": "ipConfigurations",
              "count": 1,
              "input": {
                "name": "[if(equals(parameters('numberOfFirewallPublicIPAddresses'), 1), 'IpConfiguration', concat('IpConfiguration', copyIndex('ipConfigurations')))]",
                "properties": {
                  "subnet": "[if(equals(copyIndex('ipConfigurations'), 0), variables('azureFirewallSubnetJSON'), json('null'))]",
                  "publicIPAddress": {
                    "id": "[if(equals(parameters('numberOfFirewallPublicIPAddresses'), 1), variables('azureFirewallPublicIpId'), concat(variables('azureFirewallPublicIpId'), add(copyIndex('ipConfigurations'), 1)))]"
                  }
                }
              }
            }
          ],
          "firewallPolicy": {
            "id": "Microsoft.Network/firewallPolicies/[concat(parameters('firewallName'), 'Policy')]"
          }
        }
      },
      {
        "comments": "Azure Firewall Policy Network Rule Collection",
        "name": "HubFirewallPolicy",
        "type": "Microsoft.Network/firewallPolicies/ruleCollectionGroups",
        "apiVersion": "2020-07-01",
        "dependsOn": [
          "Microsoft.Network/firewallPolicies/[concat(parameters('firewallName'), 'Policy')]",
          "Microsoft.Network/azureFirewalls/HubFirewall",
          "Microsoft.Network/virtualNetworks/HubVnet",
          "Microsoft.Network/virtualNetworks/DevelopmentVNet",
          "Microsoft.Network/virtualNetworks/ProductionVNet"
        ],
        "properties": {
          "priority": "200",
          "ruleCollections": [
            {
              "name": "VnetToVnetNetworkRules",
              "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
              "priority": "100",
              "action": {
                "type": "Allow"
              },
              "rules": [
                {
                  "name": "Allow-DevelopmentVNet-DefaultSubnet-To-ProductionVNet-DefaultSubnet-Traffic",
                  "ruleType": "NetworkRule",
                  "ipProtocols": [
                    "Any"
                  ],
                  "sourceAddresses": [
                    "10.1.0.0/16"
                  ],
                  "destinationAddresses": [
                    "10.0.0.0/16"
                  ],
                  "destinationPorts": [
                    "*"
                  ]
                },
                {
                  "name": "Allow-ProductionVNet-DefaultSubnet-To-DevelopmentVNet-DefaultSubnet-Traffic",
                  "ruleType": "NetworkRule",
                  "ipProtocols": [
                    "Any"
                  ],
                  "sourceAddresses": [
                    "10.0.0.0/16"
                  ],
                  "destinationAddresses": [
                    "10.1.0.0/16"
                  ],
                  "destinationPorts": [
                    "*"
                  ]
                }
              ]
            },
            {
              "name": "VnetToInternet",
              "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
              "priority": "200",
              "action": {
                "type": "Allow"
              },
              "rules": [
                {
                  "name": "Allow-HubVnet-CommonSubnet-Internet-Traffic",
                  "ruleType": "NetworkRule",
                  "ipProtocols": [
                    "TCP"
                  ],
                  "sourceAddresses": [
                    "192.168.1.0/24"
                  ],
                  "destinationAddresses": [
                    "*"
                  ],
                  "destinationPorts": [
                    "80",
                    "443"
                  ]
                },
                {
                  "name": "Allow-ProductionVNet-DefaultSubnet-Internet-Traffic",
                  "ruleType": "NetworkRule",
                  "ipProtocols": [
                    "TCP"
                  ],
                  "sourceAddresses": [
                    "10.1.0.0/24"
                  ],
                  "destinationAddresses": [
                    "*"
                  ],
                  "destinationPorts": [
                    "80",
                    "443"
                  ]
                },
                {
                  "name": "Allow-DevelopmentVNet-DefaultSubnet-Internet-Traffic",
                  "ruleType": "NetworkRule",
                  "ipProtocols": [
                    "TCP"
                  ],
                  "sourceAddresses": [
                    "10.0.0.0/24"
                  ],
                  "destinationAddresses": [
                    "*"
                  ],
                  "destinationPorts": [
                    "80",
                    "443"
                  ]
                }
              ]
            }
          ]
        }
      },
      {
        "condition": true,
        "comments": "Azure Firewall Policy NAT Rule Collection",
        "name": "HubFirewallPolicy",
        "type": "Microsoft.Network/firewallPolicies/ruleCollectionGroups",
        "apiVersion": "2020-07-01",
        "dependsOn": [
          "Microsoft.Network/firewallPolicies/[concat(parameters('firewallName'), 'Policy')]",
          "Microsoft.Network/azureFirewalls/HubFirewall",
          "Microsoft.Network/firewallPolicies/ruleCollectionGroups/[concat(parameters('firewallName'), 'Policy')]/DefaultNetworkRuleCollectionGroup",
          "Microsoft.Network/networkInterfaces/DevVmNic",
          "Microsoft.Network/networkInterfaces/ProdVmNic"
        ],
        "properties": {
          "priority": "100",
          "ruleCollections": [
            {
              "name": "VirtualMachineNatRules",
              "ruleCollectionType": "FirewallPolicyNatRuleCollection",
              "priority": "300",
              "action": {
                "type": "Dnat"
              },
              "rules": [
                {
                  "name": "DevVm-Rdp-Nat-Rule",
                  "ruleType": "NatRule",
                  "sourceAddresses": [
                    "*"
                  ],
                  "destinationAddresses": [
                    "[reference(resourceId('Microsoft.Network/publicIPAddresses', if(equals(parameters('numberOfFirewallPublicIPAddresses'), 1), variables('firewallPublicIPNamePrefix'), concat(variables('firewallPublicIPNamePrefix'), add(copyIndex(), 1))))).ipAddress]"
                  ],
                  "destinationPorts": [
                    "4001"
                  ],
                  "ipProtocols": [
                    "TCP"
                  ],
                  "translatedAddress": "[reference(variables('devVmNicId')).ipConfigurations[0].properties.privateIPAddress]",
                  "translatedPort": "22"
                },
                {
                  "name": "ProdVm-Rdp-Nat-Rule",
                  "ruleType": "NatRule",
                  "sourceAddresses": [
                    "*"
                  ],
                  "destinationAddresses": [
                    "[reference(resourceId('Microsoft.Network/publicIPAddresses', if(equals(parameters('numberOfFirewallPublicIPAddresses'), 1), variables('firewallPublicIPNamePrefix'), concat(variables('firewallPublicIPNamePrefix'), add(copyIndex(), 1))))).ipAddress]"
                  ],
                  "destinationPorts": [
                    "4002"
                  ],
                  "ipProtocols": [
                    "TCP"
                  ],
                  "translatedAddress": "[reference(variables('prodVmNicId')).ipConfigurations[0].properties.privateIPAddress]",
                  "translatedPort": "22"
                }
              ]
            }
          ]
        }
      },
      {
        "comments": "Route Table for the Subnet(s) of the Development Virtual Network",
        "type": "Microsoft.Network/routeTables",
        "name": "DevelopmentVNetDefaultSubnetRouteTable",
        "apiVersion": "2020-06-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/azureFirewalls/HubFirewall"
        ],
        "properties": {
          "disableBgpRoutePropagation": "[not(parameters('enableBgp'))]",
          "routes": [
            {
              "name": "RouteTrafficToHubFirewall",
              "properties": {
                "addressPrefix": "0.0.0.0/0",
                "nextHopType": "VirtualAppliance",
                "nextHopIpAddress": "[reference(variables('firewallId')).ipConfigurations[0].properties.privateIPAddress]"
              }
            }
          ]
        }
      },
      {
        "comments": "Route Table for the Subnet(s) of the Production Virtual Network",
        "type": "Microsoft.Network/routeTables",
        "name": "ProductionVNetDefaultSubnetRouteTable",
        "apiVersion": "2020-06-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/azureFirewalls/HubFirewall"
        ],
        "properties": {
          "disableBgpRoutePropagation": "[not(parameters('enableBgp'))]",
          "routes": [
            {
              "name": "RouteTrafficToHubFirewall",
              "properties": {
                "addressPrefix": "0.0.0.0/0",
                "nextHopType": "VirtualAppliance",
                "nextHopIpAddress": "[reference(variables('firewallId')).ipConfigurations[0].properties.privateIPAddress]"
              }
            }
          ]
        }
      },
      {
        "comments": "Private DNS Zone used to the Virtual Machines in the Hub, Production, and Development Virtual Networks",
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "2020-06-01",
        "name": "contoso.corp",
        "location": "global",
        "properties": {
          "maxNumberOfRecordSets": 25000,
          "maxNumberOfVirtualNetworkLinks": 1000,
          "maxNumberOfVirtualNetworkLinksWithRegistration": 100
        },
        "resources": [
          {
            "comments": "Virtual Network Link between the Private DNS Zone the Production Virtual Network",
            "type": "virtualNetworkLinks",
            "apiVersion": "2020-06-01",
            "name": "LinkToProductionVNet",
            "location": "global",
            "dependsOn": [
              "Microsoft.Network/privateDnsZones/contoso.corp",
              "Microsoft.Network/virtualNetworks/ProductionVNet"
            ],
            "properties": {
              "registrationEnabled": true,
              "virtualNetwork": {
                "id": "Microsoft.Network/virtualNetworks/ProductionVNet"
              }
            }
          },
          {
            "comments": "Virtual Network Link between the Private DNS Zone the Hub Virtual Network",
            "type": "virtualNetworkLinks",
            "apiVersion": "2020-06-01",
            "name": "LinkToHubVnet",
            "location": "global",
            "dependsOn": [
              "Microsoft.Network/privateDnsZones/contoso.corp",
              "Microsoft.Network/virtualNetworks/HubVnet"
            ],
            "properties": {
              "registrationEnabled": true,
              "virtualNetwork": {
                "id": "Microsoft.Network/virtualNetworks/HubVnet"
              }
            }
          },
          {
            "comments": "Virtual Network Link between the Private DNS Zone the Development Virtual Network",
            "type": "virtualNetworkLinks",
            "apiVersion": "2020-06-01",
            "name": "LinkToDevelopmentVNet",
            "location": "global",
            "dependsOn": [
              "Microsoft.Network/privateDnsZones/contoso.corp",
              "Microsoft.Network/virtualNetworks/DevelopmentVNet"
            ],
            "properties": {
              "registrationEnabled": true,
              "virtualNetwork": {
                "id": "Microsoft.Network/virtualNetworks/DevelopmentVNet"
              }
            }
          }
        ]
      },
      {
        "comments": "Log Analytics Workspace",
        "apiVersion": "2020-08-01",
        "type": "Microsoft.OperationalInsights/workspaces",
        "name": "[concat('loganalytics', uniqueString(resourceGroup().id))]",
        "location": "[resourceGroup().location]",
        "properties": {
          "sku": {
            "name": "PerGB2018"
          }
        },
        "resources": [
          {
            "apiVersion": "2015-11-01-preview",
            "location": "[resourceGroup().location]",
            "name": "AgentHealthAssessment(, parameters(workspaceName),)",
            "type": "Microsoft.OperationsManagement/solutions",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "properties": {
              "workspaceResourceId": "Microsoft.OperationalInsights/workspaces//[concat('loganalytics', uniqueString(resourceGroup().id))]"
            },
            "plan": {
              "name": "AgentHealthAssessment(, parameters(workspaceName),)",
              "publisher": "Microsoft",
              "product": "OMSGallery/AgentHealthAssessment",
              "promotionCode": ""
            }
          },
          {
            "apiVersion": "2015-11-01-preview",
            "location": "[resourceGroup().location]",
            "name": "InfrastructureInsights(, parameters(workspaceName),)",
            "type": "Microsoft.OperationsManagement/solutions",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "properties": {
              "workspaceResourceId": "Microsoft.OperationalInsights/workspaces//[concat('loganalytics', uniqueString(resourceGroup().id))]"
            },
            "plan": {
              "name": "InfrastructureInsights(, parameters(workspaceName),)",
              "publisher": "Microsoft",
              "product": "OMSGallery/InfrastructureInsights",
              "promotionCode": ""
            }
          },
          {
            "apiVersion": "2020-08-01",
            "type": "dataSources",
            "name": "Kern",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "kind": "LinuxSyslog",
            "properties": {
              "syslogName": "kern",
              "syslogSeverities": [
                {
                  "severity": "emerg"
                },
                {
                  "severity": "alert"
                },
                {
                  "severity": "crit"
                },
                {
                  "severity": "err"
                },
                {
                  "severity": "warning"
                }
              ]
            }
          },
          {
            "apiVersion": "2020-08-01",
            "type": "dataSources",
            "name": "Syslog",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "kind": "LinuxSyslog",
            "properties": {
              "syslogName": "syslog",
              "syslogSeverities": [
                {
                  "severity": "emerg"
                },
                {
                  "severity": "alert"
                },
                {
                  "severity": "crit"
                },
                {
                  "severity": "err"
                },
                {
                  "severity": "warning"
                }
              ]
            }
          },
          {
            "apiVersion": "2020-08-01",
            "type": "dataSources",
            "name": "User",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "kind": "LinuxSyslog",
            "properties": {
              "syslogName": "user",
              "syslogSeverities": [
                {
                  "severity": "emerg"
                },
                {
                  "severity": "alert"
                },
                {
                  "severity": "crit"
                },
                {
                  "severity": "err"
                },
                {
                  "severity": "warning"
                }
              ]
            }
          },
          {
            "apiVersion": "2020-08-01",
            "type": "dataSources",
            "name": "SampleSyslogCollection1",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "kind": "LinuxSyslogCollection",
            "properties": {
              "state": "Enabled"
            }
          },
          {
            "apiVersion": "2020-08-01",
            "type": "dataSources",
            "name": "DiskPerfCounters",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "kind": "LinuxPerformanceObject",
            "properties": {
              "performanceCounters": [
                {
                  "counterName": "% Used Inodes"
                },
                {
                  "counterName": "Free Megabytes"
                },
                {
                  "counterName": "% Used Space"
                },
                {
                  "counterName": "Disk Transfers/sec"
                },
                {
                  "counterName": "Disk Reads/sec"
                },
                {
                  "counterName": "Disk Writes/sec"
                },
                {
                  "counterName": "Disk Read Bytes/sec"
                },
                {
                  "counterName": "Disk Write Bytes/sec"
                }
              ],
              "objectName": "Logical Disk",
              "instanceName": "*",
              "intervalSeconds": 10
            }
          },
          {
            "apiVersion": "2020-08-01",
            "type": "dataSources",
            "name": "ProcessorPerfCounters",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "kind": "LinuxPerformanceObject",
            "properties": {
              "performanceCounters": [
                {
                  "counterName": "% Processor Time"
                },
                {
                  "counterName": "% User Time"
                },
                {
                  "counterName": "% Privileged Time"
                },
                {
                  "counterName": "% IO Wait Time"
                },
                {
                  "counterName": "% Idle Time"
                },
                {
                  "counterName": "% Interrupt Time"
                }
              ],
              "objectName": "Processor",
              "instanceName": "*",
              "intervalSeconds": 10
            }
          },
          {
            "apiVersion": "2020-08-01",
            "type": "dataSources",
            "name": "ProcessPerfCounters",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "kind": "LinuxPerformanceObject",
            "properties": {
              "performanceCounters": [
                {
                  "counterName": "% User Time"
                },
                {
                  "counterName": "% Privileged Time"
                },
                {
                  "counterName": "Used Memory"
                },
                {
                  "counterName": "Virtual Shared Memory"
                }
              ],
              "objectName": "Process",
              "instanceName": "*",
              "intervalSeconds": 10
            }
          },
          {
            "apiVersion": "2020-08-01",
            "type": "dataSources",
            "name": "SystemPerfCounters",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "kind": "LinuxPerformanceObject",
            "properties": {
              "performanceCounters": [
                {
                  "counterName": "Processes"
                }
              ],
              "objectName": "System",
              "instanceName": "*",
              "intervalSeconds": 10
            }
          },
          {
            "apiVersion": "2020-08-01",
            "type": "dataSources",
            "name": "NetworkPerfCounters",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "kind": "LinuxPerformanceObject",
            "properties": {
              "performanceCounters": [
                {
                  "counterName": "Total Bytes Transmitted"
                },
                {
                  "counterName": "Total Bytes Received"
                },
                {
                  "counterName": "Total Bytes"
                },
                {
                  "counterName": "Total Packets Transmitted"
                },
                {
                  "counterName": "Total Packets Received"
                },
                {
                  "counterName": "Total Rx Errors"
                },
                {
                  "counterName": "Total Tx Errors"
                },
                {
                  "counterName": "Total Collisions"
                }
              ],
              "objectName": "Network",
              "instanceName": "*",
              "intervalSeconds": 10
            }
          },
          {
            "apiVersion": "2020-08-01",
            "type": "dataSources",
            "name": "MemorydataSources",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "kind": "LinuxPerformanceObject",
            "properties": {
              "performanceCounters": [
                {
                  "counterName": "Available MBytes Memory"
                },
                {
                  "counterName": "% Available Memory"
                },
                {
                  "counterName": "Used Memory MBytes"
                },
                {
                  "counterName": "% Used Memory"
                }
              ],
              "objectName": "Memory",
              "instanceName": "*",
              "intervalSeconds": 10
            }
          },
          {
            "apiVersion": "2020-08-01",
            "type": "dataSources",
            "name": "SampleLinuxPerfCollection1",
            "dependsOn": [
              "Microsoft.OperationalInsights/workspaces/[concat('loganalytics', uniqueString(resourceGroup().id))]"
            ],
            "kind": "LinuxPerformanceCollection",
            "properties": {
              "state": "Enabled"
            }
          }
        ]
      },
      {
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "2020-06-01",
        "name": "[variables('adlsPrivateDnsZoneName')]",
        "location": "global",
        "properties": {
          "maxNumberOfRecordSets": 25000,
          "maxNumberOfVirtualNetworkLinks": 1000,
          "maxNumberOfVirtualNetworkLinksWithRegistration": 100
        },
        "resources": [
          {
            "type": "virtualNetworkLinks",
            "apiVersion": "2020-06-01",
            "name": "[concat('link_to_', toLower(parameters('HubVnetName')))]",
            "location": "global",
            "dependsOn": [
              "[variables('adlsPrivateDnsZoneId')]",
              "[variables('hubVnetId')]"
            ],
            "properties": {
              "registrationEnabled": false,
              "virtualNetwork": {
                "id": "Microsoft.Network/virtualNetworks/HubVnet"
              }
            }
          }
        ]
      },
      {
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "2020-06-01",
        "name": "[variables('blobPrivateDnsZoneName')]",
        "location": "global",
        "properties": {
          "maxNumberOfRecordSets": 25000,
          "maxNumberOfVirtualNetworkLinks": 1000,
          "maxNumberOfVirtualNetworkLinksWithRegistration": 100
        },
        "resources": [
          {
            "type": "virtualNetworkLinks",
            "apiVersion": "2020-06-01",
            "name": "[concat('link_to_', toLower(parameters('HubVnetName')))]",
            "location": "global",
            "dependsOn": [
              "[variables('blobPrivateDnsZoneId')]",
              "[variables('hubVnetId')]"
            ],
            "properties": {
              "registrationEnabled": false,
              "virtualNetwork": {
                "id": "Microsoft.Network/virtualNetworks/HubVnet"
              }
            }
          }
        ]
      },
      {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2020-07-01",
        "name": "AdlsStorageAccountAdlsPrivateEndpoint",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/HubVnet",
          "Microsoft.Storage/storageAccounts/[concat('adls', uniqueString(resourceGroup().id))]"
        ],
        "properties": {
          "privateLinkServiceConnections": [
            {
              "name": "AdlsStorageAccountAdlsPrivateEndpoint",
              "properties": {
                "privateLinkServiceId": "Microsoft.Storage/storageAccounts/[concat('adls', uniqueString(resourceGroup().id))]",
                "groupIds": [
                  "dfs"
                ]
              }
            }
          ],
          "subnet": {
            "id": "Microsoft.Network/virtualNetworks/subnets/HubVnet/CommonSubnet"
          }
        },
        "resources": [
          {
            "type": "privateDnsZoneGroups",
            "apiVersion": "2020-07-01",
            "name": "PrivateDnsZoneGroup",
            "location": "[resourceGroup().location]",
            "dependsOn": [
              "[variables('adlsPrivateDnsZoneId')]",
              "[variables('adlsStorageAccountAdlsPrivateEndpointId')]"
            ],
            "properties": {
              "privateDnsZoneConfigs": [
                {
                  "name": "dnsConfig",
                  "properties": {
                    "privateDnsZoneId": "[variables('adlsPrivateDnsZoneId')]"
                  }
                }
              ]
            }
          }
        ]
      },
      {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2020-07-01",
        "name": "AdlsStorageAccountBlobPrivateEndpoint",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/HubVnet",
          "Microsoft.Storage/storageAccounts/[concat('adls', uniqueString(resourceGroup().id))]"
        ],
        "properties": {
          "privateLinkServiceConnections": [
            {
              "name": "AdlsStorageAccountBlobPrivateEndpoint",
              "properties": {
                "privateLinkServiceId": "Microsoft.Storage/storageAccounts/[concat('adls', uniqueString(resourceGroup().id))]",
                "groupIds": [
                  "blob"
                ]
              }
            }
          ],
          "subnet": {
            "id": "Microsoft.Network/virtualNetworks/subnets/HubVnet/CommonSubnet"
          }
        },
        "resources": [
          {
            "type": "privateDnsZoneGroups",
            "apiVersion": "2020-07-01",
            "name": "PrivateDnsZoneGroup",
            "location": "[resourceGroup().location]",
            "dependsOn": [
              "BlobPrivateDnsZoneId",
              "Microsoft.Network/privateEndpoints/AdlsStorageAccountBlobPrivateEndpoint"
            ],
            "properties": {
              "privateDnsZoneConfigs": [
                {
                  "name": "dnsConfig",
                  "properties": {
                    "privateDnsZoneId": "BlobPrivateDnsZoneId"
                  }
                }
              ]
            }
          }
        ]
      },
      {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2020-07-01",
        "name": "BlobStorageAccountBlobPrivateEndpoint",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/HubVnet",
          "Microsoft.Storage/storageAccounts/[concat('blob', uniquestring(resourceGroup().id))]"
        ],
        "properties": {
          "privateLinkServiceConnections": [
            {
              "name": "BlobStorageAccountBlobPrivateEndpoint",
              "properties": {
                "privateLinkServiceId": "Microsoft.Storage/storageAccounts/[concat('blob', uniquestring(resourceGroup().id))]",
                "groupIds": [
                  "blob"
                ]
              }
            }
          ],
          "subnet": {
            "id": "Microsoft.Network/virtualNetworks/subnets/HubVnet/CommonSubnet"
          }
        },
        "resources": [
          {
            "type": "privateDnsZoneGroups",
            "apiVersion": "2020-07-01",
            "name": "PrivateDnsZoneGroup",
            "location": "[resourceGroup().location]",
            "dependsOn": [
              "[variables('blobPrivateDnsZoneId')]",
              "[variables('blobStorageAccountBlobPrivateEndpointId')]"
            ],
            "properties": {
              "privateDnsZoneConfigs": [
                {
                  "name": "dnsConfig",
                  "properties": {
                    "privateDnsZoneId": "[variables('blobPrivateDnsZoneId')]"
                  }
                }
              ]
            }
          }
        ]
      }
    ],
    "outputs": {},
    "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
  }
}