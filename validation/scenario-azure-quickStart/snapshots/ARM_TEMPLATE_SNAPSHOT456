{
  "structure": "filesystem",
  "error": null,
  "reference": "master",
  "contentType": "json",
  "source": "gitConnectorAzureQuickStart",
  "paths": [
    "/application-workloads/sap/sap-3-tier-marketplace-image-md/azuredeploy.json",
    "/application-workloads/sap/sap-3-tier-marketplace-image-md/azuredeploy.parameters.json"
  ],
  "timestamp": 1642962895223,
  "queryuser": null,
  "checksum": "99914b932bd37a50b983c5e7c90ae93b",
  "node": {
    "masterSnapshotId": "ARM_TEMPLATE_SNAPSHOT",
    "type": "arm",
    "collection": "armtemplate",
    "paths": [
      "/application-workloads/sap/sap-3-tier-marketplace-image-md/azuredeploy.json",
      "/application-workloads/sap/sap-3-tier-marketplace-image-md/azuredeploy.parameters.json"
    ],
    "snapshotId": "ARM_TEMPLATE_SNAPSHOT456",
    "status": "active",
    "validate": true,
    "resourceTypes": [
      "microsoft.network/publicipaddresses",
      "microsoft.network/virtualnetworks",
      "microsoft.network/loadbalancers",
      "microsoft.network/networkinterfaces",
      "microsoft.compute/virtualmachines/extensions",
      "microsoft.compute/virtualmachines",
      "microsoft.network/networksecuritygroups",
      "microsoft.compute/availabilitysets"
    ]
  },
  "snapshotId": "ARM_TEMPLATE_SNAPSHOT456",
  "collection": "armtemplate",
  "json": {
    "contentVersion": "1.0.0.0",
    "parameters": {
      "sapSystemId": {
        "type": "string",
        "maxLength": 3,
        "minLength": 3,
        "defaultValue": "DEQ",
        "metadata": {
          "description": "SAP System ID."
        }
      },
      "stackType": {
        "type": "string",
        "allowedValues": [
          "ABAP",
          "JAVA",
          "ABAP+JAVA"
        ],
        "defaultValue": "ABAP",
        "metadata": {
          "description": "The stack type of the SAP system."
        }
      },
      "osType": {
        "type": "string",
        "allowedValues": [
          "Windows Server 2012 Datacenter",
          "Windows Server 2012 R2 Datacenter",
          "Windows Server 2016 Datacenter",
          "SLES 12",
          "RHEL 7",
          "Oracle Linux 7"
        ],
        "defaultValue": "Windows Server 2016 Datacenter",
        "metadata": {
          "description": "The type of the operating system you want to deploy."
        }
      },
      "dbtype": {
        "type": "string",
        "allowedValues": [
          "SQL",
          "HANA"
        ],
        "defaultValue": "SQL",
        "metadata": {
          "description": "The type of the database"
        }
      },
      "sapSystemSize": {
        "type": "string",
        "allowedValues": [
          "Demo",
          "Small < 30.000 SAPS",
          "Medium < 70.000 SAPS",
          "Large < 180.000 SAPS",
          "X-Large < 250.000 SAPS"
        ],
        "defaultValue": "Small < 30.000 SAPS",
        "metadata": {
          "description": "The size of the SAP System you want to deploy."
        }
      },
      "systemAvailability": {
        "type": "string",
        "allowedValues": [
          "HA",
          "Not HA"
        ],
        "defaultValue": "Not HA",
        "metadata": {
          "description": "Determines whether this is a high available deployment or not. A HA deployment contains multiple instances of single point of failures."
        }
      },
      "adminUsername": {
        "type": "string",
        "metadata": {
          "description": "Username for the Virtual Machine."
        },
        "value": "GEN-UNIQUE"
      },
      "authenticationType": {
        "type": "string",
        "defaultValue": "password",
        "allowedValues": [
          "password",
          "sshPublicKey"
        ],
        "metadata": {
          "description": "Type of authentication to use on the Virtual Machine."
        }
      },
      "adminPasswordOrKey": {
        "type": "securestring",
        "metadata": {
          "description": "Password or ssh key for the Virtual Machine."
        },
        "value": "GEN-PASSWORD"
      },
      "subnetId": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "The id of the subnet you want to use."
        }
      },
      "availabilityZones": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "Zone numbers. Enter the comma seperated zones you want use e.g. 1,3. In an HA case, the first two will be used for the cluster VMs."
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for all resources."
        }
      },
      "_artifactsLocation": {
        "type": "string",
        "metadata": {
          "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
        },
        "defaultValue": "[deployment().properties.templateLink.uri]"
      },
      "_artifactsLocationSasToken": {
        "type": "securestring",
        "metadata": {
          "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
        },
        "defaultValue": ""
      }
    },
    "variables": {
      "azArray": "[split(parameters('availabilityZones'), ',')]",
      "azArrayLength": 20,
      "images": {
        "Windows Server 2012 Datacenter": {
          "sku": "2012-Datacenter",
          "offer": "WindowsServer",
          "publisher": "MicrosoftWindowsServer",
          "OSType": "Windows"
        },
        "Windows Server 2012 R2 Datacenter": {
          "sku": "2012-R2-Datacenter",
          "offer": "WindowsServer",
          "publisher": "MicrosoftWindowsServer",
          "OSType": "Windows"
        },
        "Windows Server 2016 Datacenter": {
          "sku": "2016-Datacenter",
          "offer": "WindowsServer",
          "publisher": "MicrosoftWindowsServer",
          "OSType": "Windows"
        },
        "SLES 12": {
          "sku": "12-SP4",
          "offer": "SLES-SAP",
          "publisher": "SUSE",
          "OSType": "Linux"
        },
        "RHEL 7": {
          "sku": "7.5",
          "offer": "RHEL-SAP",
          "publisher": "RedHat",
          "OSType": "Linux"
        },
        "Oracle Linux 7": {
          "sku": "7.5",
          "offer": "Oracle-Linux",
          "publisher": "Oracle",
          "OSType": "Linux"
        }
      },
      "internalOSType": "(images)[parameters(osType)].OSType",
      "csExtension": {
        "Windows": {
          "Publisher": "Microsoft.Compute",
          "Name": "CustomScriptExtension",
          "Version": "1.7",
          "script": "[uri(parameters('_artifactsLocation'), concat('diskConfig.ps1', parameters('_artifactsLocationSasToken')))]",
          "scriptCall": "powershell.exe -ExecutionPolicy bypass -File diskConfig.ps1"
        },
        "Linux": {
          "Publisher": "Microsoft.Azure.Extensions",
          "Name": "CustomScript",
          "Version": "2.0",
          "script": "[uri(parameters('_artifactsLocation'), concat('diskConfig.sh', parameters('_artifactsLocationSasToken')))]",
          "scriptCall": "sh diskConfig.sh"
        }
      },
      "sizes": {
        "Demo": {
          "HANA": {
            "dbvmSize": "Standard_E8s_v3",
            "ascsVMSize": "Standard_D2s_v3",
            "diVMSize": "Standard_D2s_v3",
            "diVMCount": 1,
            "dbdisks": [
              {
                "lun": 0,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 128
              },
              {
                "lun": 1,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 128
              },
              {
                "lun": 2,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 128
              },
              {
                "lun": 3,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 128
              },
              {
                "lun": 4,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 128
              },
              {
                "lun": 5,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 128
              },
              {
                "lun": 6,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 128
              },
              {
                "lun": 7,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 128
              }
            ],
            "scriptArguments": {
              "Linux": "-luns '0,1#2,3#4#5#6,7' -names 'data#log#shared#usrsap#backup' -paths '/hana/data#/hana/log#/hana/shared#/usr/sap#/hana/backup'  -sizes '100#100#100#100#100'"
            },
            "useFastNetwork": false
          },
          "SQL": {
            "dbvmSize": "Standard_E4s_v3",
            "ascsVMSize": "Standard_D2s_v3",
            "diVMSize": "Standard_D2s_v3",
            "diVMCount": 1,
            "dbdisks": [
              {
                "lun": 0,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 128
              }
            ],
            "scriptArguments": {
              "Windows": "-luns \"0\" -names \"data\" -paths \"C:\\sql\\data,C:\\sql\\log\"  -sizes \"70,100\""
            },
            "useFastNetwork": false
          },
          "other": {
            "dbvmSize": "Standard_E4s_v3",
            "ascsVMSize": "Standard_D2s_v3",
            "diVMSize": "Standard_D2s_v3",
            "diVMCount": 1,
            "dbdisks": [
              {
                "lun": 0,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 128
              }
            ],
            "scriptArguments": {
              "Linux": "-luns '0' -names 'datalog' -paths '/db/data,/db/log'  -sizes '70,100'",
              "Windows": "-luns \"0\" -names \"data\" -paths \"C:\\db\\data,C:\\db\\log\"  -sizes \"70,100\""
            },
            "useFastNetwork": false
          }
        },
        "Small < 30.000 SAPS": {
          "HANA": {
            "dbvmSize": "Standard_E32s_v3",
            "ascsVMSize": "Standard_E2s_v3",
            "diVMSize": "Standard_E8s_v3",
            "diVMCount": 1,
            "dbdisks": [
              {
                "lun": 0,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 1,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 2,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 3,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 4,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 64
              },
              {
                "lun": 5,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              }
            ],
            "scriptArguments": {
              "Linux": "-luns '0,1,2#3#4#5' -names 'datalog#shared#usrsap#backup' -paths '/hana/data,/hana/log#/hana/shared#/usr/sap#/hana/backup' -sizes '70,100#100#100#100'"
            },
            "useFastNetwork": true
          },
          "SQL": {
            "dbvmSize": "Standard_E8s_v3",
            "ascsVMSize": "Standard_E2s_v3",
            "diVMSize": "Standard_E8s_v3",
            "diVMCount": 1,
            "dbdisks": [
              {
                "lun": 0,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 1,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 2,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 3,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 4,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              }
            ],
            "scriptArguments": {
              "Windows": "-luns \"0,1,2,3#4\" -names \"data#log\" -paths \"C:\\sql\\data#C:\\sql\\log\"  -sizes \"100#100\""
            },
            "useFastNetwork": true
          },
          "other": {
            "dbvmSize": "Standard_E8s_v3",
            "ascsVMSize": "Standard_E2s_v3",
            "diVMSize": "Standard_E8s_v3",
            "diVMCount": 1,
            "dbdisks": [
              {
                "lun": 0,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 1,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 2,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 3,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 4,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              }
            ],
            "scriptArguments": {
              "Linux": "-luns '0,1,2,3,4' -names 'datalog' -paths '/db/data,/db/log' -sizes '70,100'",
              "Windows": "-luns \"0,1,2,3#4\" -names \"data#log\" -paths \"C:\\sql\\data#C:\\sql\\log\"  -sizes \"100#100\""
            },
            "useFastNetwork": true
          }
        },
        "Medium < 70.000 SAPS": {
          "HANA": {
            "dbvmSize": "Standard_E64s_v3",
            "ascsVMSize": "Standard_E2s_v3",
            "diVMSize": "Standard_E8s_v3",
            "diVMCount": 4,
            "dbdisks": [
              {
                "lun": 0,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 1,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 2,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 3,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 4,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 64
              },
              {
                "lun": 5,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              }
            ],
            "scriptArguments": {
              "Linux": "-luns '0,1,2#3#4#5' -names 'datalog#shared#usrsap#backup' -paths '/hana/data,/hana/log#/hana/shared#/usr/sap#/hana/backup' -sizes '70,100#100#100#100'"
            },
            "useFastNetwork": true
          },
          "SQL": {
            "dbvmSize": "Standard_E16s_v3",
            "ascsVMSize": "Standard_E2s_v3",
            "diVMSize": "Standard_E8s_v3",
            "diVMCount": 4,
            "dbdisks": [
              {
                "lun": 0,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 1,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 2,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 3,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 4,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 5,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 6,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 7,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              }
            ],
            "scriptArguments": {
              "Windows": "-luns \"0,1,2,3,4,5,6#7\" -names \"data#log\" -paths \"C:\\sql\\data#C:\\sql\\log\"  -sizes \"100#100\""
            },
            "useFastNetwork": true
          },
          "other": {
            "dbvmSize": "Standard_E16s_v3",
            "ascsVMSize": "Standard_E2s_v3",
            "diVMSize": "Standard_E8s_v3",
            "diVMCount": 4,
            "dbdisks": [
              {
                "lun": 0,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 1,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 2,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 3,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 4,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 5,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 6,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 7,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              }
            ],
            "scriptArguments": {
              "Linux": "-luns '0,1,2,3,4,5,6,7' -names 'datalog' -paths '/db/data,/db/log'  -sizes '70,100'",
              "Windows": "-luns \"0,1,2,3,4,5,6#7\" -names \"data#log\" -paths \"C:\\db\\data#C:\\db\\log\"  -sizes \"100#100\""
            },
            "useFastNetwork": true
          }
        },
        "Large < 180.000 SAPS": {
          "HANA": {
            "dbvmSize": "Standard_M64s",
            "ascsVMSize": "Standard_E2s_v3",
            "diVMSize": "Standard_E16s_v3",
            "diVMCount": 6,
            "dbdisks": [
              {
                "lun": 0,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 1,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 2,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 3,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 4,
                "caching": "None",
                "writeAcceleratorEnabled": "true",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 5,
                "caching": "None",
                "writeAcceleratorEnabled": "true",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 6,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 7,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 64
              },
              {
                "lun": 8,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 9,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 1024
              }
            ],
            "scriptArguments": {
              "Linux": "-luns '0,1,2,3#4,5#6#7#8,9' -names 'data#log#shared#usrsap#backup' -paths '/hana/data#/hana/log#/hana/shared#/usr/sap#/hana/backup' -sizes '100#100#100#100#100'"
            },
            "useFastNetwork": true
          },
          "SQL": {
            "dbvmSize": "Standard_E32s_v3",
            "ascsVMSize": "Standard_E2s_v3",
            "diVMSize": "Standard_E16s_v3",
            "diVMCount": 6,
            "dbdisks": [
              {
                "lun": 0,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 1,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 2,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 3,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 4,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 5,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              }
            ],
            "scriptArguments": {
              "Windows": "-luns \"0,1,2,3,4#5\" -names \"data#log\" -paths \"C:\\sql\\data#C:\\sql\\log\"  -sizes \"100#100\""
            },
            "useFastNetwork": true
          },
          "other": {
            "dbvmSize": "Standard_E32s_v3",
            "ascsVMSize": "Standard_E2s_v3",
            "diVMSize": "Standard_E16s_v3",
            "diVMCount": 6,
            "dbdisks": [
              {
                "lun": 0,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 1,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 2,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 3,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 4,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 5,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 512
              }
            ],
            "scriptArguments": {
              "Linux": "-luns '0,1,2,3,4,5' -names 'datalog' -paths '/db/data,/db/log'  -sizes '70,100'",
              "Windows": "-luns \"0,1,2,3,4#5\" -names \"data#log\" -paths \"C:\\db\\data#C:\\db\\log\"  -sizes \"100#100\""
            },
            "useFastNetwork": true
          }
        },
        "X-Large < 250.000 SAPS": {
          "HANA": {
            "dbvmSize": "Standard_M128s",
            "ascsVMSize": "Standard_E2s_v3",
            "diVMSize": "Standard_E16s_v3",
            "diVMCount": 10,
            "dbdisks": [
              {
                "lun": 0,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 1,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 2,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 3,
                "caching": "None",
                "writeAcceleratorEnabled": "true",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 4,
                "caching": "None",
                "writeAcceleratorEnabled": "true",
                "createOption": "Empty",
                "diskSizeGB": 512
              },
              {
                "lun": 5,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 6,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 64
              },
              {
                "lun": 7,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 2048
              },
              {
                "lun": 8,
                "caching": "ReadOnly",
                "createOption": "Empty",
                "diskSizeGB": 2048
              }
            ],
            "scriptArguments": {
              "Linux": "-luns '0,1,2#3,4#5#6#7,8' -names 'data#log#shared#usrsap#backup' -paths '/hana/data#/hana/log#/hana/shared#/usr/sap#/hana/backup' -sizes '100#100#100#100#100'"
            },
            "useFastNetwork": true
          },
          "SQL": {
            "dbvmSize": "Standard_E64s_v3",
            "ascsVMSize": "Standard_E2s_v3",
            "diVMSize": "Standard_E16s_v3",
            "diVMCount": 10,
            "dbdisks": [
              {
                "lun": 0,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 1,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 2,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 3,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 4,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 5,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 6,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 7,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              }
            ],
            "scriptArguments": {
              "Windows": "-luns \"0,1,2,3,4,5,6#7\" -names \"data#log\" -paths \"C:\\sql\\data#C:\\sql\\log\"  -sizes \"100#100\""
            },
            "useFastNetwork": true
          },
          "other": {
            "dbvmSize": "Standard_E64s_v3",
            "ascsVMSize": "Standard_E2s_v3",
            "diVMSize": "Standard_E16s_v3",
            "diVMCount": 10,
            "dbdisks": [
              {
                "lun": 0,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 1,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 2,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 3,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 4,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 5,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 6,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              },
              {
                "lun": 7,
                "caching": "None",
                "createOption": "Empty",
                "diskSizeGB": 1024
              }
            ],
            "scriptArguments": {
              "Linux": "-luns '0,1,2,3,4,5,6,7' -names 'datalog' -paths '/db/data,/db/log'  -sizes '70,100'",
              "Windows": "-luns \"0,1,2,3,4,5,6#7\" -names \"data#log\" -paths \"C:\\db\\data#C:\\db\\log\"  -sizes \"100#100\""
            },
            "useFastNetwork": true
          }
        }
      },
      "dbvmCount": "[if(equals(parameters('systemAvailability'), 'HA'), 2, 1)]",
      "ascsvmCount": "[if(equals(parameters('systemAvailability'), 'HA'), 2, 1)]",
      "divmCountNonHA": "(sizes)[parameters(sapSystemSize)][parameters(dbType)].diVMCount",
      "divmCount": "[if(equals(parameters('systemAvailability'), 'HA'), max(2, variables('divmCountNonHA')), variables('divmCountNonHA'))]",
      "dbVMSize": "(sizes)[parameters(sapSystemSize)][parameters(dbType)].dbvmSize",
      "ascsVMSize": "(sizes)[parameters(sapSystemSize)][parameters(dbType)].ascsVMSize",
      "diVMSize": "(sizes)[parameters(sapSystemSize)][parameters(dbType)].diVMSize",
      "dbDisks": "(sizes)[parameters(sapSystemSize)][parameters(dbType)].dbdisks",
      "sidlower": "[toLower(parameters('sapSystemId'))]",
      "vmName": "[toLower(parameters('sapSystemId'))]",
      "vnetName": "[toLower(parameters('sapSystemId'))]-vnet",
      "subnetName": "Subnet",
      "subnets": {
        "true": "Microsoft.Network/virtualNetworks/subnets/[toLower(parameters('sapSystemId'))]-vnet/Subnet",
        "false": ""
      },
      "selectedSubnetId": "(subnets)[string(equals(length(parameters(subnetId)), 0))]",
      "publicIpNameASCS": "[toLower(parameters('sapSystemId'))]-pip-ascs",
      "avSetNameASCS": "[toLower(parameters('sapSystemId'))]-avset-ascs",
      "nsgName": "[toLower(parameters('sapSystemId'))]-nsg",
      "loadBalancerNameASCS": "[toLower(parameters('sapSystemId'))]-lb-ascs",
      "loadBalancerNamePubASCS": "[toLower(parameters('sapSystemId'))]-lb-pub-ascs",
      "vmNameASCS": "[toLower(parameters('sapSystemId'))]-ascs",
      "nicNameASCS": "[toLower(parameters('sapSystemId'))]-nic-ascs",
      "avSetNameDB": "[toLower(parameters('sapSystemId'))]-avset-db",
      "loadBalancerNameDB": "[toLower(parameters('sapSystemId'))]-lb-db",
      "loadBalancerNamePubDB": "[toLower(parameters('sapSystemId'))]-lb-pub-db",
      "nicNameDB": "[toLower(parameters('sapSystemId'))]-nic-db",
      "vmNameDB": "[toLower(parameters('sapSystemId'))]-db",
      "avSetNameDI": "[toLower(parameters('sapSystemId'))]-avset-di",
      "nicNameDI": "[toLower(parameters('sapSystemId'))]-nic-di",
      "vmNameDI": "[toLower(parameters('sapSystemId'))]-di",
      "osSecurityRules": {
        "Windows": [
          {
            "name": "RDP",
            "properties": {
              "description": "Allow RDP Subnet",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3389",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          }
        ],
        "Linux": [
          {
            "name": "SSH",
            "properties": {
              "description": "Allow SSH Subnet",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          }
        ]
      },
      "selectedSecurityRules": "(osSecurityRules)[variables(internalOSType)]",
      "scriptArgumentsASCSDI": {
        "Linux": "-luns '0' -names 'usrsap' -paths '/usr/sap'  -sizes '100'",
        "Windows": "-luns \"0\" -names \"sap\" -paths \"S\"  -sizes \"100\""
      },
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "ssh": {
          "publicKeys": [
            {
              "path": "/home/GEN-UNIQUE/.ssh/authorized_keys",
              "keyData": "GEN-PASSWORD"
            }
          ]
        }
      },
      "frontendHANADB": "frontendhdb",
      "frontendSQLDB": "frontendsql",
      "frontendSQLCL": "frontendsqlcl",
      "frontendASCS": "frontendascs",
      "frontendAERS": "frontendaers",
      "frontendSCS": "frontendscs",
      "frontendERS": "frontenders",
      "frontendASCSCL": "frontendascscl",
      "frontendPubASCS": "frontendpubascs",
      "frontendPubDB": "frontendpubdb",
      "backendPoolHANADB": "backendhdb",
      "backendPoolSQLDB": "backendsql",
      "backendPoolSQLCL": "backendsqlcl",
      "backendPoolASCS": "backendascs",
      "backendPoolAERS": "backendaers",
      "backendPoolSCS": "backendscs",
      "backendPoolERS": "backenders",
      "backendPoolASCSCL": "backendascscl",
      "backendPoolPubASCS": "backendpubascs",
      "backendPoolPubDB": "backendpubdb",
      "probePortHANADB": "probehdb",
      "probePortSQLDB": "probesql",
      "probePortSQLCL": "probesqlcl",
      "probePortASCS": "probeascs",
      "probePortAERS": "probeaers",
      "probePortSCS": "probescs",
      "probePortERS": "probeers",
      "probePortASCSCL": "probeascscl",
      "dbInstanceNumberHANA": 4,
      "ascsInstanceNumber": 0,
      "scsInstanceNumber": 1,
      "aersInstanceNumber": 2,
      "ersInstanceNumber": 3,
      "probePortInternalHANADB": "[add(62500, variables('dbInstanceNumberHANA'))]",
      "probePortInternalSQLDB": 62500,
      "probePortInternalSQLCL": 63500,
      "probePortInternalASCS": "[add(62000, variables('ascsInstanceNumber'))]",
      "probePortInternalAERS": "[add(62100, variables('aersInstanceNumber'))]",
      "probePortInternalSCS": "[add(62000, variables('scsInstanceNumber'))]",
      "probePortInternalERS": "[add(62100, variables('ersInstanceNumber'))]",
      "probePortInternalASCSCL": 63500,
      "lbRulePrefixHANADB": "[concat('lb', padLeft(variables('dbInstanceNumberHANA'), 2, '0'), 'Rule')]",
      "lbRulePrefixSQLDB": "lbsqlRule",
      "lbRulePrefixSQLCL": "lbsqlclRule",
      "lbRulePrefixASCS": "lbascsRule",
      "lbRulePrefixAERS": "lbaersRule",
      "lbRulePrefixSCS": "lbscsRule",
      "lbRulePrefixERS": "lbersRule",
      "lbRulePrefixASCSCL": "lbascsclRule",
      "idleTimeoutInMinutes": 30,
      "publicIpNameLBDB": "[toLower(parameters('sapSystemId'))]-pip-lb-db",
      "publicIpNameLBASCS": "[toLower(parameters('sapSystemId'))]-pip-lb-ascs",
      "pipIdDB": "Microsoft.Network/publicIPAddresses/[toLower(parameters('sapSystemId'))]-pip-lb-db",
      "pipIdASCS": "Microsoft.Network/publicIPAddresses/[toLower(parameters('sapSystemId'))]-pip-lb-ascs",
      "lbFrontendConfigsDB": {
        "HANA": {
          "Linux": [
            {
              "properties": {
                "subnet": {
                  "id": "(subnets)[string(equals(length(parameters(subnetId)), 0))]"
                },
                "privateIPAllocationMethod": "Dynamic"
              },
              "name": "frontendhdb"
            }
          ]
        },
        "SQL": {
          "Windows": [
            {
              "properties": {
                "subnet": {
                  "id": "(subnets)[string(equals(length(parameters(subnetId)), 0))]"
                },
                "privateIPAllocationMethod": "Dynamic"
              },
              "name": "frontendsql"
            },
            {
              "properties": {
                "subnet": {
                  "id": "(subnets)[string(equals(length(parameters(subnetId)), 0))]"
                },
                "privateIPAllocationMethod": "Dynamic"
              },
              "name": "frontendsqlcl"
            }
          ]
        }
      },
      "lbFrontendConfigsABAP": [
        {
          "properties": {
            "subnet": {
              "id": "(subnets)[string(equals(length(parameters(subnetId)), 0))]"
            },
            "privateIPAllocationMethod": "Dynamic"
          },
          "name": "frontendascs"
        },
        {
          "properties": {
            "subnet": {
              "id": "(subnets)[string(equals(length(parameters(subnetId)), 0))]"
            },
            "privateIPAllocationMethod": "Dynamic"
          },
          "name": "frontendaers"
        }
      ],
      "lbFrontendConfigJAVA": [
        {
          "properties": {
            "subnet": {
              "id": "(subnets)[string(equals(length(parameters(subnetId)), 0))]"
            },
            "privateIPAllocationMethod": "Dynamic"
          },
          "name": "frontendscs"
        },
        {
          "properties": {
            "subnet": {
              "id": "(subnets)[string(equals(length(parameters(subnetId)), 0))]"
            },
            "privateIPAllocationMethod": "Dynamic"
          },
          "name": "frontenders"
        }
      ],
      "lbFrontendConfigIND": [
        {
          "properties": {
            "subnet": {
              "id": "(subnets)[string(equals(length(parameters(subnetId)), 0))]"
            },
            "privateIPAllocationMethod": "Dynamic"
          },
          "name": "frontendascscl"
        }
      ],
      "lbFrontendConfigXSCS": {
        "ABAP": "[OrderedDict([('properties', OrderedDict([('subnet', OrderedDict([('id', \"[variables('selectedSubnetId')]\")])), ('privateIPAllocationMethod', 'Dynamic')])), ('name', \"[variables('frontendASCSCL')]\")])][OrderedDict([('properties', OrderedDict([('subnet', OrderedDict([('id', \"[variables('selectedSubnetId')]\")])), ('privateIPAllocationMethod', 'Dynamic')])), ('name', \"[variables('frontendASCS')]\")]), OrderedDict([('properties', OrderedDict([('subnet', OrderedDict([('id', \"[variables('selectedSubnetId')]\")])), ('privateIPAllocationMethod', 'Dynamic')])), ('name', \"[variables('frontendAERS')]\")])]",
        "JAVA": "[OrderedDict([('properties', OrderedDict([('subnet', OrderedDict([('id', \"[variables('selectedSubnetId')]\")])), ('privateIPAllocationMethod', 'Dynamic')])), ('name', \"[variables('frontendASCSCL')]\")])][OrderedDict([('properties', OrderedDict([('subnet', OrderedDict([('id', \"[variables('selectedSubnetId')]\")])), ('privateIPAllocationMethod', 'Dynamic')])), ('name', \"[variables('frontendSCS')]\")]), OrderedDict([('properties', OrderedDict([('subnet', OrderedDict([('id', \"[variables('selectedSubnetId')]\")])), ('privateIPAllocationMethod', 'Dynamic')])), ('name', \"[variables('frontendERS')]\")])]",
        "ABAP+JAVA": "[OrderedDict([('properties', OrderedDict([('subnet', OrderedDict([('id', \"[variables('selectedSubnetId')]\")])), ('privateIPAllocationMethod', 'Dynamic')])), ('name', \"[variables('frontendASCSCL')]\")])][OrderedDict([('properties', OrderedDict([('subnet', OrderedDict([('id', \"[variables('selectedSubnetId')]\")])), ('privateIPAllocationMethod', 'Dynamic')])), ('name', \"[variables('frontendASCS')]\")]), OrderedDict([('properties', OrderedDict([('subnet', OrderedDict([('id', \"[variables('selectedSubnetId')]\")])), ('privateIPAllocationMethod', 'Dynamic')])), ('name', \"[variables('frontendAERS')]\")])][OrderedDict([('properties', OrderedDict([('subnet', OrderedDict([('id', \"[variables('selectedSubnetId')]\")])), ('privateIPAllocationMethod', 'Dynamic')])), ('name', \"[variables('frontendSCS')]\")]), OrderedDict([('properties', OrderedDict([('subnet', OrderedDict([('id', \"[variables('selectedSubnetId')]\")])), ('privateIPAllocationMethod', 'Dynamic')])), ('name', \"[variables('frontendERS')]\")])]"
      },
      "lbBackendPoolsDB": {
        "HANA": {
          "Linux": [
            {
              "name": "backendhdb"
            }
          ]
        },
        "SQL": {
          "Windows": [
            {
              "name": "backendsql"
            },
            {
              "name": "backendsqlcl"
            }
          ]
        }
      },
      "lbBackendPoolsABAP": [
        {
          "name": "backendascs"
        },
        {
          "name": "backendaers"
        }
      ],
      "lbBackendPoolJAVA": [
        {
          "name": "backendscs"
        },
        {
          "name": "backenders"
        }
      ],
      "lbBackendPoolIND": [
        {
          "name": "backendascscl"
        }
      ],
      "lbBackendPoolXSCS": {
        "ABAP": "[OrderedDict([('name', \"[variables('backendPoolASCSCL')]\")])][OrderedDict([('name', \"[variables('backendPoolASCS')]\")]), OrderedDict([('name', \"[variables('backendPoolAERS')]\")])]",
        "JAVA": "[OrderedDict([('name', \"[variables('backendPoolASCSCL')]\")])][OrderedDict([('name', \"[variables('backendPoolSCS')]\")]), OrderedDict([('name', \"[variables('backendPoolERS')]\")])]",
        "ABAP+JAVA": "[OrderedDict([('name', \"[variables('backendPoolASCSCL')]\")])][OrderedDict([('name', \"[variables('backendPoolASCS')]\")]), OrderedDict([('name', \"[variables('backendPoolAERS')]\")])][OrderedDict([('name', \"[variables('backendPoolSCS')]\")]), OrderedDict([('name', \"[variables('backendPoolERS')]\")])]"
      },
      "lbRulesDB": {
        "HANA": {
          "Linux": [
            {
              "properties": {
                "frontendIPConfiguration": {
                  "id": "Microsoft.Network/loadBalancers/frontendIpConfigurations/[toLower(parameters('sapSystemId'))]-lb-db/frontendhdb"
                },
                "backendAddressPool": {
                  "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-db/backendhdb"
                },
                "probe": {
                  "id": "Microsoft.Network/loadBalancers/probes/[toLower(parameters('sapSystemId'))]-lb-db/probehdb"
                },
                "protocol": "All",
                "frontendPort": 0,
                "backendPort": 0,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 30
              },
              "name": "[concat(variables('lbRulePrefixHANADB'), padLeft(variables('dbInstanceNumberHANA'), 2, '0'), 'all')]"
            }
          ]
        },
        "SQL": {
          "Windows": [
            {
              "properties": {
                "frontendIPConfiguration": {
                  "id": "Microsoft.Network/loadBalancers/frontendIpConfigurations/[toLower(parameters('sapSystemId'))]-lb-db/frontendsql"
                },
                "backendAddressPool": {
                  "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-db/backendsql"
                },
                "probe": {
                  "id": "Microsoft.Network/loadBalancers/probes/[toLower(parameters('sapSystemId'))]-lb-db/probesql"
                },
                "protocol": "All",
                "frontendPort": 0,
                "backendPort": 0,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 30
              },
              "name": "lbsqlRuleall"
            },
            {
              "properties": {
                "frontendIPConfiguration": {
                  "id": "Microsoft.Network/loadBalancers/frontendIpConfigurations/[toLower(parameters('sapSystemId'))]-lb-db/frontendsqlcl"
                },
                "backendAddressPool": {
                  "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-db/backendsqlcl"
                },
                "probe": {
                  "id": "Microsoft.Network/loadBalancers/probes/[toLower(parameters('sapSystemId'))]-lb-db/probesqlcl"
                },
                "protocol": "All",
                "frontendPort": 0,
                "backendPort": 0,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 30
              },
              "name": "lbsqlclRuleall"
            }
          ]
        }
      },
      "lbRulesABAP": [
        {
          "properties": {
            "frontendIPConfiguration": {
              "id": "Microsoft.Network/loadBalancers/frontendIpConfigurations/[toLower(parameters('sapSystemId'))]-lb-ascs/frontendascs"
            },
            "backendAddressPool": {
              "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-ascs/backendascs"
            },
            "probe": {
              "id": "Microsoft.Network/loadBalancers/probes/[toLower(parameters('sapSystemId'))]-lb-ascs/probeascs"
            },
            "protocol": "All",
            "frontendPort": 0,
            "backendPort": 0,
            "enableFloatingIP": true,
            "idleTimeoutInMinutes": 30
          },
          "name": "lbascsRuleall"
        },
        {
          "properties": {
            "frontendIPConfiguration": {
              "id": "Microsoft.Network/loadBalancers/frontendIpConfigurations/[toLower(parameters('sapSystemId'))]-lb-ascs/frontendaers"
            },
            "backendAddressPool": {
              "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-ascs/backendaers"
            },
            "probe": {
              "id": "Microsoft.Network/loadBalancers/probes/[toLower(parameters('sapSystemId'))]-lb-ascs/probeaers"
            },
            "protocol": "All",
            "frontendPort": 0,
            "backendPort": 0,
            "enableFloatingIP": true,
            "idleTimeoutInMinutes": 30
          },
          "name": "lbaersRuleall"
        }
      ],
      "lbRulesJAVA": [
        {
          "properties": {
            "frontendIPConfiguration": {
              "id": "Microsoft.Network/loadBalancers/frontendIpConfigurations/[toLower(parameters('sapSystemId'))]-lb-ascs/frontendscs"
            },
            "backendAddressPool": {
              "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-ascs/backendscs"
            },
            "probe": {
              "id": "Microsoft.Network/loadBalancers/probes/[toLower(parameters('sapSystemId'))]-lb-ascs/probescs"
            },
            "protocol": "All",
            "frontendPort": 0,
            "backendPort": 0,
            "enableFloatingIP": true,
            "idleTimeoutInMinutes": 30
          },
          "name": "lbscsRuleall"
        },
        {
          "properties": {
            "frontendIPConfiguration": {
              "id": "Microsoft.Network/loadBalancers/frontendIpConfigurations/[toLower(parameters('sapSystemId'))]-lb-ascs/frontenders"
            },
            "backendAddressPool": {
              "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-ascs/backenders"
            },
            "probe": {
              "id": "Microsoft.Network/loadBalancers/probes/[toLower(parameters('sapSystemId'))]-lb-ascs/probeers"
            },
            "protocol": "All",
            "frontendPort": 0,
            "backendPort": 0,
            "enableFloatingIP": true,
            "idleTimeoutInMinutes": 30
          },
          "name": "lbersRuleall"
        }
      ],
      "lbRulesIND": [
        {
          "properties": {
            "frontendIPConfiguration": {
              "id": "Microsoft.Network/loadBalancers/frontendIpConfigurations/[toLower(parameters('sapSystemId'))]-lb-ascs/frontendascscl"
            },
            "backendAddressPool": {
              "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-ascs/backendascscl"
            },
            "probe": {
              "id": "Microsoft.Network/loadBalancers/probes/[toLower(parameters('sapSystemId'))]-lb-ascs/probeascscl"
            },
            "protocol": "All",
            "frontendPort": 0,
            "backendPort": 0,
            "enableFloatingIP": true,
            "idleTimeoutInMinutes": 30
          },
          "name": "lbascsclRuleall"
        }
      ],
      "lbRuleXSCS": {
        "ABAP": "[OrderedDict([('properties', OrderedDict([('frontendIPConfiguration', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameASCS'), variables('frontendASCSCL'))]\")])), ('backendAddressPool', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolASCSCL'))]\")])), ('probe', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameASCS'), variables('probePortASCSCL'))]\")])), ('protocol', 'All'), ('frontendPort', 0), ('backendPort', 0), ('enableFloatingIP', True), ('idleTimeoutInMinutes', \"[variables('idleTimeoutInMinutes')]\")])), ('name', \"[concat(variables('lbRulePrefixASCSCL'), 'all')]\")])][OrderedDict([('properties', OrderedDict([('frontendIPConfiguration', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameASCS'), variables('frontendASCS'))]\")])), ('backendAddressPool', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolASCS'))]\")])), ('probe', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameASCS'), variables('probePortASCS'))]\")])), ('protocol', 'All'), ('frontendPort', 0), ('backendPort', 0), ('enableFloatingIP', True), ('idleTimeoutInMinutes', \"[variables('idleTimeoutInMinutes')]\")])), ('name', \"[concat(variables('lbRulePrefixASCS'), 'all')]\")]), OrderedDict([('properties', OrderedDict([('frontendIPConfiguration', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameASCS'), variables('frontendAERS'))]\")])), ('backendAddressPool', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolAERS'))]\")])), ('probe', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameASCS'), variables('probePortAERS'))]\")])), ('protocol', 'All'), ('frontendPort', 0), ('backendPort', 0), ('enableFloatingIP', True), ('idleTimeoutInMinutes', \"[variables('idleTimeoutInMinutes')]\")])), ('name', \"[concat(variables('lbRulePrefixAERS'), 'all')]\")])]",
        "JAVA": "[OrderedDict([('properties', OrderedDict([('frontendIPConfiguration', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameASCS'), variables('frontendASCSCL'))]\")])), ('backendAddressPool', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolASCSCL'))]\")])), ('probe', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameASCS'), variables('probePortASCSCL'))]\")])), ('protocol', 'All'), ('frontendPort', 0), ('backendPort', 0), ('enableFloatingIP', True), ('idleTimeoutInMinutes', \"[variables('idleTimeoutInMinutes')]\")])), ('name', \"[concat(variables('lbRulePrefixASCSCL'), 'all')]\")])][OrderedDict([('properties', OrderedDict([('frontendIPConfiguration', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameASCS'), variables('frontendSCS'))]\")])), ('backendAddressPool', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolSCS'))]\")])), ('probe', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameASCS'), variables('probePortSCS'))]\")])), ('protocol', 'All'), ('frontendPort', 0), ('backendPort', 0), ('enableFloatingIP', True), ('idleTimeoutInMinutes', \"[variables('idleTimeoutInMinutes')]\")])), ('name', \"[concat(variables('lbRulePrefixSCS'), 'all')]\")]), OrderedDict([('properties', OrderedDict([('frontendIPConfiguration', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameASCS'), variables('frontendERS'))]\")])), ('backendAddressPool', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolERS'))]\")])), ('probe', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameASCS'), variables('probePortERS'))]\")])), ('protocol', 'All'), ('frontendPort', 0), ('backendPort', 0), ('enableFloatingIP', True), ('idleTimeoutInMinutes', \"[variables('idleTimeoutInMinutes')]\")])), ('name', \"[concat(variables('lbRulePrefixERS'), 'all')]\")])]",
        "ABAP+JAVA": "[OrderedDict([('properties', OrderedDict([('frontendIPConfiguration', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameASCS'), variables('frontendASCSCL'))]\")])), ('backendAddressPool', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolASCSCL'))]\")])), ('probe', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameASCS'), variables('probePortASCSCL'))]\")])), ('protocol', 'All'), ('frontendPort', 0), ('backendPort', 0), ('enableFloatingIP', True), ('idleTimeoutInMinutes', \"[variables('idleTimeoutInMinutes')]\")])), ('name', \"[concat(variables('lbRulePrefixASCSCL'), 'all')]\")])][OrderedDict([('properties', OrderedDict([('frontendIPConfiguration', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameASCS'), variables('frontendASCS'))]\")])), ('backendAddressPool', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolASCS'))]\")])), ('probe', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameASCS'), variables('probePortASCS'))]\")])), ('protocol', 'All'), ('frontendPort', 0), ('backendPort', 0), ('enableFloatingIP', True), ('idleTimeoutInMinutes', \"[variables('idleTimeoutInMinutes')]\")])), ('name', \"[concat(variables('lbRulePrefixASCS'), 'all')]\")]), OrderedDict([('properties', OrderedDict([('frontendIPConfiguration', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameASCS'), variables('frontendAERS'))]\")])), ('backendAddressPool', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolAERS'))]\")])), ('probe', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameASCS'), variables('probePortAERS'))]\")])), ('protocol', 'All'), ('frontendPort', 0), ('backendPort', 0), ('enableFloatingIP', True), ('idleTimeoutInMinutes', \"[variables('idleTimeoutInMinutes')]\")])), ('name', \"[concat(variables('lbRulePrefixAERS'), 'all')]\")])][OrderedDict([('properties', OrderedDict([('frontendIPConfiguration', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameASCS'), variables('frontendSCS'))]\")])), ('backendAddressPool', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolSCS'))]\")])), ('probe', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameASCS'), variables('probePortSCS'))]\")])), ('protocol', 'All'), ('frontendPort', 0), ('backendPort', 0), ('enableFloatingIP', True), ('idleTimeoutInMinutes', \"[variables('idleTimeoutInMinutes')]\")])), ('name', \"[concat(variables('lbRulePrefixSCS'), 'all')]\")]), OrderedDict([('properties', OrderedDict([('frontendIPConfiguration', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerNameASCS'), variables('frontendERS'))]\")])), ('backendAddressPool', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolERS'))]\")])), ('probe', OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerNameASCS'), variables('probePortERS'))]\")])), ('protocol', 'All'), ('frontendPort', 0), ('backendPort', 0), ('enableFloatingIP', True), ('idleTimeoutInMinutes', \"[variables('idleTimeoutInMinutes')]\")])), ('name', \"[concat(variables('lbRulePrefixERS'), 'all')]\")])]"
      },
      "lbProbesDB": {
        "HANA": {
          "Linux": [
            {
              "properties": {
                "protocol": "Tcp",
                "port": "[add(62500, variables('dbInstanceNumberHANA'))]",
                "intervalInSeconds": 5,
                "numberOfProbes": 2
              },
              "name": "probehdb"
            }
          ]
        },
        "SQL": {
          "Windows": [
            {
              "properties": {
                "protocol": "Tcp",
                "port": 62500,
                "intervalInSeconds": 5,
                "numberOfProbes": 2
              },
              "name": "probesql"
            },
            {
              "properties": {
                "protocol": "Tcp",
                "port": 63500,
                "intervalInSeconds": 5,
                "numberOfProbes": 2
              },
              "name": "probesqlcl"
            }
          ]
        }
      },
      "lbProbesABAP": [
        {
          "properties": {
            "protocol": "Tcp",
            "port": "[add(62000, variables('ascsInstanceNumber'))]",
            "intervalInSeconds": 5,
            "numberOfProbes": 2
          },
          "name": "probeascs"
        },
        {
          "properties": {
            "protocol": "Tcp",
            "port": "[add(62100, variables('aersInstanceNumber'))]",
            "intervalInSeconds": 5,
            "numberOfProbes": 2
          },
          "name": "probeaers"
        }
      ],
      "lbProbesJAVA": [
        {
          "properties": {
            "protocol": "Tcp",
            "port": "[add(62000, variables('scsInstanceNumber'))]",
            "intervalInSeconds": 5,
            "numberOfProbes": 2
          },
          "name": "probescs"
        },
        {
          "properties": {
            "protocol": "Tcp",
            "port": "[add(62100, variables('ersInstanceNumber'))]",
            "intervalInSeconds": 5,
            "numberOfProbes": 2
          },
          "name": "probeers"
        }
      ],
      "lbProbesIND": [
        {
          "properties": {
            "protocol": "Tcp",
            "port": 63500,
            "intervalInSeconds": 5,
            "numberOfProbes": 2
          },
          "name": "probeascscl"
        }
      ],
      "lbProbeXSCS": {
        "ABAP": "[OrderedDict([('properties', OrderedDict([('protocol', 'Tcp'), ('port', \"[variables('probePortInternalASCSCL')]\"), ('intervalInSeconds', 5), ('numberOfProbes', 2)])), ('name', \"[variables('probePortASCSCL')]\")])][OrderedDict([('properties', OrderedDict([('protocol', 'Tcp'), ('port', \"[variables('probePortInternalASCS')]\"), ('intervalInSeconds', 5), ('numberOfProbes', 2)])), ('name', \"[variables('probePortASCS')]\")]), OrderedDict([('properties', OrderedDict([('protocol', 'Tcp'), ('port', \"[variables('probePortInternalAERS')]\"), ('intervalInSeconds', 5), ('numberOfProbes', 2)])), ('name', \"[variables('probePortAERS')]\")])]",
        "JAVA": "[OrderedDict([('properties', OrderedDict([('protocol', 'Tcp'), ('port', \"[variables('probePortInternalASCSCL')]\"), ('intervalInSeconds', 5), ('numberOfProbes', 2)])), ('name', \"[variables('probePortASCSCL')]\")])][OrderedDict([('properties', OrderedDict([('protocol', 'Tcp'), ('port', \"[variables('probePortInternalSCS')]\"), ('intervalInSeconds', 5), ('numberOfProbes', 2)])), ('name', \"[variables('probePortSCS')]\")]), OrderedDict([('properties', OrderedDict([('protocol', 'Tcp'), ('port', \"[variables('probePortInternalERS')]\"), ('intervalInSeconds', 5), ('numberOfProbes', 2)])), ('name', \"[variables('probePortERS')]\")])]",
        "ABAP+JAVA": "[OrderedDict([('properties', OrderedDict([('protocol', 'Tcp'), ('port', \"[variables('probePortInternalASCSCL')]\"), ('intervalInSeconds', 5), ('numberOfProbes', 2)])), ('name', \"[variables('probePortASCSCL')]\")])][OrderedDict([('properties', OrderedDict([('protocol', 'Tcp'), ('port', \"[variables('probePortInternalASCS')]\"), ('intervalInSeconds', 5), ('numberOfProbes', 2)])), ('name', \"[variables('probePortASCS')]\")]), OrderedDict([('properties', OrderedDict([('protocol', 'Tcp'), ('port', \"[variables('probePortInternalAERS')]\"), ('intervalInSeconds', 5), ('numberOfProbes', 2)])), ('name', \"[variables('probePortAERS')]\")])][OrderedDict([('properties', OrderedDict([('protocol', 'Tcp'), ('port', \"[variables('probePortInternalSCS')]\"), ('intervalInSeconds', 5), ('numberOfProbes', 2)])), ('name', \"[variables('probePortSCS')]\")]), OrderedDict([('properties', OrderedDict([('protocol', 'Tcp'), ('port', \"[variables('probePortInternalERS')]\"), ('intervalInSeconds', 5), ('numberOfProbes', 2)])), ('name', \"[variables('probePortERS')]\")])]"
      },
      "nicBackAddressPoolsDB": {
        "HANA": {
          "Linux": [
            {
              "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-pub-db/backendpubdb"
            },
            {
              "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-db/backendhdb"
            }
          ]
        },
        "SQL": {
          "Windows": [
            {
              "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-pub-db/backendpubdb"
            },
            {
              "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-db/backendsql"
            },
            {
              "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-db/backendsqlcl"
            }
          ]
        }
      },
      "nicBackAddressPoolsABAP": [
        {
          "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-ascs/backendascs"
        },
        {
          "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-ascs/backendaers"
        }
      ],
      "nicBackAddressPoolsJAVA": [
        {
          "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-ascs/backendscs"
        },
        {
          "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-ascs/backenders"
        }
      ],
      "nicBackAddressPoolsIND": [
        {
          "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-ascs/backendascscl"
        }
      ],
      "nicBackAddressPoolsPub": [
        {
          "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-pub-ascs/backendpubascs"
        }
      ],
      "nicBackAddressPoolsINDPub": "[if(greater(length(parameters('subnetId')), 0), concat(variables('nicBackAddressPoolsIND'), variables('nicBackAddressPoolsPub')), variables('nicBackAddressPoolsIND'))]",
      "nicBackAddressPoolXSCS": {
        "ABAP": "[if(greater(length(parameters('subnetId')), 0), concat(variables('nicBackAddressPoolsIND'), variables('nicBackAddressPoolsPub')), variables('nicBackAddressPoolsIND'))][OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolASCS'))]\")]), OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolAERS'))]\")])]",
        "JAVA": "[if(greater(length(parameters('subnetId')), 0), concat(variables('nicBackAddressPoolsIND'), variables('nicBackAddressPoolsPub')), variables('nicBackAddressPoolsIND'))][OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolSCS'))]\")]), OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolERS'))]\")])]",
        "ABAP+JAVA": "[if(greater(length(parameters('subnetId')), 0), concat(variables('nicBackAddressPoolsIND'), variables('nicBackAddressPoolsPub')), variables('nicBackAddressPoolsIND'))][OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolASCS'))]\")]), OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolAERS'))]\")])][OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolSCS'))]\")]), OrderedDict([('id', \"[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerNameASCS'), variables('backendPoolERS'))]\")])]"
      }
    },
    "resources": [
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "[toLower(parameters('sapSystemId'))]-nsg",
        "apiVersion": "2020-05-01",
        "location": "[resourceGroup().location]",
        "condition": false,
        "properties": {
          "securityRules": "(osSecurityRules)[variables(internalOSType)]"
        }
      },
      {
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[toLower(parameters('sapSystemId'))]-vnet",
        "apiVersion": "2020-05-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "Microsoft.Network/networkSecurityGroups/[toLower(parameters('sapSystemId'))]-nsg"
        ],
        "condition": false,
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "10.0.0.0/16"
            ]
          },
          "subnets": [
            {
              "name": "Subnet",
              "properties": {
                "addressPrefix": "10.0.0.0/24",
                "networkSecurityGroup": {
                  "id": "Microsoft.Network/networkSecurityGroups/[toLower(parameters('sapSystemId'))]-nsg"
                }
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Compute/availabilitySets",
        "name": "[toLower(parameters('sapSystemId'))]-avset-ascs",
        "apiVersion": "2020-06-01",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Aligned"
        },
        "condition": false,
        "properties": {
          "platformFaultDomainCount": 2,
          "platformUpdateDomainCount": 10
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[toLower(parameters('sapSystemId'))]-pip-lb-ascs",
        "apiVersion": "2020-05-01",
        "condition": "[and(greater(variables('ascsvmCount') , 1), greater(length(parameters('subnetId')), 0))]",
        "sku": {
          "name": "Standard"
        },
        "location": "[resourceGroup().location]",
        "properties": {
          "publicIPAllocationMethod": "Static"
        }
      },
      {
        "type": "Microsoft.Network/loadBalancers",
        "name": "[toLower(parameters('sapSystemId'))]-lb-pub-ascs",
        "apiVersion": "2020-05-01",
        "location": "[resourceGroup().location]",
        "condition": "[and(greater(variables('ascsvmCount') , 1), greater(length(parameters('subnetId')), 0))]",
        "dependsOn": [
          "Microsoft.Network/publicIPAddresses/[toLower(parameters('sapSystemId'))]-pip-lb-ascs"
        ],
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "frontendpubascs",
              "properties": {
                "publicIPAddress": {
                  "id": "Microsoft.Network/publicIPAddresses/[toLower(parameters('sapSystemId'))]-pip-lb-ascs"
                }
              }
            }
          ],
          "outboundRules": [
            {
              "name": "test",
              "properties": {
                "frontendIPConfigurations": [
                  {
                    "id": "Microsoft.Network/loadBalancers/frontendIPConfigurations/[toLower(parameters('sapSystemId'))]-lb-pub-ascs/frontendpubascs"
                  }
                ],
                "allocatedOutboundPorts": 1000,
                "idleTimeoutInMinutes": 4,
                "enableTcpReset": true,
                "protocol": "All",
                "backendAddressPool": {
                  "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-pub-ascs/backendpubascs"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "backendpubascs"
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[toLower(parameters('sapSystemId'))]-pip-ascs-copyIndex()",
        "apiVersion": "2020-05-01",
        "condition": false,
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/[toLower(parameters('sapSystemId'))]-vnet"
        ],
        "sku": {
          "name": "Standard"
        },
        "copy": {
          "name": "pipLoop",
          "count": "[if(equals(parameters('systemAvailability'), 'HA'), 2, 1)]"
        },
        "location": "[resourceGroup().location]",
        "properties": {
          "publicIPAllocationMethod": "Static"
        }
      },
      {
        "type": "Microsoft.Network/loadBalancers",
        "name": "[toLower(parameters('sapSystemId'))]-lb-ascs",
        "apiVersion": "2020-05-01",
        "location": "[resourceGroup().location]",
        "condition": "[greater(variables('ascsvmCount') , 1)]",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/[toLower(parameters('sapSystemId'))]-vnet"
        ],
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": "(lbFrontendConfigXSCS)[parameters(stackType)]",
          "backendAddressPools": "(lbBackendPoolXSCS)[parameters(stackType)]",
          "loadBalancingRules": "(lbRuleXSCS)[parameters(stackType)]",
          "probes": "(lbProbeXSCS)[parameters(stackType)]"
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[toLower(parameters('sapSystemId'))]-nic-ascs-copyIndex()",
        "apiVersion": "2020-05-01",
        "copy": {
          "name": "nicASCSLoop",
          "count": "[if(equals(parameters('systemAvailability'), 'HA'), 2, 1)]"
        },
        "dependsOn": [
          "pipLoop",
          "Microsoft.Network/virtualNetworks/[toLower(parameters('sapSystemId'))]-vnet",
          "Microsoft.Network/loadBalancers/[toLower(parameters('sapSystemId'))]-lb-ascs",
          "Microsoft.Network/loadBalancers/[toLower(parameters('sapSystemId'))]-lb-pub-ascs"
        ],
        "location": "[resourceGroup().location]",
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "publicIPAddress": "[if(equals(length(parameters('subnetId')), 0), json(concat('{\"id\": \"', resourceId('Microsoft.Network/publicIPAddresses', concat(variables('publicIpNameASCS'), '-', copyIndex())) ,'\"}')), json('null'))]",
                "subnet": {
                  "id": "(subnets)[string(equals(length(parameters(subnetId)), 0))]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(variables('ascsvmCount'), 1), variables('nicBackAddressPoolXSCS')[parameters('stackType')], json('null'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[toLower(parameters('sapSystemId'))]-ascs-copyIndex()",
        "copy": {
          "name": "xscsVMLoop",
          "count": "[if(equals(parameters('systemAvailability'), 'HA'), 2, 1)]"
        },
        "dependsOn": [
          "nicASCSLoop",
          "Microsoft.Compute/availabilitySets/[toLower(parameters('sapSystemId'))]-avset-ascs"
        ],
        "apiVersion": "2020-06-01",
        "location": "[resourceGroup().location]",
        "zones": "[if(equals(length(parameters('availabilityZones')), 0), json('null'), array(variables('azArray')[mod(copyIndex(), variables('azArrayLength'))]))]",
        "properties": {
          "availabilitySet": "[if(equals(variables('azArrayLength'), 0), resourceId('Microsoft.Compute/availabilitySets', variables('avSetNameASCS')), json('null'))]",
          "hardwareProfile": {
            "vmSize": "(sizes)[parameters(sapSystemSize)][parameters(dbType)].ascsVMSize"
          },
          "osProfile": {
            "computerName": "[toLower(parameters('sapSystemId'))]-ascs-copyIndex()",
            "adminUsername": "GEN-UNIQUE",
            "adminPassword": "GEN-PASSWORD",
            "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "(images)[parameters(osType)].publisher",
              "offer": "(images)[parameters(osType)].offer",
              "sku": "(images)[parameters(osType)].sku",
              "version": "latest"
            },
            "osDisk": {
              "name": "[toLower(parameters('sapSystemId'))]-ascs-copyIndex()-osdisk",
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            },
            "dataDisks": [
              {
                "lun": 0,
                "createOption": "Empty",
                "diskSizeGB": 128
              }
            ]
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/[toLower(parameters('sapSystemId'))]-nic-ascs-copyIndex()"
              }
            ]
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(variables('vmNameASCS'), '-', copyIndex(), '/', variables('csExtension')[variables('internalOSType')].Name)]",
        "apiVersion": "2020-06-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "xscsVMLoop"
        ],
        "copy": {
          "name": "xscsExtVMLoop",
          "count": "[if(equals(parameters('systemAvailability'), 'HA'), 2, 1)]"
        },
        "properties": {
          "publisher": "(csExtension)[variables(internalOSType)].Publisher",
          "type": "(csExtension)[variables(internalOSType)].Name",
          "typeHandlerVersion": "(csExtension)[variables(internalOSType)].Version",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": [
              "(csExtension)[variables(internalOSType)].script"
            ],
            "commandToExecute": "[concat(variables('csExtension')[variables('internalOSType')].scriptCall, ' ', variables('scriptArgumentsASCSDI')[variables('internalOSType')])]"
          }
        }
      },
      {
        "type": "Microsoft.Compute/availabilitySets",
        "name": "[toLower(parameters('sapSystemId'))]-avset-db",
        "apiVersion": "2020-06-01",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Aligned"
        },
        "condition": false,
        "properties": {
          "platformFaultDomainCount": 2,
          "platformUpdateDomainCount": 10
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[toLower(parameters('sapSystemId'))]-pip-lb-db",
        "apiVersion": "2020-05-01",
        "sku": {
          "name": "Standard"
        },
        "location": "[resourceGroup().location]",
        "properties": {
          "publicIPAllocationMethod": "Static"
        }
      },
      {
        "type": "Microsoft.Network/loadBalancers",
        "name": "[toLower(parameters('sapSystemId'))]-lb-pub-db",
        "apiVersion": "2020-05-01",
        "location": "[resourceGroup().location]",
        "condition": "[greater(variables('ascsvmCount') , 1)]",
        "dependsOn": [
          "Microsoft.Network/publicIPAddresses/[toLower(parameters('sapSystemId'))]-pip-lb-db"
        ],
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "frontendpubdb",
              "properties": {
                "publicIPAddress": {
                  "id": "Microsoft.Network/publicIPAddresses/[toLower(parameters('sapSystemId'))]-pip-lb-db"
                }
              }
            }
          ],
          "outboundRules": [
            {
              "name": "test",
              "properties": {
                "frontendIPConfigurations": [
                  {
                    "id": "Microsoft.Network/loadBalancers/frontendIPConfigurations/[toLower(parameters('sapSystemId'))]-lb-pub-db/frontendpubdb"
                  }
                ],
                "allocatedOutboundPorts": 1000,
                "idleTimeoutInMinutes": 4,
                "enableTcpReset": true,
                "protocol": "All",
                "backendAddressPool": {
                  "id": "Microsoft.Network/loadBalancers/backendAddressPools/[toLower(parameters('sapSystemId'))]-lb-pub-db/backendpubdb"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "backendpubdb"
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/loadBalancers",
        "name": "[toLower(parameters('sapSystemId'))]-lb-db",
        "apiVersion": "2020-05-01",
        "location": "[resourceGroup().location]",
        "condition": "[greater(variables('dbvmCount') , 1)]",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/[toLower(parameters('sapSystemId'))]-vnet"
        ],
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": "(lbFrontendConfigsDB)[parameters(dbType)][variables(internalOSType)]",
          "backendAddressPools": "(lbBackendPoolsDB)[parameters(dbType)][variables(internalOSType)]",
          "loadBalancingRules": "(lbRulesDB)[parameters(dbType)][variables(internalOSType)]",
          "probes": "(lbProbesDB)[parameters(dbType)][variables(internalOSType)]"
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[toLower(parameters('sapSystemId'))]-nic-db-copyIndex()",
        "apiVersion": "2020-05-01",
        "copy": {
          "name": "nicDBLoop",
          "count": "[if(equals(parameters('systemAvailability'), 'HA'), 2, 1)]"
        },
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/[toLower(parameters('sapSystemId'))]-vnet",
          "Microsoft.Network/loadBalancers/[toLower(parameters('sapSystemId'))]-lb-db",
          "Microsoft.Network/loadBalancers/[toLower(parameters('sapSystemId'))]-lb-pub-db"
        ],
        "location": "[resourceGroup().location]",
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "(subnets)[string(equals(length(parameters(subnetId)), 0))]"
                },
                "loadBalancerBackendAddressPools": "[if(greater(variables('dbvmCount'), 1), variables('nicBackAddressPoolsDB')[parameters('dbType')][variables('internalOSType')], json('null'))]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[toLower(parameters('sapSystemId'))]-db-copyIndex()",
        "copy": {
          "name": "dbVMLoop",
          "count": "[if(equals(parameters('systemAvailability'), 'HA'), 2, 1)]"
        },
        "dependsOn": [
          "nicDBLoop",
          "Microsoft.Compute/availabilitySets/[toLower(parameters('sapSystemId'))]-avset-db"
        ],
        "apiVersion": "2020-06-01",
        "location": "[resourceGroup().location]",
        "zones": "[if(equals(length(parameters('availabilityZones')), 0), json('null'), array(variables('azArray')[mod(copyIndex(), variables('azArrayLength'))]))]",
        "properties": {
          "availabilitySet": "[if(equals(variables('azArrayLength'), 0), resourceId('Microsoft.Compute/availabilitySets', variables('avSetNameDB')), json('null'))]",
          "hardwareProfile": {
            "vmSize": "dbvmSize"
          },
          "osProfile": {
            "computerName": "[toLower(parameters('sapSystemId'))]-db-copyIndex()",
            "adminUsername": "GEN-UNIQUE",
            "adminPassword": "GEN-PASSWORD",
            "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "(images)[parameters(osType)].publisher",
              "offer": "(images)[parameters(osType)].offer",
              "sku": "(images)[parameters(osType)].sku",
              "version": "latest"
            },
            "osDisk": {
              "name": "[toLower(parameters('sapSystemId'))]-db-copyIndex()-osdisk",
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            },
            "dataDisks": "(sizes)[parameters(sapSystemSize)][parameters(dbType)].dbdisks"
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/[toLower(parameters('sapSystemId'))]-nic-db-copyIndex()"
              }
            ]
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(variables('vmNameDB'), '-', copyIndex(), '/', variables('csExtension')[variables('internalOSType')].Name)]",
        "apiVersion": "2020-06-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "dbVMLoop"
        ],
        "copy": {
          "name": "dbExtVMLoop",
          "count": "[if(equals(parameters('systemAvailability'), 'HA'), 2, 1)]"
        },
        "properties": {
          "publisher": "(csExtension)[variables(internalOSType)].Publisher",
          "type": "(csExtension)[variables(internalOSType)].Name",
          "typeHandlerVersion": "(csExtension)[variables(internalOSType)].Version",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": [
              "(csExtension)[variables(internalOSType)].script"
            ],
            "commandToExecute": "[concat(variables('csExtension')[variables('internalOSType')].scriptCall, ' ', variables('sizes')[parameters('sapSystemSize')][parameters('dbType')].scriptArguments[variables('internalOSType')])]"
          }
        }
      },
      {
        "type": "Microsoft.Compute/availabilitySets",
        "name": "[toLower(parameters('sapSystemId'))]-avset-di",
        "apiVersion": "2020-06-01",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Aligned"
        },
        "condition": false,
        "properties": {
          "platformFaultDomainCount": 2,
          "platformUpdateDomainCount": 10
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[toLower(parameters('sapSystemId'))]-nic-di-copyindex()",
        "apiVersion": "2020-05-01",
        "dependsOn": [
          "Microsoft.Network/virtualNetworks/[toLower(parameters('sapSystemId'))]-vnet"
        ],
        "copy": {
          "name": "nicDILoop",
          "count": "[if(equals(parameters('systemAvailability'), 'HA'), max(2, variables('divmCountNonHA')), variables('divmCountNonHA'))]"
        },
        "location": "[resourceGroup().location]",
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "(subnets)[string(equals(length(parameters(subnetId)), 0))]"
                }
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[toLower(parameters('sapSystemId'))]-di-copyIndex()",
        "copy": {
          "name": "diVMLoop",
          "count": "[if(equals(parameters('systemAvailability'), 'HA'), max(2, variables('divmCountNonHA')), variables('divmCountNonHA'))]"
        },
        "dependsOn": [
          "nicDILoop",
          "Microsoft.Compute/availabilitySets/[toLower(parameters('sapSystemId'))]-avset-di"
        ],
        "apiVersion": "2020-06-01",
        "location": "[resourceGroup().location]",
        "zones": "[if(equals(length(parameters('availabilityZones')), 0), json('null'), array(variables('azArray')[mod(copyIndex(), variables('azArrayLength'))]))]",
        "properties": {
          "availabilitySet": "[if(equals(variables('azArrayLength'), 0), resourceId('Microsoft.Compute/availabilitySets', variables('avSetNameDI')), json('null'))]",
          "hardwareProfile": {
            "vmSize": "divmSize"
          },
          "osProfile": {
            "computerName": "[toLower(parameters('sapSystemId'))]-di-copyIndex()",
            "adminUsername": "GEN-UNIQUE",
            "adminPassword": "GEN-PASSWORD",
            "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "(images)[parameters(osType)].publisher",
              "offer": "(images)[parameters(osType)].offer",
              "sku": "(images)[parameters(osType)].sku",
              "version": "latest"
            },
            "osDisk": {
              "name": "[toLower(parameters('sapSystemId'))]-di-copyIndex()-osdisk",
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "Premium_LRS"
              }
            },
            "dataDisks": [
              {
                "lun": 0,
                "createOption": "Empty",
                "diskSizeGB": 128
              }
            ]
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "Microsoft.Network/networkInterfaces/[toLower(parameters('sapSystemId'))]-nic-di-copyIndex()"
              }
            ]
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(variables('vmNameDI'), '-', copyIndex(), '/', variables('csExtension')[variables('internalOSType')].Name)]",
        "apiVersion": "2020-06-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "diVMLoop"
        ],
        "copy": {
          "name": "diExtVMLoop",
          "count": "[if(equals(parameters('systemAvailability'), 'HA'), max(2, variables('divmCountNonHA')), variables('divmCountNonHA'))]"
        },
        "properties": {
          "publisher": "(csExtension)[variables(internalOSType)].Publisher",
          "type": "(csExtension)[variables(internalOSType)].Name",
          "typeHandlerVersion": "(csExtension)[variables(internalOSType)].Version",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": [
              "(csExtension)[variables(internalOSType)].script"
            ],
            "commandToExecute": "[concat(variables('csExtension')[variables('internalOSType')].scriptCall, ' ', variables('scriptArgumentsASCSDI')[variables('internalOSType')])]"
          }
        }
      }
    ],
    "\uff04schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
  }
}